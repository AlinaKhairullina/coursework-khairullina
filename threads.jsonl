{"thread_id": "2394f314_d06c22f3", "url": "https://gerrit.libreoffice.org/#/c/infra/libreofficeorg/+/157989/1/customs.py@9", "comments": [{"message": "You can set the bug report address (website) and the email address for the default l10n team here too.", "timestamp": "2023-10-15 16:23:11.000000000"}, {"message": "Done", "timestamp": "2023-10-16 12:26:58.000000000"}]}
{"thread_id": "340b4bcf_0a28ff67", "url": "https://gerrit.libreoffice.org/#/c/core/+/147868/5/sw/qa/core/text/text.cxx@137", "comments": [{"message": "You still change an existing test to assert that the page has no links when it used to assert that it had links. Please undo that change. My understanding is that you managed to find a way to make everyone happy at a high level: if the biblio entry has an URL with a fragment, then keep the behavior unchanged, otherwise link to the row in the biblio table.\n\nSo really, no need to change an existing test.", "timestamp": "2023-02-28 07:45:07.000000000"}, {"message": "Yes, the description sounds correct, but I don't see how this test should be unchanged in that case, since there is no bibliography table to link to and I don't believe the URL of the field is a \"fragment\" either.", "timestamp": "2023-02-28 09:43:31.000000000"}, {"message": "It's not \"is a fragment\", it's \"has a fragment\". The idea is: if the biblio entry has an URL with a fragment, then keep the behavior unchanged (so no need to change existing tests), regardless if there is a biblio table or not. Otherwise your change would link to the row in the biblio table, which can be covered in a new test.\n\nHope that helps. :-)", "timestamp": "2023-03-01 07:06:57.000000000"}, {"message": "Basically in your opinion \"website.com\" should link to the table and \"website.com#paragraph\" should link to the page directly? What if someone wants to reference a page which has a fragment (some specific section of the page, for example) but wants it to link to the table? It doesn't sound very practical to me, if I'm honest \ud83e\udd14", "timestamp": "2023-03-01 08:52:30.000000000"}, {"message": "My input would be that breaking existing use-cases covered by tests is not OK in general. I would suggest that if you want to do that, then talk to somebody who requested the \"link to page\" feature years ago (that's why I CC'd Muhammet in your original change, now done here again) and get buy-in from them.\n\nIf you break existing functionality, angry users will file regression reports against your change and you'll have to fix the problem anyway. It's better to fix it before this change goes in. I don't recall the exact logic (you can find it in the commit if you do a git blame on the testcase), but the point is in case a biblio field has a URL that ends with a #page=N fragment, then we link to that page, but deduplicate such biblio fields, so the source only appears once in the biblio table. It would be nice if you would not break this feature.\n\nI imagine that this kind of linking is relatively rare (the common way is to link to fragments in HTML files only), so probably you can introduce your \"link to biblio table row\" functionality without breaking the older use-case and make everyone happy.\n\n(Note that I don't personally care much about this feature myself, it's more like we try hard to not break things intentionally; or if we do, we at least get buy-in from affected people.)", "timestamp": "2023-03-02 07:32:43.000000000"}, {"message": "I see. Personally I don't think this deduplication should happen, but I see your point now \ud83e\udd14\n\nMost flexible solution I can think of would be changing current \"URL\" to something like \"Listed URL\", and adding new \"column\", something like \"Target URL\". That way if someone wants to link to some page in the document, or directly to a section in a different document, they can just enter the \"Target URL\", and the deduplication can be done only with the \"Listed URL\", otherwise if \"Target URL\" is empty the table is linked. Sounds good?", "timestamp": "2023-03-02 07:45:52.000000000"}, {"message": "It may work, but you need to consider existing documents, where the behavior is that once you have a URL of the biblio field, we link there. So if you add a new thing, that won't help with old documents that you would break.\n\nI'm afraid I'm just repeating myself: please don't modify existing tests and try to improve behavior in a way that doesn't break them. Doing that is really a rare exception.\n\nDo you have an actual use-case where you want to link to a specific page and still the biblio field would link the bilio table, or why do you insist on not even accepting a compromise? Thanks.", "timestamp": "2023-03-03 07:51:18.000000000"}, {"message": "Yes, I am aware some documents would break a bit if this change happened, however I think positives outweigh the negatives here. Only documents that would geniunely be \"broken\" would be the documents that use the anchor to current document, everything else would just link to the table, meaning it would still work in a usable way by default, just tiny bit different. Furthermore the usage of anchor to current document is so unobvious that documents using it most likely virtually don't exist. On the other hand the positives are these features being much more obvious, user-friendly and futureproof.\n\nAs for the second paragraph, sorry, but I must agree, you are repeating yourself. Also please note this change is now work in progress, I agree with most of your arguments and don't expect it to be merged in this state.\n\nAnd yes, I definitely wouldn't spend so much of my precious time on a feature I don't care about. However I don't know what compromise you are talking about \ud83e\udd28", "timestamp": "2023-03-03 08:27:45.000000000"}, {"message": "Would it work like this?", "timestamp": "2023-03-06 08:09:04.000000000"}, {"message": "You still change an existing test to assert the opposite of what it used to assert. If you feel like I'm gatekeeping this change, feel free to ask somebody else to review it.\n\nIf you ask my input, I'm only happy with the change in case you don't change existing tests, or in case you have feedback from people who actually use this feature, saying that the breakage is OK for them, and this is documented in the commit message.\n\nWhat would instead is to keep the default unchanged, but with your new bool/ODF attribute users could opt in to link to the biblio table row, even if the biblio field has a URL. Thanks.", "timestamp": "2023-03-06 08:31:48.000000000"}, {"message": "I see, I didn't think about that. Adding a bool to opt into this seems like unnecesary complexity to me at this point, but if it comes down to it, I will do that. Thank you.", "timestamp": "2023-03-06 08:36:28.000000000"}, {"message": "As you suggested, I added a checkbox to enable this new behaviour, meaning this shouldn't be a problem anymore.", "timestamp": "2023-03-07 06:40:45.000000000"}, {"message": "Thanks, this now looks reasonable to me :-)", "timestamp": "2023-03-07 07:12:28.000000000"}]}
{"thread_id": "4da432d5_c81ebc33", "url": "https://gerrit.libreoffice.org/#/c/core/+/147868/5/sw/qa/core/text/text.cxx@166", "comments": [{"message": "This function call seems to fail (com.sun.star.io.IOException, \"Storing has failed, no error is set!\"), but absolutely no idea why, my code seems to do what it should be doing and the failure seems to happen somewhere down the line \ud83e\udd14", "timestamp": "2023-02-27 13:59:18.000000000"}, {"message": "How is it this fails, when export through running app works completely correctly, provided it's viewed through viewer that supports it, such as Chromium? \ud83e\udd28", "timestamp": "2023-02-27 14:56:17.000000000"}, {"message": "You can run the cppunit test with the CPPUNITTRACE=\"gdb --args\" parameter and then you'll be able to step into save() with gdb and investigate.", "timestamp": "2023-02-28 07:45:07.000000000"}, {"message": "Huh, it seems to me the URL \"#pages=1\" causes an rtl::MalformedUriException to be thrown (when in test environment?) \ud83d\ude02 Should that happen, or is that incorrect behaviour? \ud83e\udd14", "timestamp": "2023-02-28 12:10:16.000000000"}, {"message": "Okay, not really. It turns for some reason tiny piece of code deep down in the export process (PDFWriterImpl::emitLinkAnnotations) depends on the URL of the source document, meaning it presumably only ever worked because everyone who tested it saved the document beforehand, obviously didn't work here and doesn't work for me when I don't save.", "timestamp": "2023-03-01 20:59:45.000000000"}, {"message": "Seems I managed to fix that as well.", "timestamp": "2023-03-01 22:57:25.000000000"}]}
{"thread_id": "6e499f2d_e098d27d", "url": "https://gerrit.libreoffice.org/#/c/core/+/98858/8/vcl/source/control/field2.cxx@1387", "comments": [{"message": "in this chunk of code, which was converted to the method GetDateArea(),\neFormat is modified inside GetDateArea, but that change does not propogate to the caller?", "timestamp": "2023-03-06 13:30:27.000000000"}, {"message": "yeah, unintentional will fix with https://gerrit.libreoffice.org/c/core/+/148359", "timestamp": "2023-03-06 17:12:06.000000000"}]}
{"thread_id": "2b896b11_f9e25006", "url": "https://gerrit.libreoffice.org/#/c/core/+/142843/6/sc/source/core/tool/dbdata.cxx@692", "comments": [{"message": "Just setting the attributes is not enough. It needs further handling when inserting/deleting columns similar to maTableColumnNames, i.e. like in ScDBData::AdjustTableColumnNames().\n\nThe head/tail algorithm should be extracted to a template which can be used by both.", "timestamp": "2022-11-23 16:34:41.000000000"}, {"message": "It might also be possible (and easier) to modify AdjustTableColumnNames() to handle both (and rename the function to indicate it's not just about ColumnNames) and handle things similar for the call in ScDBData::UpdateReference().", "timestamp": "2022-11-23 16:55:42.000000000"}, {"message": "While it's (not yet?) possible to modify the totals row functions, updating its columns when inserting/deleting columns is necessary nevertheless.", "timestamp": "2022-11-23 16:58:01.000000000"}, {"message": "Do you think this patchset is adequate for this issue? Seems to correctly update the attributes when columns are inserted/deleted as seen in the test in the relation chain.", "timestamp": "2022-11-24 19:30:56.000000000"}, {"message": "Done", "timestamp": "2022-11-30 12:19:06.000000000"}]}
{"thread_id": "655428ed_aeecce9e", "url": "https://gerrit.libreoffice.org/#/c/core/+/142843/8/sc/source/core/tool/dbdata.cxx@878", "comments": [{"message": "Table columns names can get changed here too... isn't that a problem for a table column attributes?", "timestamp": "2022-11-29 00:53:59.000000000"}, {"message": "I might be wrong but I think that function is to assign new names to newly inserted columns, and that aNewNames vector is same size as maTableColumnNames, just has different names for the columns.", "timestamp": "2022-11-29 13:01:43.000000000"}, {"message": "Done", "timestamp": "2022-11-30 14:19:41.000000000"}]}
{"thread_id": "16b2b7a6_8b5314bf", "url": "https://gerrit.libreoffice.org/#/c/core/+/142843/9/sc/source/core/tool/dbdata.cxx@738", "comments": [{"message": "Caveat, for aNewAttributes the same empty swap happens with eUpdateRefMode != URM_INSDEL (i.e. URM_COPY or URM_MOVE) but nothing handles that. As those \"attributes\" currently are only dead static strings and not real formulas there's nothing to adjust, but probably the original should be preserved on URM_MOVE.\n(just a thought, the formula string may be invalid anyway after any modification of structure if it does not use only structured table references).", "timestamp": "2022-12-01 11:49:00.000000000"}]}
{"thread_id": "11d25079_d8723cb4", "url": "https://gerrit.libreoffice.org/#/c/core/+/148197/1/sc/source/ui/view/hdrcont.cxx@273", "comments": [{"message": "These two `// swap ...` comments are redundant now.", "timestamp": "2023-03-03 19:14:53.000000000"}, {"message": "Done", "timestamp": "2023-03-04 01:50:05.000000000"}]}
{"thread_id": "025677ed_f2d5adcf", "url": "https://gerrit.libreoffice.org/#/c/core/+/148197/2/sc/source/ui/view/hdrcont.cxx@b279", "comments": [{"message": "There is no point in changing the spaces in this line. Please revert this line back to what it was before.", "timestamp": "2023-03-04 13:50:46.000000000"}, {"message": "Done", "timestamp": "2023-03-04 14:30:38.000000000"}]}
{"thread_id": "59ce7390_0b32f426", "url": "https://gerrit.libreoffice.org/#/c/core/+/148144/1/sc/source/ui/view/editsh.cxx@731", "comments": [{"message": "This would also not disable all other slots requested, which likely is not wanted. Rather disable all except the one SID_TOGGLE_REL needed in this case.", "timestamp": "2023-03-03 15:32:39.000000000"}, {"message": "Done", "timestamp": "2023-03-03 22:03:25.000000000"}]}
{"thread_id": "c603b16d_b71d9569", "url": "https://gerrit.libreoffice.org/#/c/core/+/148144/2/sc/source/ui/view/editsh.cxx@739", "comments": [{"message": "What do we need SID_CHARMAP for? Font selection in a formula doesn't make sense, it anyway won't be preserved. Or am I confusing something?", "timestamp": "2023-03-04 17:55:45.000000000"}, {"message": "That is \"insert special character\". How useful that is I don't know, but I can imagine it could apply in some functions - especially text functions.", "timestamp": "2023-03-04 19:06:48.000000000"}]}
{"thread_id": "ff169360_001918cb", "url": "https://gerrit.libreoffice.org/#/c/core/+/148201/1/linguistic/source/gciterator.cxx@520", "comments": [{"message": "This doesn't work, or only for plain ISO 639-1|3 language plus ISO 3166 alpha-2 country codes. Anything else is transported in a Locale with Language=\"qlt\" and possibly a Country value if any, and the entire BCP 47 language tag in the Variant field, so these can't be simply stripped off. See also udkapi/com/sun/star/lang/Locale.idl\n\nApart from that, I wonder why we even have this odd mapping from LanguageType (converted from Locale) to Impl-Name (probably a legacy leftover). More straight forward would be a mapping from language tag to Impl-Name, then a LanguageTag::getFallbackStrings() could be used to find the first best fallback. Similar to what is done in unotools/source/config/fontcfg.cxx for the tryLocale() call.\n\nCare has to be taken though that in linguistic context the empty Locale does not mean system locale but LANGUAGE_NONE (unfortunately the entire handling appears to stem from times before the \"zxx\" ISO code), see linguistic/source/misc.cxx the LinguLocaleToLanguage() implementation. That might be worth a complete rework later because it can be utterly confusing, but I don't know what it would take or involve.", "timestamp": "2023-03-04 17:21:31.000000000"}, {"message": "Done", "timestamp": "2023-03-05 12:12:28.000000000"}]}
{"thread_id": "3551cc47_58df352e", "url": "https://gerrit.libreoffice.org/#/c/core/+/148201/6/linguistic/source/gciterator.cxx@494", "comments": [{"message": "This could benefit from explicitly handling an empty Locale meaning LANGUAGE_NONE. For that case with 2nd parameter bResolveSystem=false the returned sBcp47 will be empty. However, you can already bail out early and just check rLocale.Language.isEmpty() as does LinguLocaleToLanguage().\n\nAs is, the empty Locale LANGUAGE_NONE looks to work and results in not found, but takes all unnecessary steps to go through conversions and empty lookups and fallbacks.", "timestamp": "2023-03-05 12:12:28.000000000"}, {"message": "Thank you!\n\nLet me offload this check to the convertToBcp47, since it does the check anyway :) - so that inner check will not be useless.", "timestamp": "2023-03-05 12:36:49.000000000"}, {"message": "It does that already and returns an empty Bcp47 string. But as said, all conversion and lookup is unnecessary if Locale.Language is empty.", "timestamp": "2023-03-05 13:03:31.000000000"}]}
{"thread_id": "e5392e74_8f2af585", "url": "https://gerrit.libreoffice.org/#/c/core/+/148201/8/linguistic/source/gciterator.cxx@494", "comments": [{"message": "Indeed! So now in this case, we avoid it.", "timestamp": "2023-03-05 13:05:25.000000000"}]}
{"thread_id": "283c9c63_eabefb19", "url": "https://gerrit.libreoffice.org/#/c/core/+/142062/2/editeng/source/editeng/impedit3.cxx@2172", "comments": [{"message": "params are swapped here", "timestamp": "2022-10-31 13:43:07.000000000"}, {"message": "fix at https://gerrit.libreoffice.org/c/core/+/142077", "timestamp": "2022-10-31 13:46:26.000000000"}]}
{"thread_id": "dc8b8d77_007ea86c", "url": "https://gerrit.libreoffice.org/#/c/core/+/146634/4/test/source/a11y/accessibletestbase.cxx@381", "comments": [{"message": "This checks whether the reference is empty, but it doesn't get cleared by calling `XDialog2::endDialog` above, so IIUC, the method will always return `false` in case a dialog is set. The return value currently seems to be unused anyway, though, so I'm wondering whether it might make sense to just drop it otherwise?\n\n(In a quick test, adding an `assert` for the return value in `test::AccessibleTestBase::Dialog::~Dialog`, that assert failed.)", "timestamp": "2023-02-28 15:55:40.000000000"}, {"message": "Right, there's no equivalent to `isDisposed()` here\u2026 but you're right that it's not actually used, and there's not much we can do about it if it doesn't close but notice and cry anyway.  I'll drop it.", "timestamp": "2023-02-28 20:39:49.000000000"}]}
{"thread_id": "a2b1f64b_35a6253b", "url": "https://gerrit.libreoffice.org/#/c/core/+/146634/4/test/source/a11y/accessibletestbase.cxx@498", "comments": [{"message": "Sounds likely. IIUC, what happens here is that 2 different kind of ref-counted structures are used to refer to the same object:\n\n* the `shared_ptr`\n* a `uno::Reference`, passed to `XExtendedToolkit::addTopWindowListener` and held by the toolkit.\n\nThe problem would then be that those ref-counters are independent, i.e. both reach 0 at some point independently of each other, and then destroy the object (while the other ref-counted reference still gives the impression that the object is valid).\n\nI'm wondering whether either using the same for both cases (i.e. have `test::AccessibleTestBase::awaitDialog` return a `uno::Reference` instead of a `shared_ptr`) or decoupling the lifecycle by using separate objects would make sense here? (Just one thought, not necessarily the only or best approach.)\n\nTo try this, I used the following local modification that uses a separate object (of new demo class `MyTopWindowListener`) for the top window listener (`git diff -w` helps to see the \"actual changes\" more easily):\n\n\n```\ndiff --git a/test/source/a11y/accessibletestbase.cxx b/test/source/a11y/accessibletestbase.cxx\nindex 77f5989d74d3..851c1cfa3421 100644\n--- a/test/source/a11y/accessibletestbase.cxx\n+++ b/test/source/a11y/accessibletestbase.cxx\n@@ -392,9 +392,10 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n      * The approach here is to wait on the WindowActivate event for the dialog, and run the\n      * test code in there. Then, close the dialog if not already done, resuming normal flow to\n      * the caller. */\n-    class ListenerHelper : public DialogWaiter,\n-                           public ::cppu::WeakImplHelper<awt::XTopWindowListener>\n+    class ListenerHelper : public DialogWaiter\n     {\n+        class MyTopWindowListener;\n+\n         DialogCancelMode miPreviousDialogCancelMode;\n         uno::Reference<awt::XExtendedToolkit> mxToolkit;\n         bool mbWaitingForDialog;\n@@ -404,14 +405,14 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n         bool mbAutoClose;\n         Timer maTimeoutTimer;\n         Idle maIdleHandler;\n-\n+        css::uno::Reference<MyTopWindowListener> mxTopWindowListener;\n         std::unique_ptr<Dialog> mxDialog;\n \n     public:\n         virtual ~ListenerHelper()\n         {\n             Application::SetDialogCancelMode(miPreviousDialogCancelMode);\n-            mxToolkit->removeTopWindowListener(this);\n+            mxToolkit->removeTopWindowListener(mxTopWindowListener);\n             maTimeoutTimer.Stop();\n             maIdleHandler.Stop();\n             mxDialog.reset();\n@@ -426,8 +427,9 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n             , maTimeoutTimer(\"workaround timer if we don't catch WindowActivate\")\n             , maIdleHandler(\"runs user callback in idle time\")\n         {\n+            mxTopWindowListener.set(new MyTopWindowListener(this));\n             mxToolkit.set(Application::GetVCLToolkit(), uno::UNO_QUERY_THROW);\n-            mxToolkit->addTopWindowListener(this);\n+            mxToolkit->addTopWindowListener(mxTopWindowListener);\n \n             maTimeoutTimer.SetInvokeHandler(LINK(this, ListenerHelper, timeoutTimerHandler));\n             maTimeoutTimer.SetTimeout(60000);\n@@ -459,45 +461,47 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n             throw new css::uno::RuntimeException(\"Timeout waiting for dialog\");\n         }\n \n-        // XTopWindowListener\n-        virtual void SAL_CALL windowOpened(const css::lang::EventObject&) override {}\n-        virtual void SAL_CALL windowClosing(const css::lang::EventObject&) override {}\n-        virtual void SAL_CALL windowClosed(const css::lang::EventObject&) override {}\n-        virtual void SAL_CALL windowMinimized(const css::lang::EventObject&) override {}\n-        virtual void SAL_CALL windowNormalized(const css::lang::EventObject&) override {}\n-        virtual void SAL_CALL windowDeactivated(const css::lang::EventObject&) override {}\n-        virtual void SAL_CALL windowActivated(const css::lang::EventObject& xEvent) override\n+        class MyTopWindowListener : public ::cppu::WeakImplHelper<css::awt::XTopWindowListener>\n         {\n-            assert(mbWaitingForDialog);\n+        private:\n+            ListenerHelper* mpHelper;\n \n-            if (!xEvent.Source)\n-                return;\n+        public:\n+            MyTopWindowListener(ListenerHelper* pHelper)\n+                : mpHelper(pHelper)\n+            {\n+                assert(mpHelper);\n+            }\n \n-            uno::Reference<awt::XDialog2> xDialog(xEvent.Source, uno::UNO_QUERY);\n-            if (!xDialog)\n-                return;\n+            // XTopWindowListener\n+            virtual void SAL_CALL windowOpened(const css::lang::EventObject&) override {}\n+            virtual void SAL_CALL windowClosing(const css::lang::EventObject&) override {}\n+            virtual void SAL_CALL windowClosed(const css::lang::EventObject&) override {}\n+            virtual void SAL_CALL windowMinimized(const css::lang::EventObject&) override {}\n+            virtual void SAL_CALL windowNormalized(const css::lang::EventObject&) override {}\n+            virtual void SAL_CALL windowDeactivated(const css::lang::EventObject&) override {}\n+            virtual void SAL_CALL windowActivated(const css::lang::EventObject& xEvent) override\n+            {\n+                assert(mpHelper->mbWaitingForDialog);\n \n-            // remove ourselves, we don't want to run again\n-            mxToolkit->removeTopWindowListener(this);\n+                if (!xEvent.Source)\n+                    return;\n \n-            mxDialog = std::make_unique<Dialog>(xDialog, true);\n+                uno::Reference<awt::XDialog2> xDialog(xEvent.Source, uno::UNO_QUERY);\n+                if (!xDialog)\n+                    return;\n \n-            maIdleHandler.Start();\n-        }\n+                // remove ourselves, we don't want to run again\n+                mpHelper->mxToolkit->removeTopWindowListener(this);\n \n-        // XEventListener\n-        virtual void SAL_CALL disposing(const css::lang::EventObject&) override\n-        {\n-            // FIXME: is that correct?\n-            mxToolkit->removeTopWindowListener(this);\n-        }\n+                mpHelper->mxDialog = std::make_unique<Dialog>(xDialog, true);\n \n-        // cppu::WeakImplHelper override\n-        virtual void SAL_CALL release() SAL_NOEXCEPT override\n-        {\n-            // do not call OWeakObject::release() as it'd try and delete `this`, which is a\n-            // shared_ptr.  FIXME: is that right?\n-        }\n+                mpHelper->maIdleHandler.Start();\n+            }\n+\n+            // XEventListener\n+            virtual void SAL_CALL disposing(const css::lang::EventObject&) override {}\n+        };\n \n         // mimic IMPL_LINK inline\n         static void LinkStubidleHandler(void* instance, Timer* idle)\n```", "timestamp": "2023-02-28 15:55:40.000000000"}, {"message": "Makes sense.\n\nAnd yeah I have seen it done like that other places, and although I kind of don't love how it splits the logic, it looks like a less tricky method than fiddling with `release()`.  I've integrated your changes with minimal adjustments, thanks!", "timestamp": "2023-02-28 20:39:49.000000000"}]}
{"thread_id": "92d71add_ae3d1d9c", "url": "https://gerrit.libreoffice.org/#/c/core/+/146378/7/include/test/a11y/accessibletestbase.hxx@186", "comments": [{"message": "friend class no longer needed now that the ctor is public", "timestamp": "2023-02-28 07:59:14.000000000"}, {"message": "Ah indeed, neat", "timestamp": "2023-02-28 20:43:32.000000000"}]}
{"thread_id": "943dc468_6724c1c0", "url": "https://gerrit.libreoffice.org/#/c/core/+/142260/22/include/test/a11y/AccessibilityTools.hxx@81", "comments": [{"message": "Maybe a small clarification that not the object itself matches all of the pairs, but the subtree does, might be helpful.\nMaybe sth like \"...whose objects on the path in the a11y tree match the given role and name pairs.\"?\n(And maybe adding sth like \"The object itself matches the last pair.\" in the detailed description below?)", "timestamp": "2023-02-24 15:11:03.000000000"}, {"message": "Done", "timestamp": "2023-02-28 20:42:38.000000000"}]}
{"thread_id": "696dd94a_52c73f7f", "url": "https://gerrit.libreoffice.org/#/c/core/+/142260/22/include/test/a11y/AccessibilityTools.hxx@104", "comments": [{"message": "Do you plan to adjust to handle that TODO in the context of this change or is that left for sometime later?", "timestamp": "2023-02-24 15:11:03.000000000"}, {"message": "Not really, it's a bit too tricky for the gain I can see.  For really tricky situations, they can also always be solved manually anyway, and there can always be impossible to solve situations as mentioned.  It's more of a reminder that this might be a place to look at *if* such situations prove common enough to warrant it.\n\nI can change this to a note or something less obnoxious than a TODO, though.  Or just drop it.", "timestamp": "2023-02-28 20:42:38.000000000"}, {"message": "Thanks for the explanation, sounds reasonable and can IMHO stay as is.", "timestamp": "2023-03-01 08:20:53.000000000"}]}
{"thread_id": "1c9c5681_10f541ae", "url": "https://gerrit.libreoffice.org/#/c/core/+/142260/22/sw/qa/extras/accessibility/dialogs.cxx@40", "comments": [{"message": "This is indeed odd. FWIW, the OK button can also be made to work by pressing the space key after tabbing to the copyright button. But this still looks more like a bug than a feature to me.\nI have created a bug report suggesting to improve the interaction (currently waiting for UX input):\nhttps://bugs.documentfoundation.org/show_bug.cgi?id=153806 \n\nDoes the suggested change help here?\nhttps://gerrit.libreoffice.org/c/core/+/147657", "timestamp": "2023-02-24 15:11:03.000000000"}, {"message": "wow, thanks a lot for this!\n\nYes, the patch fixes it, no need for the hackaround with it \ud83c\udf89\nI don't think it's the right fix (IMO Enter should always validate the dialog), but it does fix the focus issue, and we'll see how the bug plays out.", "timestamp": "2023-02-28 20:42:38.000000000"}, {"message": "Thanks for your input (also in the ticket), that's really helpful! \ud83d\ude0a\nI completely agree, and hope I'll find some time to further look into this at some point.", "timestamp": "2023-03-01 08:20:53.000000000"}, {"message": "Done", "timestamp": "2023-03-01 08:21:20.000000000"}]}
{"thread_id": "e2b10d62_5bdaa759", "url": "https://gerrit.libreoffice.org/#/c/core/+/142260/22/sw/qa/extras/accessibility/dialogs.cxx@46", "comments": [{"message": "Does https://gerrit.libreoffice.org/c/core/+/147660 help here?", "timestamp": "2023-02-24 15:11:03.000000000"}, {"message": "Yes it does! \ud83c\udf89\n\nI added an extra test that verifies it does work, and kept the other tab method so the additional API is exercised still.", "timestamp": "2023-02-28 20:42:38.000000000"}, {"message": "Great, thanks.", "timestamp": "2023-03-01 08:20:53.000000000"}]}
{"thread_id": "e72b5084_c525f15b", "url": "https://gerrit.libreoffice.org/#/c/core/+/142260/24/sw/qa/extras/accessibility/dialogs.cxx@85", "comments": [{"message": "There are no `!` entries on Windows somehow, see the output of `BasicTestSpecialCharactersDialog` in https://ci.libreoffice.org/job/gerrit_master/134454/\nThis doesn't lead to a failure because this test is not run under Windows until https://gerrit.libreoffice.org/c/core/+/146378", "timestamp": "2023-03-01 18:09:56.000000000"}, {"message": "OK, to keep this moving I just switched to moving down and inserting `0`; I'll deal with the weird case of `!` later on, it's unrelated.", "timestamp": "2023-03-01 21:56:02.000000000"}, {"message": "FTR: https://bugs.documentfoundation.org/show_bug.cgi?id=153918", "timestamp": "2023-03-02 09:01:44.000000000"}, {"message": "Thanks! Commented there.", "timestamp": "2023-03-03 10:49:17.000000000"}]}
{"thread_id": "0170848b_1d07289e", "url": "https://gerrit.libreoffice.org/#/c/core/+/148057/2/sd/source/ui/accessibility/AccessibleSlideSorterView.cxx@206", "comments": [{"message": "getting deadlock on loading https://bugs.documentfoundation.org/attachment.cgi?id=180272  in gtk3 with bt\n\n#5  0x00007f6bc1614835 in std::unique_lock<std::mutex>::unique_lock(std::mutex&) (this=0x7fff6cf27540, __m=...) at /usr/include/c++/12/bits/unique_lock.h:69\n#6  0x00007f6bc1615fb5 in accessibility::AccessibleSlideSorterView::getAccessibleChildCount() (this=0xf620b70)\n    at /home/caolan/LibreOffice/core/sd/source/ui/accessibility/AccessibleSlideSorterView.cxx:198\n#7  0x00007f6bef4fda8f in AtkListener::updateChildList(com::sun::star::uno::Reference<com::sun::star::accessibility::XAccessibleContext> const&)\n    (this=0xf61d1a0, pContext=uno::Reference to (accessibility::AccessibleSlideSorterView *) 0xf620be8) at /home/caolan/LibreOffice/core/vcl/unx/gtk3/a11y/atklistener.cxx:142\n#8  0x00007f6bef4fdce4 in AtkListener::handleChildAdded(com::sun::star::uno::Reference<com::sun::star::accessibility::XAccessibleContext> const&, com::sun::star::uno::Reference<com::sun::star::accessibility::XAccessible> const&)\n    (this=0xf61d1a0, rxParent=uno::Reference to (accessibility::AccessibleSlideSorterView *) 0xf620be8, rxAccessible=uno::Reference to (accessibility::AccessibleSlideSorterObject *) 0xdb8ce08) at /home/caolan/LibreOffice/core/vcl/unx/gtk3/a11y/atklistener.cxx:172\n#9  0x00007f6bef4fe375 in AtkListener::notifyEvent(com::sun::star::accessibility::AccessibleEventObject const&) (this=0xf61d1a0, aEvent=...)\n    at /home/caolan/LibreOffice/core/vcl/unx/gtk3/a11y/atklistener.cxx:435\n#10 0x00007f6c0c374c81 in comphelper::AccessibleEventNotifier::addEvent(unsigned int, com::sun::star::accessibility::AccessibleEventObject const&) (_nClient=45, _rEvent=...)\n    at /home/caolan/LibreOffice/core/comphelper/source/misc/accessibleeventnotifier.cxx:262\n#11 0x00007f6bc1615c64 in accessibility::AccessibleSlideSorterView::FireAccessibleEvent(short, com::sun::star::uno::Any const&, com::sun::star::uno::Any const&)\n   \n     (this=0xf620b70, nEventId=7, rOldValue=uno::Any(void), rNewValue=uno::Any(\"com.sun.star.accessibility.XAccessible\": {<com::sun::star::uno::XInterface> = {_vptr.XInterface = 0xdb8ce08}, <No data fields>}))\n    at /home/caolan/LibreOffice/core/sd/source/ui/accessibility/AccessibleSlideSorterView.cxx:146\n#12 0x00007f6bc1618dde in accessibility::AccessibleSlideSorterView::Implementation::GetAccessibleChild(int) (this=0xaf776d0, nIndex=1)\n    at /home/caolan/LibreOffice/core/sd/source/ui/accessibility/AccessibleSlideSorterView.cxx:756\n#13 0x00007f6bc1618ba9 in accessibility::AccessibleSlideSorterView::Implementation::GetVisibleChild(int) (this=0xaf776d0, nIndex=1)\n    at /home/caolan/LibreOffice/core/sd/source/ui/accessibility/AccessibleSlideSorterView.cxx:735\n#14 0x00007f6bc1616122 in accessibility::AccessibleSlideSorterView::getAccessibleChild(long) (this=0xf620b70, nIndex=1)\n    at /home/caolan/LibreOffice/core/sd/source/ui/accessibility/AccessibleSlideSorterView.cxx:211", "timestamp": "2023-03-02 16:01:49.000000000"}, {"message": "revert is here: https://gerrit.libreoffice.org/c/core/+/148156", "timestamp": "2023-03-03 07:02:12.000000000"}]}
{"thread_id": "8c1ed273_e366bb11", "url": "https://gerrit.libreoffice.org/#/c/core/+/146721/6/filter/source/msfilter/msdffimp.cxx@3896", "comments": [{"message": "The task here is to create some compile-time constant to use in the following comparison and in the call to SeekRel. The three affected constants are there just to clarify the intent of the values, \"give names\" to them.\n\nBut:\n\n(1) it failed to change the only really wrong type here properly: i.e., the type of nSkip, which is the real value used later in the comparison and the call. And both the uses show that the type of the const can change in a sensible way (to sal_uInt32, to match aHd.nRecLen).\n\n(2) it would be best to avoid these auxiliary constants completely (they are only used once):\n\n                    const sal_uInt32 nSkip = 20 // SkipBLIP length\n                                             + 4 // spacing\n                                             + 4 // SkipShape position\n                                             + 4 // spacing\n                                             + 4; // SkipBLIP\n\nThis would document it nicely, without introducing unnecessary complexity of type of intermediate values.", "timestamp": "2023-03-02 11:05:38.000000000"}, {"message": "Yes, nSkip is what I discussed with Yomna on 23 Feb.", "timestamp": "2023-03-02 11:08:42.000000000"}, {"message": "@Ilarmi: Can you ask her for a follow-up patch?", "timestamp": "2023-03-02 11:14:10.000000000"}, {"message": "Yomna: some additional bits you might want to use in the follow-up:\n\nThe code here executes for the record type equal to something called \"DFF_msofbtBSE\". It is defined as\n\n  #define  DFF_msofbtBSE   0xF007 // BLIP type   an FBSE (one per BLIP)\n\nand googling for \"F007\" \"BLIP\" gives this \"Office Drawing 97-2007 Binary Format Specification\" as the first match for me:\n\nhttps://www.loc.gov/preservation/digital/formats/digformatspecs/OfficeDrawing97-2007BinaryFormatSpecification.pdf\n\nOn page 14 of which, we can find the definition of msofbtBSE from MS, and counting the length of it, it is the same 36 bytes.\n\nThe existing names of the aux constants likely reflect some reverse-engineering of the data, and now can be replaced by simple reference to the documentation.", "timestamp": "2023-03-02 11:26:40.000000000"}]}
{"thread_id": "cea5fa33_29a73136", "url": "https://gerrit.libreoffice.org/#/c/core/+/135809/4/vcl/win/window/salframe.cxx@b1755", "comments": [{"message": "@sberg: just a blind guess re-reading the patch: what happens, if you add:\n\n>  if (!maGeometry.width() || !maGeometry.height())\n>    return false;\n    \nI'm somewhat sceptical, that a failing GetWindowState is always handled correctly, but maybe that is crucial here for your case.", "timestamp": "2022-06-22 10:46:22.000000000"}, {"message": "Ack", "timestamp": "2022-06-25 16:50:31.000000000"}]}
{"thread_id": "0db4d7a5_0e0b50f3", "url": "https://gerrit.libreoffice.org/#/c/core/+/148027/1/sw/source/ui/chrdlg/numpara.cxx@104", "comments": [{"message": "Not 100% sure of the reason for this. Apparently it IS possible to not have one of these (coverity scan) so I assume this dialog pops up somehow on an editeng paragraph. So I added something similar to mine just in case.", "timestamp": "2023-03-01 21:40:43.000000000"}]}
{"thread_id": "0d775551_9d934ac6", "url": "https://gerrit.libreoffice.org/#/c/core/+/148027/1/sw/source/ui/chrdlg/numpara.cxx@106", "comments": [{"message": "Why so complex? This is only an int16. So I followed other examples seen here and just did rSet->Put(SfxInt16Item(RES_PARATR_LIST_LEVEL, nListLevel)) for new code.", "timestamp": "2023-03-01 21:40:43.000000000"}]}
{"thread_id": "5aeafd85_ba75ea46", "url": "https://gerrit.libreoffice.org/#/c/core/+/142258/14/test/source/a11y/accessibletestbase.cxx@275", "comments": [{"message": "As this method doesn't actually work on Windows and MacOS (see the numerous updates to the patchsets to try and understand, and then disable the tests there -- basically we never get WindowActivate on MacOS, and the dialogs don't seem to want to close on Windows), should this function raise an exception or perform a CppUnit assertion when called on one of those platforms?  The advantage would be fool-proofing this a little better for future users, until we can figure out a proper fix.\n\nThe only problem with that is that there is one single working test that uses this API one those platforms (see SelfTestNoDialog), but it works only because it's not actually popping up a dialog, but rather exercising the timeout code path for when the caller forgot to trigger the dialog before calling `waitEndDialog()`.\n\nOpinions and/or ideas about this?", "timestamp": "2023-01-25 14:07:36.000000000"}, {"message": "Results from a first analysis on Windows:\n\nFrom what I can see here (with only this change in place on top of master), the dialogs seem to be closed, but not disposed, resulting in errors like this in a debug build (copied from PS 13 CI run):\n\n`warn:legacy.osl:12800:9388:vcl/source/window/window.cxx:307: Window ( class ImplBorderWindow(Untitled 1 \u00e2\u20ac\u201d LibreOfficeDev Writer 7.6 [a4584a5db756df479878a07bf93adc2de847c39d])) with live SystemWindows destroyed: [...]`\n\n\nReason why dispose doesn't happen seems to be this:\n\n`vcl/source/window/dialog.cxx:`\n\n```\n    // virtual\n    bool Dialog::StartExecuteAsync( VclAbstractDialog::AsyncContext &rCtx )\n    {\n        const bool bModal = GetType() != WindowType::MODELESSDIALOG;\n->      if (!ImplStartExecute())\n        {\n            rCtx.mxOwner.disposeAndClear();\n            rCtx.mxOwnerDialogController.reset();\n            rCtx.mxOwnerSelf.reset();\n            return false;\n        }\n\n->      mpDialogImpl->maEndCtx = rCtx;\n        mpDialogImpl->mbStartedModal = bModal;\n\n        return true;\n    }\n```\n\nSecond arrow indicates where the callback is set that will be called when the dialog ends. First arrow indicates where the dialog execution starts.\n\nFor Windows, the WindowActivate event already gets emitted in the `ImplStartExecute()` call, so the callback to dispose the dialog is not yet set. (For Linux, WindowActivate gets sent later only.)\n\nSee also (from the bt, where the \"rEndDialogFn\" is set):\n\n```\nvoid SwBaseShell::InsertRegionDialog(SfxRequest& rReq)\n{\n    // ...\n        VclPtr<AbstractInsertSectionTabDialog> aTabDlg(pFact->CreateInsertSectionTabDialog(\n            GetView().GetFrameWeld(), aSet , rSh));\n        aTabDlg->StartExecuteAsync([aTabDlg](sal_Int32 /*nResult*/){\n            aTabDlg->disposeOnce();\n        });\n    //...\n```\n\nFull backtrace for how `test::AccessibleTestBase::Dialog::close` gets called on Windows is below.\n\nSince the callback isn't set yet, the dialog is closed, but not disposed.\n\nMoving closing the dialog to `waitEndDialog` (which gets called after `ProcessEventsToIdle` was called) just for a quick test actually made these tests pass for me on Windows (s. diff below).\n\nNow that might not necessarily be a good idea (didn't take a closer look yet). Reading the doc for `awaitDialog`: Would something like that e.g. break the `Dialog::Execute()` case, since control won't return to the test code otherwise and `waitEndDialog` never gets run?\n\n\nDemo change that makes tests pass on Win for me:\n\n```\ndiff --git a/include/test/a11y/accessibletestbase.hxx b/include/test/a11y/accessibletestbase.hxx\nindex e78c8781a3a7..5daa62308eb8 100644\n--- a/include/test/a11y/accessibletestbase.hxx\n+++ b/include/test/a11y/accessibletestbase.hxx\n@@ -139,9 +139,8 @@ protected:\n         VclPtr<vcl::Window> mxWindow;\n         bool mbAutoClose;\n \n-        Dialog(vcl::Window* pWindow, bool bAutoClose = true);\n-\n     public:\n+        Dialog(vcl::Window* pWindow, bool bAutoClose = true);\n         virtual ~Dialog();\n \n         explicit operator bool() const { return mxWindow && !mxWindow->isDisposed(); }\ndiff --git a/test/qa/cppunit/dialog.cxx b/test/qa/cppunit/dialog.cxx\nindex f64e7d13a68c..9bf6bbee2e22 100644\n--- a/test/qa/cppunit/dialog.cxx\n+++ b/test/qa/cppunit/dialog.cxx\n@@ -10,7 +10,7 @@\n #include <test/a11y/accessibletestbase.hxx>\n \n // FIXME: dialog doesn't pop up on macos and doesn't close on win32...\n-#if !defined(MACOSX) && !defined(_WIN32)\n+//#if !defined(MACOSX) && !defined(_WIN32)\n /* Checks an unexpected dialog opening (instead of the expected one) is properly caught, as it would\n  * otherwise block the test potentially indefinitely */\n CPPUNIT_TEST_FIXTURE(test::AccessibleTestBase, SelfTestIncorrectDialog)\n@@ -27,10 +27,10 @@ CPPUNIT_TEST_FIXTURE(test::AccessibleTestBase, SelfTestIncorrectDialog)\n      * by the activateMenuItem() call above */\n     CPPUNIT_ASSERT_THROW(dialogWaiter->waitEndDialog(), css::uno::RuntimeException);\n }\n-#endif\n+//#endif\n \n // FIXME: dialog doesn't pop up on macos and doesn't close on win32...\n-#if !defined(MACOSX) && !defined(_WIN32)\n+//#if !defined(MACOSX) && !defined(_WIN32)\n /* Checks that an exception in the dialog callback code is properly handled and won't disturb\n  * subsequent tests if caught -- especially that DialogWaiter::waitEndDialog() won't timeout. */\n CPPUNIT_TEST_FIXTURE(test::AccessibleTestBase, SelfTestThrowInDialogCallback)\n@@ -46,7 +46,7 @@ CPPUNIT_TEST_FIXTURE(test::AccessibleTestBase, SelfTestThrowInDialogCallback)\n     CPPUNIT_ASSERT(activateMenuItem(u\"Insert\", u\"Hyperlink...\"));\n     CPPUNIT_ASSERT_THROW(dialogWaiter->waitEndDialog(), DummyException);\n }\n-#endif\n+//#endif\n \n // Checks timeout if dialog does not show up as expected\n CPPUNIT_TEST_FIXTURE(test::AccessibleTestBase, SelfTestNoDialog)\ndiff --git a/test/source/a11y/accessibletestbase.cxx b/test/source/a11y/accessibletestbase.cxx\nindex b16de00a9b90..360e812e89c5 100644\n--- a/test/source/a11y/accessibletestbase.cxx\n+++ b/test/source/a11y/accessibletestbase.cxx\n@@ -283,6 +283,8 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n         std::function<void(Dialog&)> mCallback;\n         bool mbAutoClose;\n \n+        std::unique_ptr<Dialog> mxDialog;\n+\n     public:\n         virtual ~ListenerHelper()\n         {\n@@ -330,7 +332,7 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n \n             /* bind the dialog before checking its name so auto-close can kick in if the anything\n              * fails/throws */\n-            Dialog dialog(pWin, true);\n+            mxDialog = std::make_unique<Dialog>(pWin, true);\n \n             /* The poping up dialog ought to be the right one, or something's fishy and\n              * we're bound to failure (e.g. waiting on a dialog that either will never come, or\n@@ -346,11 +348,11 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n                 std::cout << \"found dialog, calling user callback\" << std::endl;\n \n                 // set the real requested auto close now we're just calling the user callback\n-                dialog.setAutoClose(mbAutoClose);\n+                mxDialog->setAutoClose(mbAutoClose);\n \n                 try\n                 {\n-                    mCallback(dialog);\n+                    mCallback(*mxDialog);\n                 }\n                 catch (...)\n                 {\n@@ -376,6 +378,9 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n                 } while (mbWaitingForDialog && aTimer.IsActive());\n             }\n \n+            mxDialog.reset(); // closes the dialog, too\n+            Scheduler::ProcessEventsToIdle(); // may or may not be needed\n+\n             if (mpException)\n                 std::rethrow_exception(mpException);\n \n```", "timestamp": "2023-01-27 18:31:36.000000000"}, {"message": "Backtrace for how `test::AccessibleTestBase::Dialog::close` gets called in my case (last lines dropped to not exceed Gerrit comment length limit):\n\n```\n    subsequenttest.dll!test::AccessibleTestBase::Dialog::close(long result) Line 260\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\test\\source\\a11y\\accessibletestbase.cxx(260)\n    subsequenttest.dll!test::AccessibleTestBase::Dialog::~Dialog() Line 250\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\test\\source\\a11y\\accessibletestbase.cxx(250)\n    subsequenttest.dll!test::AccessibleTestBase::awaitDialog::ListenerHelper::eventListener(VclSimpleEvent & event) Line 364\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\test\\source\\a11y\\accessibletestbase.cxx(364)\n    subsequenttest.dll!test::AccessibleTestBase::awaitDialog::ListenerHelper::LinkStubeventListener(void * instance, VclSimpleEvent & event) Line 316\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\test\\source\\a11y\\accessibletestbase.cxx(316)\n    vcllo.dll!Link<VclSimpleEvent &,void>::Call(VclSimpleEvent & data) Line 111\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\include\\tools\\link.hxx(111)\n    vcllo.dll!VclEventListeners::Call(VclSimpleEvent & rEvent) Line 46\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\app\\vclevent.cxx(46)\n    vcllo.dll!Application::ImplCallEventListeners(VclSimpleEvent & rEvent) Line 819\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\app\\svapp.cxx(819)\n    vcllo.dll!vcl::Window::CallEventListeners(VclEventId nEvent, void * pData) Line 225\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\event.cxx(225)\n    vcllo.dll!vcl::Window::ImplCallActivateListeners(vcl::Window * pOld) Line 3429\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(3429)\n    vcllo.dll!vcl::Window::ImplCallActivateListeners(vcl::Window * pOld) Line 3434\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(3434)\n    vcllo.dll!vcl::Window::ImplCallActivateListeners(vcl::Window * pOld) Line 3434\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(3434)\n    vcllo.dll!vcl::Window::ImplCallActivateListeners(vcl::Window * pOld) Line 3434\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(3434)\n    vcllo.dll!vcl::Window::ImplCallActivateListeners(vcl::Window * pOld) Line 3434\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(3434)\n    vcllo.dll!vcl::Window::ImplCallActivateListeners(vcl::Window * pOld) Line 3434\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(3434)\n    vcllo.dll!vcl::Window::ImplCallActivateListeners(vcl::Window * pOld) Line 3434\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(3434)\n    vcllo.dll!vcl::Window::ImplCallActivateListeners(vcl::Window * pOld) Line 3434\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(3434)\n    vcllo.dll!vcl::Window::ImplCallActivateListeners(vcl::Window * pOld) Line 3434\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(3434)\n    vcllo.dll!vcl::Window::ImplCallActivateListeners(vcl::Window * pOld) Line 3434\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(3434)\n    vcllo.dll!vcl::Window::ImplGrabFocus(GetFocusFlags nFlags) Line 386\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\mouse.cxx(386)\n    vcllo.dll!vcl::Window::GrabFocus() Line 2986\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(2986)\n    vcllo.dll!vcl::Window::ImplGrabFocus(GetFocusFlags nFlags) Line 221\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\mouse.cxx(221)\n    vcllo.dll!vcl::Window::GrabFocus() Line 2986\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(2986)\n    vcllo.dll!vcl::Window::ImplFocusToTop(ToTopFlags nFlags, bool bReallyVisible) Line 382\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\stacking.cxx(382)\n    vcllo.dll!vcl::Window::Show(bool bVisible, ShowFlags nFlags) Line 2318\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(2318)\n    vcllo.dll!vcl::Window::Show(bool bVisible, ShowFlags nFlags) Line 2339\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\window.cxx(2339)\n    vcllo.dll!Dialog::ImplStartExecute() Line 1010\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\dialog.cxx(1010)\n    vcllo.dll!Dialog::StartExecuteAsync(VclAbstractDialog::AsyncContext & rCtx) Line 1098\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\dialog.cxx(1098)\n    vcllo.dll!SalInstanceDialog::runAsync(std::shared_ptr<weld::DialogController> aOwner, const std::function<void (long)> & rEndDialogFn) Line 1755\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\app\\salvtables.cxx(1755)\n    vcllo.dll!weld::DialogController::runAsync(const std::shared_ptr<weld::DialogController> & rController, const std::function<void (long)> & func) Line 44\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\app\\weldutils.cxx(44)\n    sfxlo.dll!SfxTabDialogController::runAsync(const std::shared_ptr<SfxTabDialogController> & rController, const std::function<void (long)> & rFunc) Line 1044\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\sfx2\\source\\dialog\\tabdlg.cxx(1044)\n    swuilo.dll!AbstractInsertSectionTabDialog_Impl::StartExecuteAsync(VclAbstractDialog::AsyncContext & rCtx) Line 312\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\sw\\source\\ui\\dialog\\swdlgfact.cxx(312)\n    swlo.dll!VclAbstractDialog::StartExecuteAsync(const std::function<void (long)> & rEndDialogFn) Line 73\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\include\\vcl\\abstdlg.hxx(73)\n    swlo.dll!SwBaseShell::InsertRegionDialog(SfxRequest & rReq) Line 67\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\sw\\source\\uibase\\dialog\\regionsw.cxx(67)\n    swlo.dll!SfxStubSwBaseShellInsertRegionDialog(SfxShell * pShell, SfxRequest & rReq) Line 2215\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\SdiTarget\\sw\\sdi\\swslots.hxx(2215)\n    sfxlo.dll!SfxDispatcher::Call_Impl(SfxShell & rShell, const SfxSlot & rSlot, SfxRequest & rReq, bool bRecord) Line 254\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\sfx2\\source\\control\\dispatch.cxx(254)\n    sfxlo.dll!SfxDispatcher::PostMsgHandler(std::unique_ptr<SfxRequest,std::default_delete<SfxRequest>> pReq) Line 990\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\sfx2\\source\\control\\dispatch.cxx(990)\n    [External Code]\n    sfxlo.dll!SfxHintPoster::DoEvent_Impl(void * pPostedHint) Line 43\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\sfx2\\source\\notify\\hintpost.cxx(43)\n    sfxlo.dll!SfxHintPoster::LinkStubDoEvent_Impl(void * instance, void * data) Line 39\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\sfx2\\source\\notify\\hintpost.cxx(39)\n    vcllo.dll!Link<void *,void>::Call(void * data) Line 111\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\include\\tools\\link.hxx(111)\n    vcllo.dll!ImplHandleUserEvent(ImplSVEvent * pSVEvent) Line 2290\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\winproc.cxx(2290)\n    vcllo.dll!ImplWindowFrameProc(vcl::Window * _pWindow, SalEvent nEvent, const void * pEvent) Line 2857\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\window\\winproc.cxx(2857)\n    vclplug_winlo.dll!SalFrame::CallCallback(SalEvent nEvent, const void * pEvent) Line 306\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\inc\\salframe.hxx(306)\n    vclplug_winlo.dll!ImplHandleUserEvent(HWND__ * hWnd, __int64 lParam) Line 4205\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\win\\window\\salframe.cxx(4205)\n    vclplug_winlo.dll!SalFrameWndProc(HWND__ * hWnd, unsigned int nMsg, unsigned __int64 wParam, __int64 lParam, bool & rDef) Line 5856\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\win\\window\\salframe.cxx(5856)\n    vclplug_winlo.dll!SalFrameWndProcW(HWND__ * hWnd, unsigned int nMsg, unsigned __int64 wParam, __int64 lParam) Line 5963\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\win\\window\\salframe.cxx(5963)\n    [External Code]\n    vclplug_winlo.dll!ImplSalDispatchMessage(const tagMSG * pMsg) Line 475\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\win\\app\\salinst.cxx(475)\n    vclplug_winlo.dll!ImplSalYield(const bool bWait, const bool bHandleAllCurrentEvents) Line 506\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\win\\app\\salinst.cxx(506)\n    vclplug_winlo.dll!WinSalInstance::DoYield(bool bWait, bool bHandleAllCurrentEvents) Line 581\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\win\\app\\salinst.cxx(581)\n    vcllo.dll!ImplYield(bool i_bWait, bool i_bAllEvents) Line 475\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\app\\svapp.cxx(475)\n    vcllo.dll!Scheduler::ProcessEventsToIdle() Line 505\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\vcl\\source\\app\\svapp.cxx(505)\n    subsequenttest.dll!test::AccessibleTestBase::activateMenuItem(const com::sun::star::uno::Reference<com::sun::star::accessibility::XAccessibleAction> & xAction) Line 233\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\test\\source\\a11y\\accessibletestbase.cxx(233)\n    test_test_a11y.dll!test::AccessibleTestBase::activateMenuItem(const com::sun::star::uno::Reference<com::sun::star::accessibility::XAccessibleContext> & xCtx) Line 91\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\include\\test\\a11y\\accessibletestbase.hxx(91)\n    test_test_a11y.dll!test::AccessibleTestBase::activateMenuItem<const char16_t *,const char16_t *>(const com::sun::star::uno::Reference<com::sun::star::accessibility::XAccessibleContext> & xMenuCtx, const char16_t * names, const char16_t * names) Line 120\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\include\\test\\a11y\\accessibletestbase.hxx(120)\n    test_test_a11y.dll!test::AccessibleTestBase::activateMenuItem<const char16_t *,const char16_t *>(const char16_t * names, const char16_t * names) Line 130\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\include\\test\\a11y\\accessibletestbase.hxx(130)\n    test_test_a11y.dll!SelfTestIncorrectDialog::TestBody() Line 24\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\test\\qa\\cppunit\\dialog.cxx(24)\n    [External Code]\n    test_test_a11y.dll!CppUnit::TestCaller<SelfTestIncorrectDialog>::runTest() Line 176\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\UnpackedTarball\\cppunit\\include\\cppunit\\TestCaller.h(176)\n    cppunitd_dll.dll!CppUnit::TestCaseMethodFunctor::operator()() Line 33\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\UnpackedTarball\\cppunit\\src\\cppunit\\TestCase.cpp(33)\n    vclbootstrapprotector.dll!`anonymous namespace'::Protector::protect(const CppUnit::Functor & functor, const CppUnit::ProtectorContext &) Line 46\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\test\\source\\vclbootstrapprotector.cxx(46)\n    cppunitd_dll.dll!CppUnit::ProtectorChain::ProtectFunctor::operator()() Line 21\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\UnpackedTarball\\cppunit\\src\\cppunit\\ProtectorChain.cpp(21)\n    unobootstrapprotector.dll!`anonymous namespace'::Prot::protect(const CppUnit::Functor & functor, const CppUnit::ProtectorContext &) Line 78\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\unotest\\source\\cpp\\unobootstrapprotector\\unobootstrapprotector.cxx(78)\n    cppunitd_dll.dll!CppUnit::ProtectorChain::ProtectFunctor::operator()() Line 21\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\UnpackedTarball\\cppunit\\src\\cppunit\\ProtectorChain.cpp(21)\n    unoexceptionprotector.dll!`anonymous namespace'::Prot::protect(const CppUnit::Functor & functor, const CppUnit::ProtectorContext & context) Line 63\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\unotest\\source\\cpp\\unoexceptionprotector\\unoexceptionprotector.cxx(63)\n    cppunitd_dll.dll!CppUnit::ProtectorChain::ProtectFunctor::operator()() Line 21\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\UnpackedTarball\\cppunit\\src\\cppunit\\ProtectorChain.cpp(21)\n    cppunitd_dll.dll!CppUnit::DefaultProtector::protect(const CppUnit::Functor & functor, const CppUnit::ProtectorContext & context) Line 15\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\UnpackedTarball\\cppunit\\src\\cppunit\\DefaultProtector.cpp(15)\n    cppunitd_dll.dll!CppUnit::ProtectorChain::ProtectFunctor::operator()() Line 21\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\UnpackedTarball\\cppunit\\src\\cppunit\\ProtectorChain.cpp(21)\n    cppunitd_dll.dll!CppUnit::ProtectorChain::protect(const CppUnit::Functor & functor, const CppUnit::ProtectorContext & context) Line 86\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\UnpackedTarball\\cppunit\\src\\cppunit\\ProtectorChain.cpp(86)\n    cppunitd_dll.dll!CppUnit::TestResult::protect(const CppUnit::Functor & functor, CppUnit::Test * test, const std::string & shortDescription) Line 184\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\UnpackedTarball\\cppunit\\src\\cppunit\\TestResult.cpp(184)\n    cppunitd_dll.dll!CppUnit::TestCase::run(CppUnit::TestResult * result) Line 91\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\UnpackedTarball\\cppunit\\src\\cppunit\\TestCase.cpp(91)\n    cppunitd_dll.dll!CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult * controller) Line 65\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\UnpackedTarball\\cppunit\\src\\cppunit\\TestComposite.cpp(65)\n    cppunitd_dll.dll!CppUnit::TestComposite::run(CppUnit::TestResult * result) Line 24\n        at C:\\tools\\cygwin\\home\\michael\\development\\git\\libreoffice\\workdir\\UnpackedTarball\\cppunit\\src\\cppunit\\TestComposite.cpp(24)\n    cppunitd_dll.dll!CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult * controller) Line 65\n[...]\n\n```", "timestamp": "2023-01-27 18:33:02.000000000"}, {"message": "> As this method doesn't actually work on Windows and MacOS (see the numerous updates to the patchsets to try and understand, and then disable the tests there -- basically we never get WindowActivate on MacOS, and the dialogs don't seem to want to close on Windows), should this function raise an exception or perform a CppUnit assertion when called on one of those platforms? \n\nHow about having that in an `#ifdef` here as well so it will be clear at compile-time already that it's not meant to work on a specific platform (yet)?", "timestamp": "2023-01-28 08:56:59.000000000"}, {"message": "Thanks a lot for digging into this, and sharing your results!\n\n> Reason why dispose doesn't happen seems to be this: [\u2026]\n\nHum, isn't this a bug then?  I kinda read this as dialogs *never* actually closing on a Windows run, could that be right?\n\n> Moving closing the dialog to `waitEndDialog` (which gets called after `ProcessEventsToIdle` was called) just for a quick test actually made these tests pass for me on Windows (s. diff below).\n\nIf it's just a `ProcessEventsToIdle()` call, could it be possible to do that in the `WindowActivate` handler directly, after closing the dialog?  I guess not as IIUC it's still inside `StartExecute()`, but I still gave it a try on https://gerrit.libreoffice.org/c/core/+/146378\n\n> Now that might not necessarily be a good idea (didn't take a closer look yet). Reading the doc for `awaitDialog`: Would something like that e.g. break the `Dialog::Execute()` case, since control won't return to the test code otherwise and `waitEndDialog` never gets run?\n\nWell, as you don't call `Dialog::close()` at all from the `WindowActivate` handler, yes, at least on Linux that would mean that a test that did not actually properly close the dialog itself would never return.  You can test this by e.g. commenting-out the `dialog.postKeyEventAsync(0, awt::Key::RETURN)` near line 58 of sw/qa/extras/accessibility/dialogs.cxx, in `BasicTestSpeicalCharactersDialog`.\n\nCan't we call `Dialog::close()` in the event handler, and, for Windows's sake, in `waitEndDialog()` as well?  The `close()` in the event handler would end the `StartExecute()` (would it?), and maybe the one in `waitEndDialog()` could lead to actually disposing of the dialog?", "timestamp": "2023-01-31 10:13:24.000000000"}, {"message": "> How about having that in an `#ifdef` here as well so it will be clear at compile-time already that it's not meant to work on a specific platform (yet)?\n\nIndeed, that could be a good solution.  The only thing it would break is `SelfTestNoDialog` on those non-working platforms, but it's kind of an artificial test in this situation anyway.", "timestamp": "2023-01-31 10:15:02.000000000"}, {"message": "> If it's just a `ProcessEventsToIdle()` call, could it be possible to do that in the `WindowActivate` handler directly, after closing the dialog?  I guess not as IIUC it's still inside `StartExecute()`, but I still gave it a try on https://gerrit.libreoffice.org/c/core/+/146378\n\nOK, that was clearly a fool's errand, that failed just as expected.  Anyway, I replaced it by a version of your patch, which should at least show whether it's indeed working OK when the tests themselves are behaving.\n\nI'll then throw a bug into that (as mentioned) to see if it fails as it should, or if it gets stuck or whatnot.", "timestamp": "2023-01-31 10:33:55.000000000"}, {"message": "> Hum, isn't this a bug then?  I kinda read this as dialogs *never* actually closing on a Windows run, could that be right?\n\nI'm not exactly sure I get your question: IIUC, Dialogs do *close* (as written in my previous reply), but are not disposed (i.e. resources are not freed,...) for the discussed scenario of async dialogs run by this newly introduced test infrastructure.\nI assume it should be no problem for the \"normal\" use of LO, since the dialogs only get closed *after* the mentioned \"end function\" (that takes care of disposing) has been set. The problem is just there because the added WindowActivate event handler wants to close the dialog before `ImplStartExecute()` finishes and the handler is only set after that.\n\n> If it's just a ProcessEventsToIdle()  call, could it be possible to do that in the WindowActivate  handler directly, after closing the dialog?  I guess not as IIUC it's still inside StartExecute() , but I still gave it a try on https://gerrit.libreoffice.org/c/core/+/146378\n\nIndeed, the problem is that this is still inside `StartExecute()`.\nThe `ProcessEventsToIdle` call I was referring to is the one already present in `test::AccessibleTestBase::activateMenuItem`, not even the one added in my demo patch (which is only *after* the closing of the dialog, and potentially unnecessary after all.)\n\n\n> Well, as you don't call Dialog::close()  at all from the WindowActivate  handler, yes, at least on Linux that would mean that a test that did not actually properly close the dialog itself would never return.  You can test this by e.g. commenting-out the dialog.postKeyEventAsync(0, awt::Key::RETURN)  near line 58 of sw/qa/extras/accessibility/dialogs.cxx, in BasicTestSpeicalCharactersDialog .\n\nThanks, I can reproduce that here. (As a side not, it surprises me a bit how that `dialog.postKeyEventAsync(0, awt::Key::RETURN)` is related, given it doesn't close the dialog, but only simulate pressing the \"Insert\" button, but it does make a difference).\n\n> Can't we call Dialog::close()  in the event handler, and, for Windows's sake, in waitEndDialog()  as well?  The close()  in the event handler would end the StartExecute()  (would it?), and maybe the one in waitEndDialog()  could lead to actually disposing of the dialog?\n\nFrom what I can see in https://gerrit.libreoffice.org/c/core/+/146378 that seems to work.\n\n(I had previously thought about whether it would be possible to find some condition on whether to do it in either the one or the other place, e.g. sth like this\n\n         ::Dialog* pDialog = dynamic_cast<::Dialog*>(pWin);\n         assert(pDialog);\n         if(pDialog->IsInSyncExecute())\n             // ...", "timestamp": "2023-02-01 15:27:24.000000000"}, {"message": "> > Hum, isn't this a bug then?  I kinda read this as dialogs *never* actually closing on a Windows run, could that be right?\n> \n> I'm not exactly sure I get your question: IIUC, Dialogs do *close* (as written in my previous reply), but are not disposed (i.e. resources are not freed,...) for the discussed scenario of async dialogs run by this newly introduced test infrastructure.\n> I assume it should be no problem for the \"normal\" use of LO, since the dialogs only get closed *after* the mentioned \"end function\" (that takes care of disposing) has been set. The problem is just there because the added WindowActivate event handler wants to close the dialog before `ImplStartExecute()` finishes and the handler is only set after that.\n\nHum, OK yeah I forgot that was the asynchronous dialog code path, so that makes sense.\n\nWhat about moving the actual user code and dialog close to an idle handler?  You may or may not have to uncomment the `SetPriority()` call, not sure if that could help on Windows -- I see no difference here.\nThis works on on Linux (headless) -- on top of https://gerrit.libreoffice.org/c/core/+/146378/2:\n\n```\ndiff --git a/test/source/a11y/accessibletestbase.cxx b/test/source/a11y/accessibletestbase.cxx\nindex 144924899041..22ce68a14f03 100644\n--- a/test/source/a11y/accessibletestbase.cxx\n+++ b/test/source/a11y/accessibletestbase.cxx\n@@ -27,6 +27,7 @@\n #include <com/sun/star/uno/RuntimeException.hpp>\n #include <com/sun/star/util/XCloseable.hpp>\n \n+#include <vcl/idle.hxx>\n #include <vcl/scheduler.hxx>\n #include <vcl/svapp.hxx>\n #include <vcl/window.hxx>\n@@ -392,6 +393,7 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n         std::function<void(Dialog&)> mCallback;\n         bool mbAutoClose;\n         Timer maTimeoutTimer;\n+        Idle maIdleHandler;\n \n         std::unique_ptr<Dialog> mxDialog;\n \n@@ -400,6 +402,9 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n         {\n             Application::SetDialogCancelMode(miPreviousDialogCancelMode);\n             Application::RemoveEventListener(mLink);\n+            maTimeoutTimer.Stop();  // this actually should have been done in another patch, will move it there\n+            maIdleHandler.Stop();\n+            mxDialog.reset();  // so does this\n         }\n \n         ListenerHelper(const std::u16string_view& name, std::function<void(Dialog&)> callback,\n@@ -409,6 +414,7 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n             , mCallback(callback)\n             , mbAutoClose(bAutoClose)\n             , maTimeoutTimer(\"workaround timer if we don't catch WindowActivate\")\n+            , maIdleHandler(\"runs user callback in idle time\")\n         {\n             mLink = LINK(this, ListenerHelper, eventListener);\n             Application::AddEventListener(mLink);\n@@ -417,6 +423,10 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n             maTimeoutTimer.SetTimeout(60000);\n             maTimeoutTimer.Start();\n \n+            maIdleHandler.SetInvokeHandler(LINK(this, ListenerHelper, idleHandler));\n+            // may or may not be needed?\n+            //maIdleHandler.SetPriority(TaskPriority::DEFAULT_IDLE);\n+\n             miPreviousDialogCancelMode = Application::GetDialogCancelMode();\n             Application::SetDialogCancelMode(DialogCancelMode::Off);\n         }\n@@ -458,6 +468,19 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n             if (!pWin->IsDialog())\n                 return;\n \n+            mxDialog = std::make_unique<Dialog>(pWin, true);\n+\n+            maIdleHandler.Start();\n+        }\n+\n+        // mimic IMPL_LINK inline\n+        static void LinkStubidleHandler(void* instance, Timer* idle)\n+        {\n+            static_cast<ListenerHelper*>(instance)->idleHandler(idle);\n+        }\n+\n+        void idleHandler(Timer*)\n+        {\n             mbWaitingForDialog = false;\n \n             // remove ourselves, we don't want to run again\n@@ -465,18 +488,14 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n             maTimeoutTimer.ClearInvokeHandler();\n             maTimeoutTimer.Stop();\n \n-            /* bind the dialog before checking its name so auto-close can kick in if the anything\n-             * fails/throws */\n-            mxDialog = std::make_unique<Dialog>(pWin, true);\n-\n             /* The poping up dialog ought to be the right one, or something's fishy and\n              * we're bound to failure (e.g. waiting on a dialog that either will never come, or\n              * that will not run after the current one -- deadlock style) */\n-            if (msName != pWin->GetText())\n+            if (msName != mxDialog->getWindow()->GetText())\n             {\n                 mpException = std::make_exception_ptr(css::uno::RuntimeException(\n-                    \"Unexpected dialog '\" + pWin->GetText() + \"' opened instead of the expected '\"\n-                    + msName + \"'\"));\n+                    \"Unexpected dialog '\" + mxDialog->getWindow()->GetText()\n+                    + \"' opened instead of the expected '\" + msName + \"'\"));\n             }\n             else\n             {\n@@ -493,10 +512,9 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n                 {\n                     mpException = std::current_exception();\n                 }\n-\n-                if (mbAutoClose)\n-                    mxDialog->close();\n             }\n+\n+            mxDialog.reset();\n         }\n \n     public:\n@@ -516,9 +534,6 @@ test::AccessibleTestBase::awaitDialog(const std::u16string_view name,\n                 } while (mbWaitingForDialog && aTimer.IsActive());\n             }\n \n-            mxDialog.reset(); // closes the dialog, too\n-            Scheduler::ProcessEventsToIdle(); // may or may not be needed\n-\n             if (mpException)\n                 std::rethrow_exception(mpException);\n \n```\n\n> Thanks, I can reproduce that here. (As a side not, it surprises me a bit how that `dialog.postKeyEventAsync(0, awt::Key::RETURN)` is related, given it doesn't close the dialog, but only simulate pressing the \"Insert\" button, but it does make a difference).\n\nWell, the press on the Insert button in this dialog is supposed to insert + close the dialog, and that's what I've seen it do. (the point of most of these tests is to act like a user, so \"clicking on the button\" is a more realistic interaction than calling some close method \ud83d\ude0a)", "timestamp": "2023-02-01 18:21:32.000000000"}, {"message": "> What about moving the actual user code and dialog close to an idle handler?\n\nAlthough Jenkins seems in a bad mood today, https://ci.libreoffice.org/job/gerrit_windows/146400/consoleFull#551126502d893063f-7f3d-4b7e-b56f-4e0f225817cd suggests that it does work, at least in CI environment \ud83d\ude0a  Waiting on the non-failing case to verify though.", "timestamp": "2023-02-02 16:12:34.000000000"}, {"message": "> What about moving the actual user code and dialog close to an idle handler?\n\nUsing an idle handler sounds reasonable to me if that works.\n\n> Well, the press on the Insert button in this dialog is supposed to insert + close the dialog, and that's what I've seen it do. (the point of most of these tests is to act like a user, so \"clicking on the button\" is a more realistic interaction than calling some close method \ud83d\ude0a)\n\nIndeed, it behaves like that for me now as well. \ud83d\ude0a I thought I had tested manually and pressing \"Insert\" would insert the special character, but leave the dialog open, but it doesn't, so I probably misremembered or confused two different dialogs...", "timestamp": "2023-02-22 16:33:51.000000000"}, {"message": "> Using an idle handler sounds reasonable to me if that works.\n\nWould you like me to squash https://gerrit.libreoffice.org/c/core/+/146378 in this one, or are you happy about the separate patch?", "timestamp": "2023-02-23 15:17:29.000000000"}, {"message": "For macos I just created https://gerrit.libreoffice.org/c/core/+/147574 which `#ifdef`s it out for now.  I can also fold this into this patch if you'd like.", "timestamp": "2023-02-23 15:39:33.000000000"}, {"message": "Having these as separate patches is fine.", "timestamp": "2023-02-24 09:35:58.000000000"}]}
{"thread_id": "d2f6e1b5_40183389", "url": "https://gerrit.libreoffice.org/#/c/core/+/142258/15/test/source/a11y/accessibletestbase.cxx@244", "comments": [{"message": "Is there a use case which involves creating a Dialog with `pWindow = nullptr`?", "timestamp": "2023-02-22 16:27:59.000000000"}, {"message": "Not anymore, indeed.", "timestamp": "2023-02-23 15:17:29.000000000"}]}
{"thread_id": "f8aabdef_e96b44e5", "url": "https://gerrit.libreoffice.org/#/c/core/+/147957/2/sw/qa/extras/uiwriter/uiwriter3.cxx@2004", "comments": [{"message": "This still occasionally fails, see e.g. <https://ci.libreoffice.org//job/lo_tb_master_linux_dbg/42027/>,\n\n  [_RUN_____] testTdf107975::TestBody\n  tdf107975.odt:\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/sw/qa/extras/uiwriter/uiwriter3.cxx:2004:testTdf107975::TestBody\n  equality assertion failed\n  - Expected: 2\n  - Actual  : 1", "timestamp": "2023-02-28 22:23:48.000000000"}]}
{"thread_id": "75ace145_5ec8bc40", "url": "https://gerrit.libreoffice.org/#/c/core/+/147939/1/sw/source/core/text/txtfld.cxx@440", "comments": [{"message": "6.4.7.", "timestamp": "2023-02-28 02:28:44.000000000"}]}
{"thread_id": "b602b01a_1cd1aaad", "url": "https://gerrit.libreoffice.org/#/c/core/+/147939/1/sw/source/core/text/txtfld.cxx@447", "comments": [{"message": "an assert(false) in here passed a complete make check for me today.", "timestamp": "2023-02-28 02:28:44.000000000"}]}
{"thread_id": "d0df6828_602091b0", "url": "https://gerrit.libreoffice.org/#/c/core/+/147939/2/sw/source/core/text/txtfld.cxx@436", "comments": [{"message": "Whoever added this was an idiot (and it was me). RTF is included in this - ever since 2012. This is not \"isDOC\", this is \"isMSFormatButNotDOCXcompat15\"", "timestamp": "2023-02-28 13:23:54.000000000"}]}
{"thread_id": "be28d794_92cbd8a2", "url": "https://gerrit.libreoffice.org/#/c/core/+/147408/7/sd/qa/unit/PNGExportTests.cxx@491", "comments": [{"message": "Hmm, exporting to PNG is a rather poor way to test this. Did you consider trying to export this a little higher level? Something like export to drawinglayer primitives or PDF or SVG export.\n\nFor drawinglayer primitives, see e.g. testSemiTransparentText in svx/qa/unit/svdraw.cxx, for pdf see e.g. testWatermarkColor, for svg see e.g. testSemiTransparentMultiParaText.\n\nBest would be the drawinglayer primitives if that works, that's the closest to actual rendering.", "timestamp": "2023-02-24 07:33:03.000000000"}, {"message": "Implementing the test using GDIMetafile was way simpler than using drawinglayer primitives. (thanks to SdLayoutTest - which I didn't realize was there before)\nSo I went with that.\n\nWould that be sufficient? Or is it still more robust to go with the drawing layer primitives?", "timestamp": "2023-02-24 18:52:03.000000000"}, {"message": "I think GDIMetafile is good enough for this purpose. drawinglayer primitives tend to be a bit higher level, but I would say it's cosmetics at this point for this change. The point is to avoid pixel-assert. :-)", "timestamp": "2023-02-28 11:30:50.000000000"}]}
{"thread_id": "e6a3ec05_bef7a382", "url": "https://gerrit.libreoffice.org/#/c/core/+/147874/1/vcl/source/filter/svm/SvmReader.cxx@113", "comments": [{"message": "Given where readSize() is used, a utilty method like readPositiveSize\nthat incorporates this sanity checking seems like a really good idea.\nIf you don't feel like doing it, I'll add it to my list.", "timestamp": "2023-02-27 09:57:45.000000000"}, {"message": "I don't plan any follow ups.", "timestamp": "2023-02-27 11:00:51.000000000"}]}
{"thread_id": "91c3984d_fea11165", "url": "https://gerrit.libreoffice.org/#/c/core/+/147490/4/sw/source/core/text/txtfrm.cxx@2030", "comments": [{"message": "broadcasting an empty hint?", "timestamp": "2023-02-23 12:52:11.000000000"}, {"message": "Well, that is what the code did before (in txtfrm.cxx:2089). Im not sure if it is needed in this case (likely not?), but without knowing for sure nothing depends on it, I didnt want to change it (yet).", "timestamp": "2023-02-24 07:52:44.000000000"}]}
{"thread_id": "d1950d4d_55f432d8", "url": "https://gerrit.libreoffice.org/#/c/core/+/147490/5/sw/source/core/txtnode/atrfld.cxx@b427", "comments": [{"message": "this looks unrelated?", "timestamp": "2023-02-24 09:24:21.000000000"}, {"message": "Before this, SwFormatField::UpdateTextNode did:\na/ in case of RES_ATTRSET_CHG and RES_FMT_CHG call the node with the same items (a somewhat sane thing to do)\nb/ in case of RES_REFMARKFLD_UPDATE and all other cases with pOld as nullptr, but with the same pNew as it got itself\nc/ in case of RES_DOCPOS_UPDATE it called the node with pOld = incoming pNew and pNew = this (which is certifiably insane)\n\nThe case c/ is now removed, and that removes the need to rotate around the items forwarded:\na/ will just forward what came in\nb/ will just make pOld a nullptr (that does not seem to be too intentional: likely using both pOld and pNew would work here too -- removing that special case might be done in a follow-up)\n\nSo, with c/ gone, pNodeOld and pNodeNew can go too, reducing the old mess at least a bit.", "timestamp": "2023-02-24 22:08:45.000000000"}]}
{"thread_id": "f71ca72c_4c895476", "url": "https://gerrit.libreoffice.org/#/c/core/+/147157/4/sfx2/source/view/viewsh.cxx@1419", "comments": [{"message": "Could you please undo this cosmetic change? You just joined the 2 lines for no reason. With that, it's easier to see that you didn't change behavior in the non-LOK case (which is good).", "timestamp": "2023-02-21 13:47:05.000000000"}, {"message": "Done", "timestamp": "2023-02-22 07:17:53.000000000"}]}
{"thread_id": "e6e5db37_61431cb0", "url": "https://gerrit.libreoffice.org/#/c/core/+/147157/8/svtools/source/misc/acceleratorexecute.cxx@423", "comments": [{"message": "On Ubuntu 20.04 / gcc 9.4.0 I get a compile error b/c there is no return if there is an exception.", "timestamp": "2023-02-24 16:17:37.000000000"}, {"message": "there is a different pr for the fix.", "timestamp": "2023-02-25 07:56:11.000000000"}]}
{"thread_id": "46977953_b3acaf99", "url": "https://gerrit.libreoffice.org/#/c/core/+/147586/4/sd/source/core/stlsheet.cxx@322", "comments": [{"message": "Why there is a need to take event listeners here into account? The old code used just the modify listeners container, and AFAIK this stuff only expects TableDesignStyle (svx/source/table/tabledesign.cxx), which only ever sets itself as a modify listener.", "timestamp": "2023-02-24 10:33:48.000000000"}, {"message": "Doh! Good spotting, thanks!", "timestamp": "2023-02-24 11:43:22.000000000"}]}
{"thread_id": "c62f3d63_4fc00ce0", "url": "https://gerrit.libreoffice.org/#/c/core/+/147586/4/sd/source/core/stlsheet.cxx@356", "comments": [{"message": "Same here.", "timestamp": "2023-02-24 10:33:48.000000000"}, {"message": "done.", "timestamp": "2023-02-24 11:43:22.000000000"}]}
{"thread_id": "85cf7c66_84ab83a7", "url": "https://gerrit.libreoffice.org/#/c/core/+/90213/2/sw/qa/extras/uiwriter/uiwriter3.cxx@269", "comments": [{"message": "seen failing at <https://ci.libreoffice.org/job/lo_tb_master_linux_dbg/41921/> with\n\n  [_RUN_____] testTdf107975::TestBody\n  tdf107975.odt:\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/sw/qa/extras/uiwriter/uiwriter3.cxx:2090:testTdf107975::TestBody\n  equality assertion failed\n  - Expected: 2\n  - Actual  : 1", "timestamp": "2023-02-22 12:09:22.000000000"}, {"message": "According to https://gerrit.libreoffice.org/q/sw_uiwriter3 it seems it started to happen around February 22-23, before that, the failures in sw_uiwriter3 don't seem to be in the same test", "timestamp": "2023-02-24 15:25:36.000000000"}]}
{"thread_id": "39a13baa_3f9d11d3", "url": "https://gerrit.libreoffice.org/#/c/core/+/147220/2/idl/inc/hash.hxx@b43", "comments": [{"message": "Please mention in the commit message that the `SetValue()` and `GetValue` functions are used in `idl/source/prj/database.cxx` with `sal_uInt32` parameter and return type and thus, `sal_uInt32` is suitable here.", "timestamp": "2023-02-20 08:08:11.000000000"}, {"message": "Done", "timestamp": "2023-02-20 13:12:35.000000000"}]}
{"thread_id": "6e898c99_3423be72", "url": "https://gerrit.libreoffice.org/#/c/core/+/146778/4/vcl/source/app/help.cxx@b422", "comments": [{"message": "Please forget the change to this file at the moment. Currently it is enough that you understand the change, and do a single instance.", "timestamp": "2023-02-19 21:38:05.000000000"}, {"message": "Done", "timestamp": "2023-02-20 09:31:11.000000000"}]}
{"thread_id": "a01604a9_67beef6e", "url": "https://gerrit.libreoffice.org/#/c/core/+/146778/4/vcl/source/app/settings.cxx@2277", "comments": [{"message": "Aha, now I see you made some changes here, but I meant to possibly get rid of static_casts altogether. Now you are even static_casting to the same type...", "timestamp": "2023-02-15 18:52:38.000000000"}, {"message": "do i use double and round the result to the nearest integer?", "timestamp": "2023-02-15 19:08:49.000000000"}, {"message": "Oh, you have a point regarding line 2283, best to not touch it.", "timestamp": "2023-02-15 19:28:48.000000000"}, {"message": "ready for merge?", "timestamp": "2023-02-17 12:30:11.000000000"}, {"message": "Let's see what Hossein thinks (I would have suggested to skip the static_casts from line 2080-2282 still).", "timestamp": "2023-02-17 12:37:24.000000000"}, {"message": "@Ilmari:\nYou're right. The `static_cast`s are redundant, as the `GetRed()`, `GetGreen()` and `GetBlue()` member functions return `sal_uInt8`.\n\n@Yashodhan:\nPlease remove the redundant `static_cast`s from lines 2080-2083 as per above discussion.\n\nAlso, storing `(mxData->maLightColor.GetRed() + mxData->maShadowColor.GetRed()) / 2` in `nRed`, and the same for `nGreen` and `nBlue` is better as it is more readable and obvious. After that, you will be able to use `mxData->maCheckedColor = Color( nRed, nGreen, nBlue);`\n\nPlease do these changes.", "timestamp": "2023-02-19 21:38:05.000000000"}, {"message": "Done", "timestamp": "2023-02-20 09:25:14.000000000"}]}
{"thread_id": "f7670da9_80864a00", "url": "https://gerrit.libreoffice.org/#/c/core/+/146778/5/vcl/source/app/settings.cxx@2277", "comments": [{"message": "You should merge lines 2277, 2280 and 2283 in one line. Please do this for `nRed` and others.\n\nAlso, mark the comments that you have addressed as 'Resolved'. You can do that by clicking on 'DONE' button, and then sending the comment.", "timestamp": "2023-02-20 09:17:52.000000000"}, {"message": "Done", "timestamp": "2023-02-20 09:29:27.000000000"}]}
{"thread_id": "fa968abe_73bb7b6f", "url": "https://gerrit.libreoffice.org/#/c/core/+/146778/6/vcl/source/app/settings.cxx@2281", "comments": [{"message": "Please remove this extra blank line.", "timestamp": "2023-02-20 09:31:55.000000000"}, {"message": "Done", "timestamp": "2023-02-20 09:35:00.000000000"}]}
{"thread_id": "52c45cdf_62f1eebf", "url": "https://gerrit.libreoffice.org/#/c/core/+/146643/2/editeng/source/items/frmitems.cxx@468", "comments": [{"message": "got a hit here with crashtesting:\n\nwget https://bugs.documentfoundation.org/attachment.cgi?id=53355 -O ~/tdf42762-1.doc\n./instdir/program/soffice --headless --convert-to pdf ~/tdf42762-1.doc", "timestamp": "2023-02-16 19:38:36.000000000"}, {"message": "i'm hoping this is fixed with https://gerrit.libreoffice.org/c/core/+/147024 and there will only be 3 dozen new problems", "timestamp": "2023-02-24 09:46:42.000000000"}]}
{"thread_id": "7413489f_9e463c9a", "url": "https://gerrit.libreoffice.org/#/c/core/+/147432/1/desktop/source/lib/init.cxx@4008", "comments": [{"message": "Not convinced that this API adds huge value really =)\n\nFrom an API perspective - ideally we'd pass in a link and get a thumbnail back of that linked thing - and the position and size calculation would be done transparently by the core.\n\nI imagine this is just a prototype version of that - but could be done via the existing paintTile thing without adding an API method in its current state =)", "timestamp": "2023-02-22 09:51:31.000000000"}, {"message": "Ack", "timestamp": "2023-02-24 07:59:41.000000000"}]}
{"thread_id": "406ab559_c9c3b127", "url": "https://gerrit.libreoffice.org/#/c/core/+/147287/1/sc/source/core/tool/interpr1.cxx@6502", "comments": [{"message": "Looks odd that we're looping over everything and just calculate if this constant condition is hit (instead of not looping at all if it wasn't at the beginning), but that's probably due to how implementation evolved and for another investigation.. preventing a crash looks good.", "timestamp": "2023-02-23 19:29:08.000000000"}, {"message": "Bah I'm dumb and overlooked ++itRes ...", "timestamp": "2023-02-23 20:04:20.000000000"}]}
{"thread_id": "9b055a4c_ff68fc8a", "url": "https://gerrit.libreoffice.org/#/c/core/+/147515/2/sw/qa/extras/tiledrendering/tiledrendering.cxx@b1823", "comments": [{"message": "Maybe keep this comment in selectShape(), otherwise it's hard to understand what is the purpose of the StopShellTimer() call?", "timestamp": "2023-02-23 14:34:58.000000000"}, {"message": "Done", "timestamp": "2023-02-23 14:48:42.000000000"}]}
{"thread_id": "cd2c4676_95de7b94", "url": "https://gerrit.libreoffice.org/#/c/core/+/130922/4/oox/source/shape/WpsContext.cxx@160", "comments": [{"message": "Whenever you use UNO_QUERY, you *must* check the result. The UNO_QUERY means \"I know that the object *might* implement this interface; and I query for it, expecting the possible failure for those objects that happen to *not* implement it. I will only use the result when I checked that it succeeded\".\n\nIf you are sure that the object *must* implement the interface, and that failing this is a programmer's error, you must use UNO_QUERY_THROW. Then you can be sure that following unconditional dereference will be performed on a non-null reference.\n\nSame in other places in this change.", "timestamp": "2023-02-23 11:09:03.000000000"}]}
{"thread_id": "1a00a85c_19e8301a", "url": "https://gerrit.libreoffice.org/#/c/core/+/146448/2/sw/qa/uitest/writer_tests6/edit_file_properties_before_saving.py@92", "comments": [{"message": "This occasionally fails now with\n\n  ======================================================================\n  ERROR: test_tdf119206 (edit_file_properties_before_saving.edit_file_properties_before_saving)\n  ----------------------------------------------------------------------\n  Traceback (most recent call last):\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/sw/qa/uitest/writer_tests6/edit_file_properties_before_saving.py\", line 92, in test_tdf119206\n      self.assertEqual(\"true\", get_state_as_dict(xReadOnly)['Selected'])\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/python-core-3.8.16/lib/contextlib.py\", line 120, in __exit__\n      next(self.gen)\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/uitest/uitest/test.py\", line 187, in create_doc_in_start_center\n      self.close_doc()\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/uitest/uitest/test.py\", line 210, in close_doc\n      component.dispose()\n  uitest.test.com.sun.star.lang.DisposedException: at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/sfx2/source/doc/sfxbasemodel.cxx:2991\n\nsee e.g. <https://ci.libreoffice.org/job/lo_tb_master_linux_dbg/41920/> and <https://ci.libreoffice.org/job/lo_tb_master_linux_dbg/41921/>.", "timestamp": "2023-02-22 12:03:22.000000000"}]}
{"thread_id": "d460bfd5_f646f99b", "url": "https://gerrit.libreoffice.org/#/c/core/+/146448/2/sw/qa/uitest/writer_tests6/edit_file_properties_before_saving.py@94", "comments": [{"message": "At <https://ci.libreoffice.org//job/lo_tb_master_linux_dbg/41847/> this now hangs with the invoked `soffice.bin` UNO thread at\n\n  #4  0x00007f79293f0460 in osl::Condition::wait(TimeValue const*) (this=0x7f79288e7bb0, pTimeout=0x0) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/include/osl/conditn.hxx:123\n  #5  0x00007f79293e37de in UUIInteractionHelper::handleRequest(com::sun::star::uno::Reference<com::sun::star::task::XInteractionRequest> const&) (this=0x6615ce8, rRequest=uno::Reference to (ucbhelper::SimpleIOErrorRequest *) 0x66dd5b8) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/uui/source/iahndl.cxx:160\n  #6  0x00007f7929418c3d in (anonymous namespace)::UUIInteractionHandler::handle(com::sun::star::uno::Reference<com::sun::star::task::XInteractionRequest> const&) (this=0x6615ca0, rRequest=uno::Reference to (ucbhelper::SimpleIOErrorRequest *) 0x66dd5b8) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/uui/source/interactionhandler.cxx:194\n  #7  0x00007f7943ef3c7d in ucbhelper::InterceptedInteraction::impl_handleDefault(com::sun::star::uno::Reference<com::sun::star::task::XInteractionRequest> const&) (this=0x66192c0, xRequest=uno::Reference to (ucbhelper::SimpleIOErrorRequest *) 0x66dd5b8) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/interceptedinteraction.cxx:78\n  #8  0x00007f7943ef3c01 in ucbhelper::InterceptedInteraction::handle(com::sun::star::uno::Reference<com::sun::star::task::XInteractionRequest> const&) (this=0x66192c0, xRequest=uno::Reference to (ucbhelper::SimpleIOErrorRequest *) 0x66dd5b8) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/interceptedinteraction.cxx:64\n  #9  0x00007f7943f05584 in ucbhelper::cancelCommandExecution(com::sun::star::ucb::IOErrorCode, com::sun::star::uno::Sequence<com::sun::star::uno::Any> const&, com::sun::star::uno::Reference<com::sun::star::ucb::XCommandEnvironment> const&, rtl::OUString const&, com::sun::star::uno::Reference<com::sun::star::ucb::XCommandProcessor> const&) (eError=com::sun::star::ucb::IOErrorCode_NOT_EXISTING, rArgs=uno::Sequence of length 2 = {...}, xEnv=uno::Reference to (ucbhelper::CommandEnvironment *) 0x6619298, rMessage=\"an error occurred during file opening\", xContext=uno::Reference to (fileaccess::BaseContent *) 0x6615228) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/provider/cancelcommandexecution.cxx:100\n  #10 0x00007f7929d76dad in fileaccess::throw_handler(int, int, com::sun::star::uno::Reference<com::sun::star::ucb::XCommandEnvironment> const&, rtl::OUString const&, fileaccess::BaseContent*, bool) (errorCode=12, minorCode=2, xEnv=uno::Reference to (ucbhelper::CommandEnvironment *) 0x6619298, aUncPath=\"file:///home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/tempdir/tmpinfzp3yb/tdf119206-temp.odt\", pContent=0x66151f0, isHandled=false) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucb/source/ucp/file/filglob.cxx:364\n  #11 0x00007f7929da3a8a in fileaccess::TaskManager::endTask(int, rtl::OUString const&, fileaccess::BaseContent*) (this=0x243dc20, CommandId=451, aUncPath=\"file:///home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/tempdir/tmpinfzp3yb/tdf119206-temp.odt\", pContent=0x66151f0) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucb/source/ucp/file/filtask.cxx:403\n  #12 0x00007f7929d4a0a7 in fileaccess::BaseContent::endTask(int) (this=0x66151f0, CommandId=451) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucb/source/ucp/file/bc.cxx:1083\n  #13 0x00007f7929d46245 in fileaccess::BaseContent::execute(com::sun::star::ucb::Command const&, int, com::sun::star::uno::Reference<com::sun::star::ucb::XCommandEnvironment> const&) (this=0x66151f0, aCommand=..., CommandId=451, Environment=uno::Reference to (ucbhelper::CommandEnvironment *) 0x6619298) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucb/source/ucp/file/bc.cxx:331\n  #14 0x00007f7943ee818c in ucbhelper::Content_Impl::executeCommand(com::sun::star::ucb::Command const&) (this=0x66c6110, rCommand=...) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/content.cxx:1264\n  #15 0x00007f7943ee46d4 in ucbhelper::Content::getPropertyValuesInterface(com::sun::star::uno::Sequence<rtl::OUString> const&) (this=0x7f79288e8610, rPropertyNames=uno::Sequence of length 1 = {...}) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/content.cxx:500\n  #16 0x00007f7943ee4435 in ucbhelper::Content::getPropertyValues(com::sun::star::uno::Sequence<rtl::OUString> const&) (this=0x7f79288e8610, rPropertyNames=uno::Sequence of length 1 = {...}) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/content.cxx:458\n  #17 0x00007f7943ee41c7 in ucbhelper::Content::getPropertyValue(rtl::OUString const&) (this=0x7f79288e8610, rPropertyName=\"IsDocument\") at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/content.cxx:437\n  #18 0x00007f7943ee7163 in ucbhelper::Content::isDocument() (this=0x7f79288e8610) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/content.cxx:1028\n  #19 0x00007f7943ee5544 in ucbhelper::Content::openStream() (this=0x7f79288e8610) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/content.cxx:693\n  #20 0x00007f7943cc0d28 in utl::MediaDescriptor::impl_openStreamWithURL(rtl::OUString const&, bool) (this=0x7f79288e9020, sURL=\"file:///home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/tempdir/tmpinfzp3yb/tdf119206-temp.odt\", bLockFile=true) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/unotools/source/misc/mediadescriptor.cxx:468\n  #21 0x00007f7943cbf766 in utl::MediaDescriptor::impl_addInputStream(bool) (this=0x7f79288e9020, bLockFile=true) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/unotools/source/misc/mediadescriptor.cxx:259\n  #22 0x00007f7943cbf396 in utl::MediaDescriptor::addInputStreamOwnLock() (this=0x7f79288e9020) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/unotools/source/misc/mediadescriptor.cxx:228\n  #23 0x00007f79258c261f in filter::config::TypeDetection::impl_openStream(utl::MediaDescriptor&) (this=0x6837590, rDescriptor=...) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/filter/source/config/cache/typedetection.cxx:1115\n  #24 0x00007f79258c1e1b in filter::config::TypeDetection::impl_askDetectService(rtl::OUString const&, utl::MediaDescriptor&) (this=0x6837590, sDetectService=\"com.sun.star.comp.filters.StorageFilterDetect\", rDescriptor=...) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/filter/source/config/cache/typedetection.cxx:968\n  #25 0x00007f79258c19e8 in filter::config::TypeDetection::impl_detectTypeFlatAndDeep(utl::MediaDescriptor&, std::__debug::vector<filter::config::FlatDetectionInfo, std::allocator<filter::config::FlatDetectionInfo> > const&, bool, rtl::OUString&) (this=0x6837590, rDescriptor=..., lFlatTypes=std::__debug::vector of length 176, capacity 256 = {...}, bAllowDeep=true, rLastChance=\"\") at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/filter/source/config/cache/typedetection.cxx:921\n  #26 0x00007f79258be711 in filter::config::TypeDetection::queryTypeByDescriptor(com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue>&, unsigned char) (this=0x6837590, lDescriptor=uno::Sequence of length 5 = {...}, bAllowDeep=1 '\\001') at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/filter/source/config/cache/typedetection.cxx:428\n  #27 0x00007f7948ab376f in framework::LoadEnv::impl_detectTypeAndFilter() (this=0x7f79288e9690) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/framework/source/loadenv/loadenv.cxx:765\n  #28 0x00007f7948ab1aaf in framework::LoadEnv::start() (this=0x7f79288e9690) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/framework/source/loadenv/loadenv.cxx:386\n  #29 0x00007f7948ab10ec in framework::LoadEnv::startLoading(rtl::OUString const&, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&, com::sun::star::uno::Reference<com::sun::star::frame::XFrame> const&, rtl::OUString const&, int, LoadEnvFeatures) (this=0x7f79288e9690, sURL=\"file:///home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/tempdir/tmpinfzp3yb/tdf119206-temp.odt\", lMediaDescriptor=empty uno::Sequence, xBaseFrame=uno::Reference to (framework::Desktop *) 0x2417738, sTarget=\"_default\", nSearchFlags=0, eFeature=WorkWithUI) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/framework/source/loadenv/loadenv.cxx:308\n  #30 0x00007f7948aafc24 in framework::LoadEnv::loadComponentFromURL(com::sun::star::uno::Reference<com::sun::star::frame::XComponentLoader> const&, com::sun::star::uno::Reference<com::sun::star::uno::XComponentContext> const&, rtl::OUString const&, rtl::OUString const&, int, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&) (xLoader=uno::Reference to (framework::Desktop *) 0x2417748, xContext=warning: RTTI symbol not found for class 'cppu::(anonymous namespace)::ComponentContext'\n  warning: RTTI symbol not found for class 'cppu::(anonymous namespace)::ComponentContext'\n  uno::Reference to (com::sun::star::uno::XInterface *) 0x151aa60, sURL=\"file:///home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/tempdir/tmpinfzp3yb/tdf119206-temp.odt\", sTarget=\"_default\", nSearchFlags=0, lArgs=empty uno::Sequence) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/framework/source/loadenv/loadenv.cxx:168\n  #31 0x00007f7948ad81ee in framework::Desktop::loadComponentFromURL(rtl::OUString const&, rtl::OUString const&, int, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&) (this=0x24176d0, sURL=\"file:///home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/tempdir/tmpinfzp3yb/tdf119206-temp.odt\", sTargetFrameName=\"_default\", nSearchFlags=0, lArguments=empty uno::Sequence) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/framework/source/services/desktop.cxx:595\n  #32 0x00007f79331e6b73 in gcc3::callVirtualMethod(void*, unsigned int, void*, _typelib_TypeDescriptionReference*, bool, unsigned long*, unsigned int, unsigned long*, double*) (pThis=0x2417748, nVtableIndex=3, pRegisterReturn=0x7f79288e9c90, pReturnTypeRef=0x1649130, bSimpleReturn=false, pStack=0x7f79288e9cb0, nStack=0, pGPR=0x7f79288e9e40, pFPR=0x7f79288e9e70) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/bridges/source/cpp_uno/gcc3_linux_x86-64/callvirtualmethod.cxx:133\n  #33 0x00007f79331e570d in cpp_call(bridges::cpp_uno::shared::UnoInterfaceProxy*, bridges::cpp_uno::shared::VtableSlot, typelib_TypeDescriptionReference*, sal_Int32, typelib_MethodParameter*, void*, void**, uno_Any**) (pThis=0x60eb9a0, aVtableSlot=..., pReturnTypeRef=0x1649130, nParams=4, pParams=0x65f9fb0, pUnoReturn=0x6837040, pUnoArgs=0x66fa7d0, ppUnoExc=0x7f79288e9fe0) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/bridges/source/cpp_uno/gcc3_linux_x86-64/uno2cpp.cxx:233\n\n(and the main thread thus blocked displaying the `UUIInteractionHandler` error dialog)", "timestamp": "2023-02-20 09:07:17.000000000"}]}
{"thread_id": "73d03626_1d7468f7", "url": "https://gerrit.libreoffice.org/#/c/core/+/147118/1/sw/source/uibase/shells/textsh1.cxx@646", "comments": [{"message": "this is actually rWrtSh :)", "timestamp": "2023-02-17 10:07:39.000000000"}]}
{"thread_id": "b9a58882_554769a4", "url": "https://gerrit.libreoffice.org/#/c/core/+/145522/2/sw/qa/uitest/sidebar/tdf152921.py@21", "comments": [{"message": "Hi Jim,\nis it really necesary ?\nAs the comment says, in a clean run, it's already open, and if it's not open because of another test, the other test should be fixed instead.", "timestamp": "2023-02-15 08:27:43.000000000"}, {"message": "Done", "timestamp": "2023-02-18 16:04:15.000000000"}]}
{"thread_id": "7ae537a8_88c7036a", "url": "https://gerrit.libreoffice.org/#/c/core/+/147377/3/configmgr/source/configurationprovider.cxx@333", "comments": [{"message": "Are you sure that this change is sound?  In the past, Components:getSingleton was called with the global lock_, but now it is called with the Service-local m_aMutex?  (And temporarily dropping rGuard in the middle of the function here looks like it's broken by design?)", "timestamp": "2023-02-21 09:46:19.000000000"}, {"message": "fix here: https://gerrit.libreoffice.org/c/core/+/147392", "timestamp": "2023-02-21 11:58:44.000000000"}]}
{"thread_id": "afd8303c_1e8bd871", "url": "https://gerrit.libreoffice.org/#/c/core/+/147134/2/sw/source/core/layout/atrfrm.cxx@3207", "comments": [{"message": "i find this misleading - these have a name, a title (aka alt-text), and a description, so why send NameChanged if the title changes?", "timestamp": "2023-02-17 10:16:19.000000000"}, {"message": "Done", "timestamp": "2023-02-19 18:28:37.000000000"}]}
{"thread_id": "37a91bec_72ceb624", "url": "https://gerrit.libreoffice.org/#/c/core/+/147134/5/sw/source/core/layout/atrfrm.cxx@2601", "comments": [{"message": "but this one is actually the name, no?", "timestamp": "2023-02-20 11:15:46.000000000"}, {"message": "Done", "timestamp": "2023-02-21 11:35:51.000000000"}]}
{"thread_id": "a78bdba3_dd110e46", "url": "https://gerrit.libreoffice.org/#/c/core/+/144788/1/vbahelper/source/vbahelper/vbafontbase.cxx@146", "comments": [{"message": "The commit message tells:\n\n\"we only need this conversion for calc\"\nbut the code does here:\n\"we only don't need it for word\"\n\nThey are technically the same, because your enum only has two values; but logically they are different, which would appear when you add a third option (say, POWERPOINT). What will happen then?\n\nI'd say, use a switch with explicit enumeration of all possible values; this would have an advantage that when you add a third value, the compiler would warn you about any such switch that doesn't cover all possible cases.", "timestamp": "2022-12-24 05:58:26.000000000"}]}
{"thread_id": "def2cee6_bddf9037", "url": "https://gerrit.libreoffice.org/#/c/core/+/144788/1/vbahelper/source/vbahelper/vbafontbase.cxx@160", "comments": [{"message": "Shouldn't this then also be guarded by the component?", "timestamp": "2022-12-24 05:58:26.000000000"}, {"message": "Sorry yes thanks!", "timestamp": "2023-01-03 19:51:59.000000000"}]}
{"thread_id": "8783e474_5957875d", "url": "https://gerrit.libreoffice.org/#/c/core/+/147243/1/sfx2/source/appl/app.cxx@429", "comments": [{"message": "here SetIntallLOKNotifier should be done similar to: https://gerrit.libreoffice.org/c/core/+/147200", "timestamp": "2023-02-20 09:01:41.000000000"}, {"message": "Done", "timestamp": "2023-02-20 10:20:26.000000000"}]}
{"thread_id": "83067c63_95fde85c", "url": "https://gerrit.libreoffice.org/#/c/core/+/145879/8/sc/qa/unit/subsequent_filters_test.cxx@3153", "comments": [{"message": "After the save and reload, the document shell cannot be loaded again. Is there anything that I am missing? Somehow the document is empty \ud83d\ude1e. However, if I open the tmp document in an editor or LibreOffice itself, there is no problem at all.", "timestamp": "2023-02-09 10:13:42.000000000"}, {"message": "Done", "timestamp": "2023-02-10 09:36:14.000000000"}]}
{"thread_id": "09ec90e5_aaf88613", "url": "https://gerrit.libreoffice.org/#/c/core/+/145879/10/sc/qa/unit/subsequent_filters_test.cxx@3151", "comments": [{"message": "Let's prefer the SC_TEXT_CSV_FILTER_NAME constexpr from sc/inc/global.hxx", "timestamp": "2023-02-10 14:49:14.000000000"}, {"message": "Done", "timestamp": "2023-02-12 10:19:31.000000000"}]}
{"thread_id": "a1843d7c_5e98ed58", "url": "https://gerrit.libreoffice.org/#/c/core/+/145879/10/sc/qa/unit/subsequent_filters_test.cxx@3153", "comments": [{"message": "Same here.", "timestamp": "2023-02-10 14:49:14.000000000"}, {"message": "Done", "timestamp": "2023-02-12 10:19:31.000000000"}]}
{"thread_id": "747f042d_e4d0ccd6", "url": "https://gerrit.libreoffice.org/#/c/core/+/145879/5/sc/source/ui/dbgui/asciiopt.cxx@197", "comments": [{"message": "I suppose it would be nice if we didn't add new options this way:\n\nthe tokens 10 and 12 are import-only. Adding token 13 for export means that we must have mandatory empty elements in export filter string.\n\nWe already have option 9 for \"save formulas\" on export, and option 12 for \"evaluate formulas\" on import, and those could had been merged ideally...\n\nEike: what do you think?", "timestamp": "2023-01-23 13:34:48.000000000"}, {"message": "It is even impossible to specify a comma as a delimiter since it is used as token separator as well (ScFilterOptionsObj::execute - where we have to set the IncludeBOM flag as well). \n\nIs there a possibilit to retrieve the SfxMedium in order to check if we have such a flag or not?", "timestamp": "2023-01-23 14:28:28.000000000"}, {"message": "> those could had been merged ideally\n\nI don't think so. That would had implied that a file saved with formulas when reloaded would had activated evaluate formulas as well and vice versa. That might be expected or might not, I think it's cleaner to have those separated.\n\n\n> impossible to specify a comma as a delimiter\n\nThat's why separator and quote characters are expressed/expected as numeric character code values.\n\n\n> possibilit to retrieve the SfxMedium in order to check\n\nNot that I know of. Also, I don't quite see what you'd be up to if it was.", "timestamp": "2023-01-28 22:57:23.000000000"}, {"message": "In ScFilterOptionsObj::execute I still have to figure out how to retrieve, if the current document has a BOM or not. I thought this could be done using SfxMedium, but I need to look it up when I have some time.", "timestamp": "2023-01-30 20:00:22.000000000"}, {"message": "You could remember the pInStream position before the ScImportAsciiDlg dialog and after the dialog was executed ask pInStream->GetStreamCharSet() and if it is RTL_TEXTENCODING_UTF8 or RTL_TEXTENCODING_UNICODE then check if the stream was advanced by 2 bytes, i.e. started with a BOM.", "timestamp": "2023-02-03 15:52:03.000000000"}, {"message": "Done", "timestamp": "2023-02-10 09:36:14.000000000"}]}
{"thread_id": "56055590_23f2bea2", "url": "https://gerrit.libreoffice.org/#/c/core/+/145879/1/sc/source/ui/docshell/docsh.cxx@1959", "comments": [{"message": "Hi Mike! Should we check here for all sorts of encodings like in: https://opengrok.libreoffice.org/xref/core/sw/source/filter/ascii/wrtasc.cxx?r=af23d1c1#161?", "timestamp": "2023-01-20 11:19:01.000000000"}, {"message": "Not \"all sorts\" - because the encoding is defined by eCharSet, and we already ruled out UTF-16 in the check above; but you should check that the encoding is UTF-8, not Win-1252 ;)", "timestamp": "2023-01-20 12:22:34.000000000"}, {"message": "Done", "timestamp": "2023-01-20 16:57:08.000000000"}]}
{"thread_id": "0c0c3074_29dfe8c3", "url": "https://gerrit.libreoffice.org/#/c/core/+/145879/3/sc/source/ui/docshell/docsh.cxx@1265", "comments": [{"message": "Sry for bothering you, but how I can change the SID_FILE_FILTEROPTIONS item? It seems that the string will be build once in ScImportOptions::BuildString but I could not figure out where it will be actually set and where to change it to reflect the bIncludeBOM flag. Thank you very much!", "timestamp": "2023-01-20 23:22:08.000000000"}, {"message": "Done", "timestamp": "2023-01-23 10:37:11.000000000"}, {"message": "Oh - sorry, somehow missed this. Nice that you have figured it!", "timestamp": "2023-01-23 10:47:50.000000000"}]}
{"thread_id": "cc600165_855c36ec", "url": "https://gerrit.libreoffice.org/#/c/core/+/145879/5/sc/source/ui/docshell/docsh.cxx@1304", "comments": [{"message": "Why the extra \"; bIncludeBOM\"? Wouldn't\n\n    if (const bool bIncludeBOM = aImpEx.GetIncludeBOM())\n\nbe sufficient?", "timestamp": "2023-01-28 22:57:23.000000000"}, {"message": "Ack", "timestamp": "2023-01-30 20:00:22.000000000"}]}
{"thread_id": "8aa9fe33_00da7758", "url": "https://gerrit.libreoffice.org/#/c/core/+/146162/7/oox/source/drawingml/shape.cxx@1696", "comments": [{"message": "no need this, because it is checked also by the condition of the next loop", "timestamp": "2023-02-17 11:56:21.000000000"}]}
{"thread_id": "05936fd9_4aa9cb7d", "url": "https://gerrit.libreoffice.org/#/c/core/+/146162/7/oox/source/drawingml/shape.cxx@1698", "comments": [{"message": "It's better to use the real indices: i = 0; i< and [i]", "timestamp": "2023-02-17 11:56:21.000000000"}]}
{"thread_id": "e4b6a963_a2594df4", "url": "https://gerrit.libreoffice.org/#/c/core/+/146162/7/sd/source/ui/docshell/docshel4.cxx@409", "comments": [{"message": "typo", "timestamp": "2023-02-17 11:56:21.000000000"}]}
{"thread_id": "af1beeee_f9a2d140", "url": "https://gerrit.libreoffice.org/#/c/core/+/120496/2/configmgr/source/access.cxx@1395", "comments": [{"message": "What was the reason to change this from `true` to `false`?  If `locale` is `\"zh-Hant-TW\"` here, then `getFallbackStrings(true)` returned the three fallbacks `\"zh-TW\", \"zh-CN\", \"zh\"`, while `getFallbackStrings(false)` now returns the two fallbacks `\"zh-CN\", \"zh\"`.  I assume that broke <https://git.libreoffice.org/core/+/dfc28be2487c13be36a90efd778b8d8f179c589d%5E%21> \"configmgr: Use a proper LanguageTag-based locale fallback mechanism\" again, as now our `zh-CN` rather than our `zh-TW` localization value is returned (and the latter was presumably what that change wanted to achieve, even though its commit message is unfortunately rather vague on that).", "timestamp": "2023-02-15 17:25:11.000000000"}, {"message": "> `getFallbackStrings(true)` returned the three fallbacks `\"zh-TW\", \"zh-CN\", \"zh\"`\n\nThat is already wrong, with `true` it should include `\"zh-Hant-TW\"` as first string, the script is ignored and shouldn't. The sequence should be\n`\"zh-Hant-TW\", \"zh-Hant\", \"zh-TW\", \"zh-CN\", \"zh\"` or even without `\"zh-CN\"` as zh-CN is zh-Hans instead of zh-Hant, and given their animosities..\n\nWith `false` the `\"zh-Hant-TW\"` should be omitted then.\n\nI'll investigate and fix.", "timestamp": "2023-02-15 18:45:44.000000000"}, {"message": "Sigh.. or no, because we explicitly map the canonical zh-Hant-TW to the legacy zh-TW because that's what most software understands.. same for zh-Hans-CN mapped to zh-CN.", "timestamp": "2023-02-15 19:26:37.000000000"}, {"message": "seen fixed (<https://gerrit.libreoffice.org/c/core/+/147219> \"Verify that zh-Hant-TW locale works in configmgr as intended\"); thanks!", "timestamp": "2023-02-17 13:53:30.000000000"}]}
{"thread_id": "fbe08250_42af5752", "url": "https://gerrit.libreoffice.org/#/c/core/+/146011/4/sc/source/core/data/validat.cxx@606", "comments": [{"message": "Instead of copy-pasting this all, factoring it out to a function would had been much preferable.", "timestamp": "2023-01-30 17:20:02.000000000"}, {"message": "Done", "timestamp": "2023-02-17 11:36:42.000000000"}]}
{"thread_id": "9ed1a77e_ab1cced0", "url": "https://gerrit.libreoffice.org/#/c/core/+/147165/2/editeng/qa/items/borderline_test.cxx@37", "comments": [{"message": "Generally, the specializations in CXX look suspicious for ODR violations. Of course, this is for tests, but still ... \ud83d\ude0a", "timestamp": "2023-02-17 07:17:30.000000000"}, {"message": "* That was already an issue before this change.\n* At least, the specialized toString member functions are all still inline.\nSo if all TUs define things the same way, there'll be no ODR violations.", "timestamp": "2023-02-17 07:38:32.000000000"}]}
{"thread_id": "065d424d_c176fda1", "url": "https://gerrit.libreoffice.org/#/c/core/+/146996/2/sal/osl/unx/conditn.cxx@76", "comments": [{"message": "better use notify_all, to match the existing pthread_cond_broadcast (rather than pthread_cond_signal)?", "timestamp": "2023-02-14 13:40:23.000000000"}, {"message": "Done.", "timestamp": "2023-02-15 07:35:23.000000000"}]}
{"thread_id": "9ef42817_b925c1a8", "url": "https://gerrit.libreoffice.org/#/c/core/+/146996/2/sal/osl/unx/conditn.cxx@78", "comments": [{"message": "a minor nit, but I think I would leave those SAL_INFO here and elsewhere outside of the locked regions", "timestamp": "2023-02-14 13:40:23.000000000"}, {"message": "Done.", "timestamp": "2023-02-15 07:35:23.000000000"}]}
{"thread_id": "ff99f3c7_f71d663a", "url": "https://gerrit.libreoffice.org/#/c/core/+/146996/2/sal/osl/unx/conditn.cxx@120", "comments": [{"message": "rather use wait_for?", "timestamp": "2023-02-14 13:40:23.000000000"}, {"message": "Done.", "timestamp": "2023-02-15 07:35:23.000000000"}]}
{"thread_id": "d1a3651d_fd1b3020", "url": "https://gerrit.libreoffice.org/#/c/core/+/147001/5/sw/source/uibase/shells/textidx.cxx@67", "comments": [{"message": "Forgot to remote this?", "timestamp": "2023-02-15 08:26:41.000000000"}, {"message": "Yes, thank you. However to be clear at this stage I'm more interested in higher level review: whether the code shouldn't be placed somewhere else, whether the assumptions made are reasonable, and whether the resulting user experience is good enough.", "timestamp": "2023-02-15 09:06:48.000000000"}, {"message": "Removed", "timestamp": "2023-02-15 14:08:31.000000000"}]}
{"thread_id": "d7e0caaa_cd070c17", "url": "https://gerrit.libreoffice.org/#/c/core/+/147001/5/sw/source/uibase/shells/textidx.cxx@73", "comments": [{"message": "This pField points to the SwField that is under the cursor, in one row of the ToA table / bibiliography, I think.", "timestamp": "2023-02-15 12:52:03.000000000"}, {"message": "I believe rShell.GetCurField() will return either nullptr or bogus value when in the bibliography table, but I have to admit I hadn't checked.", "timestamp": "2023-02-15 13:13:40.000000000"}, {"message": "Just checked, it is indeed nullptr.", "timestamp": "2023-02-15 13:36:27.000000000"}]}
{"thread_id": "8045a99d_55587189", "url": "https://gerrit.libreoffice.org/#/c/core/+/147001/5/sw/source/uibase/shells/textidx.cxx@86", "comments": [{"message": "Here you get the complete text of the paragraph under the cursor. A biblio field can be part of a paragraph, but there may be text before and after. Did you consider getting that text from pField instead?\n\nAnd perhaps call it pFieldUnderCursor or something, so you don't reuse pField for the loop variable in the vFields iteration.\n\nOr maybe even go further and see if you can do a cheap ptr comparison: the SwField* under cursor should be in vFields in the happy case, I guess.", "timestamp": "2023-02-15 10:06:46.000000000"}, {"message": "Hey, actually this is not what it is. The rOriginalNodeText is in fact not the text of any biblio field, it is the text of the entry in the bibliography table. The entire paragraph is the entry, so I believe it is safe in this regard.\n\nI agree the name should be improved to better convey where it comes from.", "timestamp": "2023-02-15 11:03:41.000000000"}, {"message": "(I'm using the terminology like this: bibliography mark = field = \"[1]\", bibliography entry = line/paragraph in the bibliography table = \"1: Kernighan, Brian W., Ritchie, Dennis M., The C Programming Language\")", "timestamp": "2023-02-15 11:09:59.000000000"}, {"message": "Ah, you're right. Still, if it works to have one SwField pointer that is under the cursor and then iterate vFields and see what is the matching format field + jump there, that's simpler, since you don't have to expand the field at all, correct?", "timestamp": "2023-02-15 12:41:41.000000000"}, {"message": "I have to admit I don't think I understand what you mean by that.", "timestamp": "2023-02-15 12:46:23.000000000"}, {"message": "Changed the name.", "timestamp": "2023-02-15 14:08:31.000000000"}]}
{"thread_id": "ca43b11c_b94ae37f", "url": "https://gerrit.libreoffice.org/#/c/core/+/147001/5/sw/source/uibase/shells/textidx.cxx@94", "comments": [{"message": "Here you have a vector of biblio fields in the document.", "timestamp": "2023-02-15 12:52:03.000000000"}, {"message": "Resolved", "timestamp": "2023-02-15 13:38:18.000000000"}]}
{"thread_id": "59a2e626_16eeeeba", "url": "https://gerrit.libreoffice.org/#/c/core/+/147001/5/sw/source/uibase/shells/textidx.cxx@99", "comments": [{"message": "If you compare the original pField (under the cursor) with the current item in the iteration, then I think that would be the same check as what you do; but all the expensive field expand (generate string from field) code can be avoided and instead just compare two pointers.\n\nWould that work? If so, that's simpler and cheaper, I think.\n\nI assume that you do the whole iteration because you need an SwFormatField to do the jump, while you only have an SwField under the cursor.\n\nI hope this helps. :-)", "timestamp": "2023-02-15 12:52:03.000000000"}, {"message": "Hey, I unfortunately don't think that is true: the case I am implementing is when the cursor is in the bibliography table, therefore there is no field under the cursor.", "timestamp": "2023-02-15 13:10:15.000000000"}, {"message": "I see, fine. So then this looks good at a high level. Please clean up the unwanted changes, then probably a final pass will be needed for style issues, but those are just minor things.", "timestamp": "2023-02-15 13:28:35.000000000"}, {"message": "I'm on it, thanks.", "timestamp": "2023-02-15 13:36:27.000000000"}]}
{"thread_id": "cc7107ce_73028511", "url": "https://gerrit.libreoffice.org/#/c/core/+/147001/6/sw/source/uibase/shells/textidx.cxx@91", "comments": [{"message": "Oh no, I'll have to change that, that doesn't make any sense.", "timestamp": "2023-02-15 14:40:00.000000000"}, {"message": "Done", "timestamp": "2023-02-15 14:56:47.000000000"}]}
{"thread_id": "7ca98455_778b5bea", "url": "https://gerrit.libreoffice.org/#/c/core/+/147001/8/sw/source/uibase/shells/textidx.cxx@44", "comments": [{"message": "Next time please avoid mixing cosmetic and functional changes in the same commit. It helps a bit that here at least I can view the patch with 'git show -w' to ignore whitespace changes.", "timestamp": "2023-02-16 08:48:57.000000000"}]}
{"thread_id": "82697d0e_93d72336", "url": "https://gerrit.libreoffice.org/#/c/core/+/147046/2/include/comphelper/singletonref.hxx@128", "comments": [{"message": "Why is the locking required when returning the pointer? Isn't its value guarded and guaranteed to be unchanged at all times between the first ctor and last dtor? So that we only need to guard the blocks around changed m_nRef and respective (de)init of m_pInstance. If this object's method is called, it is alive, and m_nRef can't ever become 0.", "timestamp": "2023-02-16 06:29:55.000000000"}, {"message": "Good point. I'll make this change.", "timestamp": "2023-02-16 07:00:53.000000000"}]}
{"thread_id": "fe421995_fc3b1ae6", "url": "https://gerrit.libreoffice.org/#/c/core/+/147046/2/include/comphelper/singletonref.hxx@150", "comments": [{"message": "Can't this inlined-function-local static be duplicated when used from different libraries? Or is it guarded by the note above, about all users of the pattern inside the same library? Maybe then each library will have an own singleton...", "timestamp": "2023-02-16 06:29:55.000000000"}, {"message": "This class is not intended to be used like that, exposing an instantiation in a header file would not be a good idea.", "timestamp": "2023-02-16 07:00:53.000000000"}]}
{"thread_id": "1ec29295_b9aba38a", "url": "https://gerrit.libreoffice.org/#/c/core/+/146424/1/editeng/source/editeng/impedit3.cxx@1344", "comments": [{"message": "A comment would clarify how the remaining width is calculated in the single-line case. It's not obvious at all how the last entry in the CharPosArray + 1 is the remaining width.", "timestamp": "2023-02-03 17:18:47.000000000"}, {"message": "Is it not the code self descriptive?. Character Coordinate Position Array", "timestamp": "2023-02-06 12:36:48.000000000"}]}
{"thread_id": "a29d9b03_45885ed7", "url": "https://gerrit.libreoffice.org/#/c/core/+/146423/1/sc/source/ui/view/output2.cxx@2422", "comments": [{"message": "Is it really necessary to initialize a string *and* use a copy-constructor with a default-constructed temporary?\n\nLeaving this line out seems to be more reasonable to me.", "timestamp": "2023-02-03 17:15:29.000000000"}, {"message": "Thanks, It looks like technical issue", "timestamp": "2023-02-06 12:28:15.000000000"}]}
{"thread_id": "1d677938_5696f360", "url": "https://gerrit.libreoffice.org/#/c/core/+/146423/1/sc/source/ui/view/output2.cxx@4479", "comments": [{"message": "A comment could explain why we are capture `aStr` and how it's used. For example: Capture the single-line text to use for displaying. See ScOutputData::DrawEditParam::readCellContent().", "timestamp": "2023-02-03 17:23:22.000000000"}, {"message": "It is explained in the patch commit description", "timestamp": "2023-02-06 12:24:27.000000000"}]}
{"thread_id": "559e435d_47a2a28a", "url": "https://gerrit.libreoffice.org/#/c/core/+/147039/2/sw/qa/uitest/navigator/tdf151051.py@36", "comments": [{"message": "Hi Stephan,\nI'm wondering if we should use wait_until_child_is_available instead in this cases ?", "timestamp": "2023-02-15 09:38:29.000000000"}, {"message": "is there such a child that is guaranteed to only be available once that m_aUpdTimer has fired and invoked its SwContentTree TimerUpdate handler?", "timestamp": "2023-02-15 09:45:07.000000000"}]}
{"thread_id": "20ce49f4_e0f4b718", "url": "https://gerrit.libreoffice.org/#/c/core/+/147000/2/sw/source/core/fields/authfld.cxx@572", "comments": [{"message": "It seems that previously, pLayout was assumed to always be not null. Has this changed now? If not, possibly it just makes sense to add an assert, not the check and exit?", "timestamp": "2023-02-14 13:28:14.000000000"}, {"message": "Yeah, you're right, I don't know where I got that. I actually have no idea what results are expected when pLayout is nullptr.", "timestamp": "2023-02-14 13:37:12.000000000"}, {"message": "Done", "timestamp": "2023-02-14 13:49:39.000000000"}]}
{"thread_id": "291155f8_b8b14be0", "url": "https://gerrit.libreoffice.org/#/c/core/+/147000/2/sw/source/core/fields/authfld.cxx@580", "comments": [{"message": "Just use this:\n\n    std::unique_ptr<SwForm> pDefaultForm;\n    if (!pTOX)\n    {\n        pDefaultForm.reset(new SwForm);\n        pTOX = pDefaultForm.get();\n    }", "timestamp": "2023-02-14 13:28:14.000000000"}, {"message": "The core issue is fixed", "timestamp": "2023-02-14 13:47:45.000000000"}]}
{"thread_id": "9f9c816c_099a3c5e", "url": "https://gerrit.libreoffice.org/#/c/core/+/147000/2/sw/source/core/fields/authfld.cxx@629", "comments": [{"message": "Make the pDefaultTOX an unique_ptr, and the code would be both cleaner, and safer (also against exceptions). Then, you could simply check if (!pTOX), and then initialize the unique_ptr, and assign pTOX from it (so, you would not need pActualTOX).\n\nAlso:\nplease follow our current code conventions in the newly added code (defined in our clang-format rules). It is not enforced in some old files (to not require large-scale reformatting, which requires manual inspection of every file), and people tend to not require following the rules in new code in such files. And I wouldn't require that, either, if your code at least followed the /existing/ style used in the file. But you do not: you replace 'if ()' with 'if()', bring opening brace into the line where switch is, use the '}else{' etc.", "timestamp": "2023-02-14 12:44:49.000000000"}, {"message": "Hey, I know using smart pointers is better, but I don't know how to do it in this case, since smart pointer cannot be uninitialized. Since the TOX is const in the function, maybe a static unique_ptr<const SwForm> variable would solve this issue?", "timestamp": "2023-02-14 12:52:17.000000000"}, {"message": "I don't understand what \"smart pointer cannot be uninitialized\" means. Do you need the smart ptr to release the pointer and not destroy it? (I don't see such case in your code.) Then use unique_ptr::release.\n\nOtherwise, when the unique_ptr will fall out of scope, it will be destructed automatically.\n\nI don't think you need to use a static here - at least not until it's clear that we need such an optimization.", "timestamp": "2023-02-14 12:57:19.000000000"}, {"message": "It means that if I declare `unique_ptr<const SwForm> pDefaultForm;`, it will be initialized immediately, meaning new SwForm will be created every time, not only when necessary.", "timestamp": "2023-02-14 13:00:24.000000000"}, {"message": "Of course no. Such definition creates an empty pointer. Only if you initialize it using some value, it will hold it.", "timestamp": "2023-02-14 13:01:54.000000000"}, {"message": "Weird, I was convinced that's how it works, my bad. I'll fix it immediately, thanks.", "timestamp": "2023-02-14 13:04:09.000000000"}, {"message": "Fixed both safety and formatting.", "timestamp": "2023-02-14 13:45:34.000000000"}]}
{"thread_id": "2d52664f_d7e04da0", "url": "https://gerrit.libreoffice.org/#/c/core/+/147000/5/sw/source/core/fields/authfld.cxx@572", "comments": [{"message": "Please avoid this. I already shown you the readable code. The ternary operator re-assigns the value to itself, assigns a value to a variable, calls a getter on the result, uses parentheses to disambiguate, just to save a few lines. Don't do this. Readability is much more important.", "timestamp": "2023-02-14 13:49:39.000000000"}, {"message": "Personally I find this more readable, since it just sets a default value, so it (imo) shouldn't take up so many lines, but sure.", "timestamp": "2023-02-14 13:55:18.000000000"}, {"message": "Split into multiple expressions;", "timestamp": "2023-02-14 14:11:04.000000000"}]}
{"thread_id": "af680d72_7d3f1251", "url": "https://gerrit.libreoffice.org/#/c/core/+/147027/1/sc/source/ui/view/gridwin.cxx@1437", "comments": [{"message": "This looks fine. GetDataEntries does not seem to be guaranteed to return a sortAndRemoveDuplicates, so it does need to step through the whole vector.", "timestamp": "2023-02-14 22:19:57.000000000"}, {"message": "Done", "timestamp": "2023-02-14 22:26:22.000000000"}]}
{"thread_id": "20e9ddc5_9d9a3b44", "url": "https://gerrit.libreoffice.org/#/c/core/+/146939/2/sw/qa/extras/ooxmlexport/ooxmlexport18.cxx@122", "comments": [{"message": "These two always passed on my system (Ubuntu 20.04), but I just used the values that I got even though I didn't like being that specific. The failure on Jenkins to confirm these specific paragraphs just confirms to me that it might be a bit too rigid.", "timestamp": "2023-02-14 02:06:20.000000000"}]}
{"thread_id": "6e6e47c8_cfd2714c", "url": "https://gerrit.libreoffice.org/#/c/core/+/146855/2/filter/source/xsltfilter/XSLTFilter.cxx@219", "comments": [{"message": "I'd /guess/ that macro expansion should only be done here if sUrl is actually a vnd.sun.star.expand URL", "timestamp": "2023-02-13 08:57:47.000000000"}, {"message": "... so let me keep it as it is, because that would also be my guess, but it's a guess ;)", "timestamp": "2023-02-13 09:10:44.000000000"}, {"message": "<https://gerrit.libreoffice.org/c/core/+/146911> \"Assume that only vnd.sun.star.expand URLs shall be macro-expanded here\"", "timestamp": "2023-02-13 15:11:59.000000000"}]}
{"thread_id": "f719356b_fcf86362", "url": "https://gerrit.libreoffice.org/#/c/core/+/146855/2/sfx2/source/doc/doctemplates.cxx@557", "comments": [{"message": "is there actual demand for that noisy `::` prefix here?", "timestamp": "2023-02-13 08:57:47.000000000"}, {"message": "No :) just a copypaste.", "timestamp": "2023-02-13 09:10:44.000000000"}, {"message": "Done", "timestamp": "2023-02-13 10:55:59.000000000"}]}
{"thread_id": "7fcb8a28_1c4c219f", "url": "https://gerrit.libreoffice.org/#/c/core/+/146855/2/wizards/com/sun/star/wizards/common/FileAccess.java@190", "comments": [{"message": "That function can't be used here, as it converts `+` to ` `.  (See the use in `ridljar/com/sun/star/comp/loader/JavaLoader.java` for inspiration.)", "timestamp": "2023-02-13 08:57:47.000000000"}, {"message": "Done", "timestamp": "2023-02-13 10:55:59.000000000"}]}
{"thread_id": "2c0ff0de_4fb44102", "url": "https://gerrit.libreoffice.org/#/c/core/+/146855/2/wizards/com/sun/star/wizards/common/FileAccess.java@205", "comments": [{"message": "wonder if there's a need to add that here", "timestamp": "2023-02-13 08:57:47.000000000"}, {"message": "ah, ignore me, css.uno.Exception vs. java.lang.Exception and UnsupportedEncodingException", "timestamp": "2023-02-13 09:03:10.000000000"}]}
{"thread_id": "08041a07_dad89601", "url": "https://gerrit.libreoffice.org/#/c/core/+/146746/1/sc/source/filter/rtf/eeimpars.cxx@545", "comments": [{"message": "we only use the nHeight in side this loop, and this loop happens nRowSpan times, so if nRowSpan is 0 then we don't need nHeight because it isn't used. So I think we could do \"if (!nRowSpan) return bHasGraphics\" before we attempt that divide and we avoid the issue in a more attractive way.", "timestamp": "2023-02-10 18:27:41.000000000"}, {"message": "Done", "timestamp": "2023-02-13 08:43:48.000000000"}]}
{"thread_id": "4a204b9a_cdb0006b", "url": "https://gerrit.libreoffice.org/#/c/core/+/146550/1/sc/qa/uitest/calc_tests4/tdf152722_AddDecimalPlacesToNatNum.py@23", "comments": [{"message": "Why do you select A1 after selecting B1 ?", "timestamp": "2023-02-09 14:40:34.000000000"}, {"message": "Hmm... there is actually no need of all this stuff of entering text and making selection. I'm going to remove it.", "timestamp": "2023-02-10 18:38:09.000000000"}]}
{"thread_id": "42f5a631_ee0dca7d", "url": "https://gerrit.libreoffice.org/#/c/core/+/145486/2/sw/source/core/doc/docbm.cxx@1462", "comments": [{"message": "This is my \"tiny improvement\" fix.  The rest is just a simple rename.", "timestamp": "2023-02-11 12:10:41.000000000"}]}
{"thread_id": "bf02d68f_1809878b", "url": "https://gerrit.libreoffice.org/#/c/core/+/146725/2/sw/source/core/text/EnhancedPDFExportHelper.cxx@277", "comments": [{"message": "This could move up and join rNd.IsHidden and still be safe.\nAlthough GotoFormatField only assigns GetPoint, the fact that it calls IsSelOvr is a bit scary because that suggests that HasMark is a possibility. I suspect ClearMark could be necessary still - otherwise why wouldn't it have been connected with rNd.IsHidden?", "timestamp": "2023-02-10 02:12:51.000000000"}, {"message": "I don't think moving it up to be with rNd.IsHidden would be correct. GotoFormatField moves the current cursor position which is what is checked by IsInHiddenRange.\n\nYou are probably correct about ClearMark still being necessary here. I will put it back. IsSelOvr is a bit scary for sure.", "timestamp": "2023-02-10 03:41:33.000000000"}, {"message": "Done", "timestamp": "2023-02-10 03:43:42.000000000"}]}
{"thread_id": "09130865_955e8e34", "url": "https://gerrit.libreoffice.org/#/c/core/+/146725/2/sw/source/core/text/EnhancedPDFExportHelper.cxx@1672", "comments": [{"message": "I'm not certain that GotoINetAttr does not select anything.\nIt calls IsSelOver which generally always returns false when there is no mark, so I would be a little bit leery to not calling ClearMark() still.", "timestamp": "2023-02-10 02:12:51.000000000"}, {"message": "I will return the moved ClearMark to where it was to be safe.", "timestamp": "2023-02-10 03:41:33.000000000"}, {"message": "Done", "timestamp": "2023-02-10 03:43:42.000000000"}]}
{"thread_id": "e903681a_938179d3", "url": "https://gerrit.libreoffice.org/#/c/core/+/126843/3/sw/qa/uitest/writer_tests4/spellDialog.py@114", "comments": [{"message": "at <https://ci.libreoffice.org//job/lo_ubsan/2679/>, saw this fail once with the unhelpful\n\n  ======================================================================\n  FAIL: test_tdf136855 (spellDialog.SpellingAndGrammarDialog)\n  ----------------------------------------------------------------------\n  Traceback (most recent call last):\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/sw/qa/uitest/writer_tests4/spellDialog.py\", line 115, in test_tdf136855\n      self.assertTrue(output_text.startswith(\"xx xx xx xxxxxxxxxxix xxxxxxxxxxxxxxviii\"))\n  AssertionError: False is not true", "timestamp": "2023-02-10 07:40:51.000000000"}]}
{"thread_id": "4953e7d3_a1f8a2ad", "url": "https://gerrit.libreoffice.org/#/c/core/+/146084/2/sc/source/core/data/validat.cxx@603", "comments": [{"message": "Instead of copy-pasting this all, factoring it out to a function would be much preferable.", "timestamp": "2023-01-30 17:21:01.000000000"}, {"message": "Thanks for the review, Eike. I will modify it in that way.", "timestamp": "2023-01-30 23:07:16.000000000"}]}
{"thread_id": "435caafe_649fbcba", "url": "https://gerrit.libreoffice.org/#/c/core/+/146680/2/sw/source/core/attr/formatflysplit.cxx@30", "comments": [{"message": "I hope this makes sense. If you see an obvious problem with this approach, then do speak up, it's always easier to fix things early vs when many places in Writer depend on this representation. :-) Thanks.", "timestamp": "2023-02-09 13:10:41.000000000"}]}
{"thread_id": "c573902a_023aa8f7", "url": "https://gerrit.libreoffice.org/#/c/core/+/146602/2/sw/source/core/text/itrform2.cxx@1936", "comments": [{"message": "coverity suggests that SetRealHeight has dereferenced m_pFrame so this check is either redundant or SetRealHeight needs a null check.", "timestamp": "2023-02-08 20:18:24.000000000"}, {"message": "Indeed the check is not needed, see https://gerrit.libreoffice.org/c/core/+/146679", "timestamp": "2023-02-09 07:23:52.000000000"}]}
{"thread_id": "6ad139db_b7aa810a", "url": "https://gerrit.libreoffice.org/#/c/core/+/140624/5/vcl/source/app/htmltransferable.cxx@65", "comments": [{"message": "This looks suspicious. 'auto ref' creates a copy (not a reference), so the following setting of MimeType and DataType modifies a local variable, not the member of aDataFlavors. Then, *if* ref was a reference (declared as 'auto& ref'), it could be reused in the call to SotExchange::GetFormatDataFlavor, avoiding the second call to getArray. Or maybe lines 65-67 are just accidental leftovers?", "timestamp": "2023-02-08 07:33:35.000000000"}, {"message": "I guess verify that you have a working deepl setup, drop those 3 lines, verify that deepl continues to work, commit. :-)", "timestamp": "2023-02-08 07:58:00.000000000"}]}
{"thread_id": "0f7c7566_0eab3b80", "url": "https://gerrit.libreoffice.org/#/c/core/+/146004/1/sw/source/uibase/uiview/pview.cxx@1021", "comments": [{"message": "Note that this never gets called, because SID_ATTR_VIEWLAYOUT is only defined in _viewsh.sdi and calls the method StateStatusLine instead of GetState.\n\nFor this to get called, you need to create an entry in viewsh.sdi inside the TextPrintPreview interface (around line 477):\n\n```\nSID_ATTR_VIEWLAYOUT\n[\n    StateMethod = GetState;\n]\n```", "timestamp": "2023-01-25 22:38:20.000000000"}, {"message": "Forget about this comment... At first I did not notice you already had done this.", "timestamp": "2023-01-26 00:47:47.000000000"}]}
{"thread_id": "dbf86884_db8042c6", "url": "https://gerrit.libreoffice.org/#/c/core/+/146004/1/sw/source/uibase/utlui/viewlayoutctrl.cxx@68", "comments": [{"message": "I guess 3 already means that the control won't be drawn. So maybe use 3 here.", "timestamp": "2023-01-25 22:38:20.000000000"}, {"message": "Done", "timestamp": "2023-02-07 13:55:13.000000000"}]}
{"thread_id": "9d5baa7a_ca159670", "url": "https://gerrit.libreoffice.org/#/c/core/+/146004/1/sw/source/uibase/utlui/viewlayoutctrl.cxx@96", "comments": [{"message": "Simply returning won't do the trick, because the previous images will remain in the background. The only way I was able to make this disappear is by drawing a rectangle on top of the existing drawing.", "timestamp": "2023-01-25 22:38:20.000000000"}, {"message": "Done", "timestamp": "2023-02-07 13:55:13.000000000"}]}
{"thread_id": "208d2e6f_8848c869", "url": "https://gerrit.libreoffice.org/#/c/core/+/146004/1/sw/source/uibase/utlui/viewlayoutctrl.cxx@105", "comments": [{"message": "After this line, add:\n\n```\nif (mpImpl->mnState > 3)\n{\n    pDev->SetBackground();\n    pDev->DrawRect(aControlRect);\n}\n```", "timestamp": "2023-01-25 22:38:20.000000000"}, {"message": "Don't forget to return after drawing:\n\n```\nif (mpImpl->mnState >= 3)\n{\n    pDev->SetBackground();\n    pDev->DrawRect(aControlRect);\n    return;\n}\n```", "timestamp": "2023-01-25 22:39:44.000000000"}, {"message": "One last thing... drop the `pDev->SetBackground();` line =)", "timestamp": "2023-01-26 00:45:58.000000000"}, {"message": "Works for me without drawrect() but added it anyway.", "timestamp": "2023-02-06 15:29:24.000000000"}]}
{"thread_id": "ff227166_a3ba5c1f", "url": "https://gerrit.libreoffice.org/#/c/core/+/146589/4/canvas/qa/cppunit/canvastest.cxx@80", "comments": [{"message": "Possibly in this and similar cases, it would be simpler to use one ctor, with the parameter value decided by the ternary operator?\n\n    mVclDevice = VclPtr<VirtualDevice>::Create(alpha ? DeviceFormat::WITH_ALPHA\n                                                     : DeviceFormat::WITHOUT_ALPHA);", "timestamp": "2023-02-07 11:21:32.000000000"}]}
{"thread_id": "8fa2a2db_79afc17a", "url": "https://gerrit.libreoffice.org/#/c/core/+/146562/1/sw/source/core/doc/docbm.cxx@357", "comments": [{"message": "Nit: I'm not sure iterators have to implement operator -= () for ints. It seems to work here, so it's fine, but in general it's better if you go create the iterator then call '--it;' on it.\n\nProbably not worth fixing here, just keep that in mind for new code.", "timestamp": "2023-02-07 07:19:46.000000000"}]}
{"thread_id": "def097c8_c7031e3a", "url": "https://gerrit.libreoffice.org/#/c/core/+/137650/3/basic/source/runtime/methods1.cxx@b1491", "comments": [{"message": "Arnaud, you likely forgot this line ;)", "timestamp": "2023-01-07 19:34:34.000000000"}, {"message": "Sorry I will have a look next week", "timestamp": "2023-02-06 09:20:56.000000000"}]}
{"thread_id": "95383eb0_e8434301", "url": "https://gerrit.libreoffice.org/#/c/core/+/146556/3/sc/source/ui/docshell/datastream.cxx@b126", "comments": [{"message": "Why not keep this line?", "timestamp": "2023-02-05 13:02:34.000000000"}, {"message": "To make it easier to read, since it's not obvious when reading this line of code that some magic is going on behind the scenes :-)", "timestamp": "2023-02-05 13:14:38.000000000"}]}
{"thread_id": "eed9daf3_b1df8149", "url": "https://gerrit.libreoffice.org/#/c/core/+/146556/3/sc/source/ui/docshell/datastream.cxx@b132", "comments": [{"message": "Why not keep this line, instead of 'mbTerminate.store(true)'?", "timestamp": "2023-02-05 13:02:34.000000000"}, {"message": "Ditto", "timestamp": "2023-02-05 13:14:38.000000000"}]}
{"thread_id": "d1202577_d6580fc8", "url": "https://gerrit.libreoffice.org/#/c/core/+/146546/1/sw/source/filter/html/parcss1.cxx@636", "comments": [{"message": "I would prefer\n\n     (m_aToken.equalsIgnoreAsciiCase( \"rgb\" ) ||\n      m_aToken.equalsIgnoreAsciiCase( \"rgba\" ))", "timestamp": "2023-02-04 14:29:44.000000000"}, {"message": "Done", "timestamp": "2023-02-04 16:49:12.000000000"}]}
{"thread_id": "988cdbb5_4ea8585d", "url": "https://gerrit.libreoffice.org/#/c/core/+/146484/7/sw/source/core/text/txtfrm.cxx@1661", "comments": [{"message": "Interesting, is this still relevant, given that now, TextFrameIndex strong_int objects are added, not integers?", "timestamp": "2023-02-03 14:07:36.000000000"}]}
{"thread_id": "1f00779e_ea7d5407", "url": "https://gerrit.libreoffice.org/#/c/core/+/146456/2/framework/source/uielement/recentfilesmenucontroller.cxx@163", "comments": [{"message": "Here I could not get this to work \ud83d\ude1e Do you have any suggestion?", "timestamp": "2023-02-02 11:22:46.000000000"}, {"message": "What's the error?", "timestamp": "2023-02-02 11:46:12.000000000"}, {"message": "I had to build the entire codebase not just the module. Then it worked, thx!", "timestamp": "2023-02-02 16:10:20.000000000"}]}
{"thread_id": "3dbb0865_2c989dc8", "url": "https://gerrit.libreoffice.org/#/c/core/+/146483/1/vcl/source/window/window2.cxx@346", "comments": [{"message": "Nit: it's a matter of style, but given the original code only checked for mbUseFrameData once, you could have kept that. With something like:\n\n if (mbUseFrameData)\n {\n  if (mpFrameData)\n     return mpFrameData->mpTrackWin == ...;\n }\n else\n {\n  if (mpWinData)\n   return mpWinData->mpTrackWin = ...;\n }\n return false;\n \nProbably is not worth to adjust it, I'm just noting this for future changes.", "timestamp": "2023-02-02 07:19:10.000000000"}]}
{"thread_id": "a886912f_9b892323", "url": "https://gerrit.libreoffice.org/#/c/core/+/107430/3/sal/rtl/strtmpl.cxx@1333", "comments": [{"message": "What is the plan regarding existing user extensions (ab)using this undocumented behavior? Asking because I came across such (which I can't share).", "timestamp": "2023-02-01 07:51:05.000000000"}, {"message": "The same as with any other case where such code directly calls a C/C++ function while violating that function's documented preconditions:  Don't do that, as it causes undefined behavior.", "timestamp": "2023-02-01 07:56:55.000000000"}, {"message": "Makes sense; but wouldn't it be reasonable at this point then to move this check to the HXX, wrapped into #ifdef DEBUG, or as asserts, where users debugging their extensions could catch that in their extensions' debug builds?", "timestamp": "2023-02-01 08:16:11.000000000"}, {"message": "So lets exercise on that TODO and make this an unconditional failure, <https://gerrit.libreoffice.org/c/core/+/146428> \"Finally drop undocumented rtl_[u]String_newFromStr null argument support\".  (Third-party code should then get a quite obvious null-pointer-deref error also when targeting a Library_sal built with --disable-assert-always-abort.)", "timestamp": "2023-02-01 08:36:53.000000000"}]}
{"thread_id": "23a50c37_df4c064b", "url": "https://gerrit.libreoffice.org/#/c/core/+/146130/1/vcl/jsdialog/enabled.cxx@42", "comments": [{"message": "I expect the path there is not quite right; need to check the path of that file in the instdir/ - I imagine there is an extra 'uiconfig/' in it ? =)", "timestamp": "2023-01-25 12:12:04.000000000"}, {"message": "yes, it has to match the string in Dialog's constructor. like: https://opengrok.libreoffice.org/xref/core/cui/source/dialogs/srchxtra.cxx?r=1726c27e#216", "timestamp": "2023-01-25 12:29:42.000000000"}, {"message": "Okay thanks! Sorry Have fixed that now :)", "timestamp": "2023-01-25 14:34:56.000000000"}]}
{"thread_id": "d3224da8_2f8ad542", "url": "https://gerrit.libreoffice.org/#/c/core/+/146096/2/sc/source/ui/dbgui/csvgrid.cxx@b1134", "comments": [{"message": "Did you check how that now behaves with\nhttps://bz.apache.org/ooo/show_bug.cgi?id=60296\nwhich was the reason this handling was added here?\n\nIf it's ok then please state so in the commit message; if it's not then we might need another solution.", "timestamp": "2023-01-28 23:04:23.000000000"}, {"message": "Done", "timestamp": "2023-01-30 10:01:11.000000000"}]}
{"thread_id": "b44a4e4b_3b9f37f6", "url": "https://gerrit.libreoffice.org/#/c/core/+/118029/11/sc/qa/uitest/calc_tests9/pivotTable.py@46", "comments": [{"message": "seen hanging at <https://ci.libreoffice.org//job/lo_tb_master_linux_dbg/41612>, Python process at\n\n  Traceback (most recent call first):\n    <built-in method sleep of module object at remote 0x7ff63f29e590>\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/uitest/uitest/test.py\", line 258, in execute_blocking_action\n      time.sleep(DEFAULT_SLEEP)\n    <built-in method next of module object at remote 0x7ff63f304170>\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/python-core-3.8.16/lib/contextlib.py\", line 113, in __enter__\n      return next(self.gen)\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/sc/qa/uitest/calc_tests9/pivotTable.py\", line 50, in test_cancelButton\n      with self.ui_test.execute_blocking_action(optionBtn.executeAction, args=('CLICK', ())) as dialog2:\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/python-core-3.8.16/lib/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/python-core-3.8.16/lib/unittest/case.py\", line 1700, in run\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/python-core-3.8.16/lib/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/python-core-3.8.16/lib/unittest/suite.py\", line 378, in run\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/python-core-3.8.16/lib/unittest/suite.py\", line 84, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/python-core-3.8.16/lib/unittest/runner.py\", line 432, in run\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/uitest/test_main.py\", line 133, in <module>\n      result = unittest.TextTestRunner(stream=sys.stdout, verbosity=2).run(test_suite)\n\nand soffice.bin crashed at\n\n  warn:vcl.uitest:32233:32233:vcl/source/uitest/uiobject.cxx:389: unknown action for ExpanderUIObject. Action: CLICK\n  warn:vcl.schedule:32233:32233:vcl/source/app/scheduler.cxx:491: Uncaught St11logic_error unknown action\n  \n  \n  Fatal exception: Signal 6\n  Stack:\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libuno_sal.so.3(+0xa7381)[0x7ff27e21d381]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libuno_sal.so.3(+0xa75aa)[0x7ff27e21d5aa]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libuno_sal.so.3(+0xa78c7)[0x7ff27e21d8c7]\n  /lib64/libc.so.6(+0x36400)[0x7ff27da2d400]\n  /lib64/libc.so.6(gsignal+0x37)[0x7ff27da2d387]\n  /lib64/libc.so.6(abort+0x148)[0x7ff27da2ea78]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libvcllo.so(_ZN9Scheduler22CallbackTaskSchedulingEv+0x19b6)[0x7ff2746db2e2]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libvcllo.so(+0x13ed1a3)[0x7ff274a411a3]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libvcllo.so(_ZN14SvpSalInstance12CheckTimeoutEb+0xff)[0x7ff274a3f9f3]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libvcllo.so(_ZN14SvpSalInstance9ImplYieldEbb+0x116)[0x7ff274a40720]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libvcllo.so(_ZN14SvpSalInstance7DoYieldEbb+0xda)[0x7ff274a40aee]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libvcllo.so(+0x10b4351)[0x7ff274708351]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libvcllo.so(_ZN11Application5YieldEv+0x168)[0x7ff274708f1e]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libvcllo.so(_ZN11Application7ExecuteEv+0x2f6)[0x7ff27470803e]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libsofficeapp.so(+0x711a8)[0x7ff27de361a8]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libvcllo.so(_Z10ImplSVMainv+0x20d)[0x7ff274725667]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libvcllo.so(_Z6SVMainv+0x9)[0x7ff27472578c]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/libsofficeapp.so(soffice_main+0x143)[0x7ff27de9b5ff]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/soffice.bin[0x4008ef]\n  /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/soffice.bin[0x4008d5]\n  /lib64/libc.so.6(__libc_start_main+0xf5)[0x7ff27da19555]", "timestamp": "2023-01-31 07:44:49.000000000"}]}
{"thread_id": "bc0d66b1_2044911e", "url": "https://gerrit.libreoffice.org/#/c/core/+/124654/5/sw/qa/uitest/writer_tests6/edit_file_properties_before_saving.py@89", "comments": [{"message": "at <https://ci.libreoffice.org//job/lo_tb_master_linux_dbg/41612/>, `UITest_writer_tests6` now failed with\n\n  test_tdf119206 (edit_file_properties_before_saving.edit_file_properties_before_saving) ... warn:io.connector:32388:32388:io/source/connector/connector.cxx:93: Connector : couldn't connect to pipe \"pytest7c02e9aa-a0e4-11ed-95c0-382c4ac69b19\": 10\n  warn:io.connector:32388:32388:io/source/connector/connector.cxx:93: Connector : couldn't connect to pipe \"pytest7c02e9aa-a0e4-11ed-95c0-382c4ac69b19\": 10\n  warn:io.connector:32388:32388:io/source/connector/connector.cxx:93: Connector : couldn't connect to pipe \"pytest7c02e9aa-a0e4-11ed-95c0-382c4ac69b19\": 10\n  warn:io.connector:32388:32388:io/source/connector/connector.cxx:93: Connector : couldn't connect to pipe \"pytest7c02e9aa-a0e4-11ed-95c0-382c4ac69b19\": 10\n  warn:io.connector:32388:32388:io/source/connector/connector.cxx:93: Connector : couldn't connect to pipe \"pytest7c02e9aa-a0e4-11ed-95c0-382c4ac69b19\": 10\n  warn:io.connector:32388:32388:io/source/connector/connector.cxx:93: Connector : couldn't connect to pipe \"pytest7c02e9aa-a0e4-11ed-95c0-382c4ac69b19\": 10\n  warn:io.connector:32388:32388:io/source/connector/connector.cxx:93: Connector : couldn't connect to pipe \"pytest7c02e9aa-a0e4-11ed-95c0-382c4ac69b19\": 10\n  warn:io.connector:32388:32388:io/source/connector/connector.cxx:93: Connector : couldn't connect to pipe \"pytest7c02e9aa-a0e4-11ed-95c0-382c4ac69b19\": 10\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:vcl:9528:9528:vcl/source/window/accessibility.cxx:451: AccessibleDescription already set\n  warn:sfx.appl:9528:9528:sfx2/source/appl/appserv.cxx:313: no parent for dialogs\n  warn:vcl:9528:9528:vcl/source/window/window.cxx:367: Window () not found in TaskPanelList\n  warn:vcl.schedule.deinit:9528:9528:vcl/source/app/scheduler.cxx:177: DeInit task: Timer a: 1 p: 1 drawinglayer ImpTimedRefDev destroy mpVirDev 180000ms (0x272c1b0)\n  warn:vcl.schedule.deinit:9528:9528:vcl/source/app/scheduler.cxx:177: DeInit task: Timer a: 1 p: 1 graphic::Manager maSwapOutTimer 10000ms (0x7f0eddf0ac20)\n  warn:vcl.schedule.deinit:9528:9528:vcl/source/app/scheduler.cxx:198: DeInit active tasks: 2 (ignored: 0)\n  OfficeConnection: connecting to: uno:pipe,name=pytest7c02e9aa-a0e4-11ed-95c0-382c4ac69b19;urp;StarOffice.ComponentContext\n  NoConnectException: sleeping...\n  NoConnectException: sleeping...\n  NoConnectException: sleeping...\n  NoConnectException: sleeping...\n  NoConnectException: sleeping...\n  NoConnectException: sleeping...\n  NoConnectException: sleeping...\n  NoConnectException: sleeping...\n  ['OnNew']\n  OnCreate\n  ['OnNew']\n  OnStorageChanged\n  ['OnNew']\n  OnTitleChanged\n  ['OnNew']\n  OnFocus\n  ['OnNew']\n  OnViewCreated\n  ['OnNew']\n  OnPageCountChange\n  ['OnNew']\n  OnLayoutFinished\n  ['DialogExecute']\n  DialogClosed\n  ['OnNew']\n  DialogClosed\n  ['DialogExecute']\n  OnModeChanged\n  ['OnNew']\n  OnModeChanged\n  ['OnNew']\n  DialogExecute\n  ['DialogClosed']\n  OnModeChanged\n  ['DialogExecute']\n  OnModeChanged\n  ['OnNew']\n  OnModeChanged\n  ['DialogExecute']\n  DialogClosed\n  ['OnNew']\n  DialogClosed\n  ['OnNew']\n  OnTitleChanged\n  ['OnNew']\n  OnModifyChanged\n  ['OnNew']\n  OnLayoutFinished\n  ['DialogExecute']\n  OnPrepareViewClosing\n  ['OnNew']\n  OnPrepareViewClosing\n  ['DialogExecute']\n  OnPrepareUnload\n  ['OnNew']\n  OnPrepareUnload\n  ['DialogExecute']\n  OnModeChanged\n  ['OnNew']\n  OnModeChanged\n  ['OnNew']\n  DialogExecute\n  ['DialogExecute']\n  OnModeChanged\n  ['DialogExecute']\n  OnModeChanged\n  ['OnNew']\n  OnModeChanged\n  ['DialogExecute']\n  DialogClosed\n  ['DialogExecute']\n  DialogClosed\n  ['OnNew']\n  DialogClosed\n  ['DialogExecute']\n  OnModeChanged\n  ['DialogExecute']\n  OnModeChanged\n  ['OnNew']\n  OnModeChanged\n  ['OnNew']\n  DialogExecute\n  ['DialogExecute']\n  OnModeChanged\n  ['DialogExecute']\n  OnModeChanged\n  ['DialogExecute']\n  OnModeChanged\n  ['OnNew']\n  OnModeChanged\n  ['DialogExecute']\n  DialogClosed\n  ['DialogExecute']\n  DialogClosed\n  ['DialogExecute']\n  DialogClosed\n  ['OnNew']\n  DialogClosed\n  ['DialogExecute']\n  OnModeChanged\n  ['DialogExecute']\n  OnModeChanged\n  ['DialogExecute']\n  OnModeChanged\n  ['OnNew']\n  OnModeChanged\n  ['OnNew']\n  DialogExecute\n  ['DialogClosed']\n  OnModeChanged\n  ['DialogExecute']\n  OnModeChanged\n  ['DialogExecute']\n  OnModeChanged\n  ['DialogExecute']\n  OnModeChanged\n  ['OnNew']\n  OnModeChanged\n  ['DialogExecute']\n  DialogClosed\n  ['DialogExecute']\n  DialogClosed\n  ['DialogExecute']\n  DialogClosed\n  ['OnNew']\n  DialogClosed\n  ['DialogClosed']\n  OnSaveAs\n  ['DialogExecute']\n  OnSaveAs\n  ['DialogExecute']\n  OnSaveAs\n  ['DialogExecute']\n  OnSaveAs\n  ['OnNew']\n  OnSaveAs\n  ['OnNew']\n  OnTitleChanged\n  ['OnNew']\n  OnModifyChanged\n  ['OnNew']\n  OnStorageChanged\n  ['OnNew']\n  OnTitleChanged\n  ['OnNew']\n  OnModeChanged\n  ['OnNew']\n  OnSaveAsDone\n  ['OnNew']\n  OnViewClosed\n  ['OnNew']\n  OnUnload\n  ['OnNew']\n  OnUnfocus\n  Execution time for edit_file_properties_before_saving.edit_file_properties_before_saving.test_tdf119206: 38.901\n  close\n  tearDown: calling terminate()...\n  ...done\n  ERROR\n\nand then\n\n  ======================================================================\n  ERROR: test_tdf119206 (edit_file_properties_before_saving.edit_file_properties_before_saving)\n  ----------------------------------------------------------------------\n  Traceback (most recent call last):\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/sw/qa/uitest/writer_tests6/edit_file_properties_before_saving.py\", line 93, in test_tdf119206\n      self.assertEqual(\"true\", get_state_as_dict(xReadOnly)['Selected'])\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/instdir/program/python-core-3.8.16/lib/contextlib.py\", line 120, in __exit__\n      next(self.gen)\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/uitest/uitest/test.py\", line 195, in create_doc_in_start_center\n      self.close_doc()\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/uitest/uitest/test.py\", line 218, in close_doc\n      component.dispose()\n  uitest.test.com.sun.star.lang.DisposedException: at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/sfx2/source/doc/sfxbasemodel.cxx:2988\n  \n  ----------------------------------------------------------------------\n  Ran 20 tests in 736.776s\n  \n  FAILED (errors=1)\n  Tests run: 20\n  Tests failed: 0\n  Tests errors: 1\n  Tests skipped: 0", "timestamp": "2023-01-31 07:38:02.000000000"}]}
{"thread_id": "2a7b0760_a3b8a686", "url": "https://gerrit.libreoffice.org/#/c/core/+/124654/5/sw/qa/uitest/writer_tests6/edit_file_properties_before_saving.py@91", "comments": [{"message": "Is there a race between saving the file with the code above and then opening it here?  At least <https://ci.libreoffice.org//job/lo_tb_master_linux_dbg/36725/> was killed due to timeout, with UITest_writer_tests6 apparently deadlocked with the python.bin process on this line and the soffice.bin process showing an interaction dialog via UUIInteractionHelper::handleErrorHandlerRequest from (and notice rMessage=\"an error occurred during file opening\" in frame #7)\n\n  #3  0x00002b39e4948bcb in UUIInteractionHelper::handleRequest(com::sun::star::uno::Reference<com::sun::star::task::XInteractionRequest> const&) (this=0x381c040, rRequest=uno::Reference to (ucbhelper::SimpleIOErrorRequest *) 0x375ed08) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/uui/source/iahndl.cxx:169\n  #4  0x00002b39e498088e in (anonymous namespace)::UUIInteractionHandler::handle(com::sun::star::uno::Reference<com::sun::star::task::XInteractionRequest> const&) (this=0x30dee40, rRequest=uno::Reference to (ucbhelper::SimpleIOErrorRequest *) 0x375ed08) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/uui/source/interactionhandler.cxx:196\n  #5  0x00002b39cafe6d65 in ucbhelper::InterceptedInteraction::impl_handleDefault(com::sun::star::uno::Reference<com::sun::star::task::XInteractionRequest> const&) (this=0x38e53c0, xRequest=uno::Reference to (ucbhelper::SimpleIOErrorRequest *) 0x375ed08) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/interceptedinteraction.cxx:78\n  #6  0x00002b39cafe6ce9 in ucbhelper::InterceptedInteraction::handle(com::sun::star::uno::Reference<com::sun::star::task::XInteractionRequest> const&) (this=0x38e53c0, xRequest=uno::Reference to (ucbhelper::SimpleIOErrorRequest *) 0x375ed08) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/interceptedinteraction.cxx:64\n  #7  0x00002b39caff80d3 in ucbhelper::cancelCommandExecution(com::sun::star::ucb::IOErrorCode, com::sun::star::uno::Sequence<com::sun::star::uno::Any> const&, com::sun::star::uno::Reference<com::sun::star::ucb::XCommandEnvironment> const&, rtl::OUString const&, com::sun::star::uno::Reference<com::sun::star::ucb::XCommandProcessor> const&) (eError=com::sun::star::ucb::IOErrorCode_NOT_EXISTING, rArgs=uno::Sequence of length 2 = {...}, xEnv=uno::Reference to (ucbhelper::CommandEnvironment *) 0x38e57a8, rMessage=\"an error occurred during file opening\", xContext=uno::Reference to (fileaccess::BaseContent *) 0x386da38) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/provider/cancelcommandexecution.cxx:92\n  #8  0x00002b39e404eb16 in fileaccess::throw_handler(int, int, com::sun::star::uno::Reference<com::sun::star::ucb::XCommandEnvironment> const&, rtl::OUString const&, fileaccess::BaseContent*, bool) (errorCode=12, minorCode=2, xEnv=uno::Reference to (ucbhelper::CommandEnvironment *) 0x38e57a8, aUncPath=\"file:///home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/tempdir/tmp7m3_475h/tdf119206-temp.odt\", pContent=0x386da00, isHandled=false) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucb/source/ucp/file/filglob.cxx:363\n  #9  0x00002b39e407cd16 in fileaccess::TaskManager::endTask(int, rtl::OUString const&, fileaccess::BaseContent*) (this=0x22b8c90, CommandId=395, aUncPath=\"file:///home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/tempdir/tmp7m3_475h/tdf119206-temp.odt\", pContent=0x386da00) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucb/source/ucp/file/filtask.cxx:403\n  #10 0x00002b39e401c21f in fileaccess::BaseContent::endTask(int) (this=0x386da00, CommandId=395) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucb/source/ucp/file/bc.cxx:1131\n  #11 0x00002b39e40183af in fileaccess::BaseContent::execute(com::sun::star::ucb::Command const&, int, com::sun::star::uno::Reference<com::sun::star::ucb::XCommandEnvironment> const&) (this=0x386da00, aCommand=..., CommandId=395, Environment=uno::Reference to (ucbhelper::CommandEnvironment *) 0x38e57a8) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucb/source/ucp/file/bc.cxx:370\n  #12 0x00002b39cafdb656 in ucbhelper::Content_Impl::executeCommand(com::sun::star::ucb::Command const&) (this=0x381b5e0, rCommand=...) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/content.cxx:1255\n  #13 0x00002b39cafd7c2c in ucbhelper::Content::getPropertyValuesInterface(com::sun::star::uno::Sequence<rtl::OUString> const&) (this=0x2b39e8a0c5b0, rPropertyNames=uno::Sequence of length 1 = {...}) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/content.cxx:496\n  #14 0x00002b39cafd798d in ucbhelper::Content::getPropertyValues(com::sun::star::uno::Sequence<rtl::OUString> const&) (this=0x2b39e8a0c5b0, rPropertyNames=uno::Sequence of length 1 = {...}) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/content.cxx:455\n  #15 0x00002b39cafd771f in ucbhelper::Content::getPropertyValue(rtl::OUString const&) (this=0x2b39e8a0c5b0, rPropertyName=\"IsDocument\") at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/content.cxx:434\n  #16 0x00002b39cafda6bb in ucbhelper::Content::isDocument() (this=0x2b39e8a0c5b0) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/content.cxx:1026\n  #17 0x00002b39cafd8a9c in ucbhelper::Content::openStream() (this=0x2b39e8a0c5b0) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/ucbhelper/source/client/content.cxx:689\n  #18 0x00002b39cb26629f in utl::MediaDescriptor::impl_openStreamWithURL(rtl::OUString const&, bool) (this=0x2b39e8a0cfe0, sURL=\"file:///home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/tempdir/tmp7m3_475h/tdf119206-temp.odt\", bLockFile=true) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/unotools/source/misc/mediadescriptor.cxx:469\n  #19 0x00002b39cb264d28 in utl::MediaDescriptor::impl_addInputStream(bool) (this=0x2b39e8a0cfe0, bLockFile=true) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/unotools/source/misc/mediadescriptor.cxx:260\n  #20 0x00002b39cb26491d in utl::MediaDescriptor::addInputStreamOwnLock() (this=0x2b39e8a0cfe0) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/unotools/source/misc/mediadescriptor.cxx:229\n  #21 0x00002b39e5140181 in filter::config::TypeDetection::impl_openStream(utl::MediaDescriptor&) (this=0x3786ca0, rDescriptor=...) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/filter/source/config/cache/typedetection.cxx:1114\n  #22 0x00002b39e513f97d in filter::config::TypeDetection::impl_askDetectService(rtl::OUString const&, utl::MediaDescriptor&) (this=0x3786ca0, sDetectService=\"com.sun.star.comp.filters.StorageFilterDetect\", rDescriptor=...) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/filter/source/config/cache/typedetection.cxx:967\n  #23 0x00002b39e513f54a in filter::config::TypeDetection::impl_detectTypeFlatAndDeep(utl::MediaDescriptor&, std::__debug::vector<filter::config::FlatDetectionInfo, std::allocator<filter::config::FlatDetectionInfo> > const&, bool, rtl::OUString&) (this=0x3786ca0, rDescriptor=..., lFlatTypes=std::__debug::vector of length 173, capacity 256 = {...}, bAllowDeep=true, rLastChance=\"\") at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/filter/source/config/cache/typedetection.cxx:920\n  #24 0x00002b39e513c429 in filter::config::TypeDetection::queryTypeByDescriptor(com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue>&, unsigned char) (this=0x3786ca0, lDescriptor=uno::Sequence of length 5 = {...}, bAllowDeep=1 '\\001') at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/filter/source/config/cache/typedetection.cxx:427\n  #25 0x00002b39c61812af in framework::LoadEnv::impl_detectTypeAndFilter() (this=0x2b39e8a0d690) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/framework/source/loadenv/loadenv.cxx:758\n  #26 0x00002b39c617f5d9 in framework::LoadEnv::start() (this=0x2b39e8a0d690) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/framework/source/loadenv/loadenv.cxx:378\n  #27 0x00002b39c617ec62 in framework::LoadEnv::startLoading(rtl::OUString const&, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&, com::sun::star::uno::Reference<com::sun::star::frame::XFrame> const&, rtl::OUString const&, int, LoadEnvFeatures) (this=0x2b39e8a0d690, sURL=\"file:///home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/tempdir/tmp7m3_475h/tdf119206-temp.odt\", lMediaDescriptor=empty uno::Sequence, xBaseFrame=uno::Reference to (framework::Desktop *) 0x2290b28, sTarget=\"_default\", nSearchFlags=0, eFeature=WorkWithUI) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/framework/source/loadenv/loadenv.cxx:300\n  #28 0x00002b39c617d89b in framework::LoadEnv::loadComponentFromURL(com::sun::star::uno::Reference<com::sun::star::frame::XComponentLoader> const&, com::sun::star::uno::Reference<com::sun::star::uno::XComponentContext> const&, rtl::OUString const&, rtl::OUString const&, int, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&) (xLoader=uno::Reference to (framework::Desktop *) 0x2290b38, xContext=warning: RTTI symbol not found for class 'cppu::(anonymous namespace)::ComponentContext'\n  warning: RTTI symbol not found for class 'cppu::(anonymous namespace)::ComponentContext'\n  uno::Reference to (com::sun::star::uno::XInterface *) 0x13ad7d0, sURL=\"file:///home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/tempdir/tmp7m3_475h/tdf119206-temp.odt\", sTarget=\"_default\", nSearchFlags=0, lArgs=empty uno::Sequence) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/framework/source/loadenv/loadenv.cxx:168\n  #29 0x00002b39c61a5876 in framework::Desktop::loadComponentFromURL(rtl::OUString const&, rtl::OUString const&, int, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&) (this=0x2290ac0, sURL=\"file:///home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/tempdir/tmp7m3_475h/tdf119206-temp.odt\", sTargetFrameName=\"_default\", nSearchFlags=0, lArguments=empty uno::Sequence) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/framework/source/services/desktop.cxx:594\n  #30 0x00002b39dbe73404 in gcc3::callVirtualMethod(void*, unsigned int, void*, _typelib_TypeDescriptionReference*, bool, unsigned long*, unsigned int, unsigned long*, double*) (pThis=0x2290b38, nVtableIndex=3, pRegisterReturn=0x2b39e8a0dca0, pReturnTypeRef=0x14e5830, bSimpleReturn=false, pStack=0x2b39e8a0dcc0, nStack=0, pGPR=0x2b39e8a0de50, pFPR=0x2b39e8a0de80) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/bridges/source/cpp_uno/gcc3_linux_x86-64/callvirtualmethod.cxx:133\n  #31 0x00002b39dbe7204d in cpp_call(bridges::cpp_uno::shared::UnoInterfaceProxy*, bridges::cpp_uno::shared::VtableSlot, typelib_TypeDescriptionReference*, sal_Int32, typelib_MethodParameter*, void*, void**, uno_Any**) (pThis=0x30dd9b0, aVtableSlot=..., pReturnTypeRef=0x14e5830, nParams=4, pParams=0x3660740, pUnoReturn=0x391f9c0, pUnoArgs=0x3118410, ppUnoExc=0x2b39e8a0dff0) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/bridges/source/cpp_uno/gcc3_linux_x86-64/uno2cpp.cxx:233\n  #32 0x00002b39dbe72af8 in bridges::cpp_uno::shared::unoInterfaceProxyDispatch(uno_Interface*, typelib_TypeDescription const*, void*, void**, uno_Any**) (pUnoI=0x30dd9b0, pMemberDescr=0x3639b10, pReturn=0x391f9c0, pArgs=0x3118410, ppException=0x2b39e8a0dff0) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/bridges/source/cpp_uno/gcc3_linux_x86-64/uno2cpp.cxx:413\n  #33 0x00002b39dc8ae4c6 in binaryurp::IncomingRequest::execute_throw(binaryurp::BinaryAny*, std::__debug::vector<binaryurp::BinaryAny, std::allocator<binaryurp::BinaryAny> >*) const (this=0x24027f0, returnValue=0x2b39e8a0e3a0, outArguments=0x2b39e8a0e440) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/binaryurp/source/incomingrequest.cxx:235\n  #34 0x00002b39dc8ad164 in binaryurp::IncomingRequest::execute() const (this=0x24027f0) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/binaryurp/source/incomingrequest.cxx:78\n  #35 0x00002b39dc8d11f7 in binaryurp::(anonymous namespace)::request(void*) (pThreadSpecificData=0x24027f0) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/binaryurp/source/reader.cxx:85\n  #36 0x00002b39c5555f29 in cppu_threadpool::JobQueue::enter(void const*, bool) (this=0x386cb50, nDisposeId=0x27db7c0, bReturnWhenNoJob=true) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/cppu/source/threadpool/jobqueue.cxx:100\n  #37 0x00002b39c555bd6b in cppu_threadpool::ORequestThread::run() (this=0x27db7c0) at /home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/cppu/source/threadpool/thread.cxx:164", "timestamp": "2022-02-17 12:54:54.000000000"}, {"message": "I believe https://gerrit.libreoffice.org/c/core/+/130491 should fix it", "timestamp": "2022-02-24 10:32:47.000000000"}, {"message": "but also note what I wrote on #libreoffice-dev earlier today: \"<https://ci.libreoffice.org//job/lo_tb_master_linux_dbg/36848/> now failed similarly at sw/qa/uitest/writer_tests6/save_readonly_with_password.py:50, so there might be an issue with the pattern of saving a file though a Save dialog and then immediately opening it with load_file, without some intermediate waiting/process-to-idle...\"", "timestamp": "2022-02-24 10:39:55.000000000"}, {"message": "ok, will add this wait to every test then, just to be sure", "timestamp": "2022-02-24 10:51:35.000000000"}, {"message": "Now patch in https://gerrit.libreoffice.org/c/core/+/130530/1", "timestamp": "2022-02-25 12:31:25.000000000"}]}
{"thread_id": "6b4d98fb_7f0169b9", "url": "https://gerrit.libreoffice.org/#/c/core/+/139933/1/sc/qa/uitest/calc_tests8/navigator.py@144", "comments": [{"message": "probably it's better to use\n\nself.ui_test.wait_until_property_is_updated(xColumn, \"Value\", \"2\")", "timestamp": "2022-09-14 14:15:20.000000000"}]}
{"thread_id": "dc8888dd_7e9dc424", "url": "https://gerrit.libreoffice.org/#/c/core/+/139933/5/sc/qa/uitest/calc_tests8/navigator.py@145", "comments": [{"message": "<https://ci.libreoffice.org//job/lo_ubsan/2637/> apparently hangs here,\n\n  kill-wrapper,19029 /home/tdf/lode/bin/tb_slave_wrapper --branch=MASTER --os=Linux --real --name=Jenkins_Linux_Ubsan --env=lode_ubsan_env --distro-config=Linux_ubsan_master.conf --target='check screenshot' --clean 4800\n  [...]\n        |               `-python.bin,17603 /home/tdf/lode/jenkins/workspace/lo_ubsan/uitest/test_main.py --soffice=path:/home/tdf/lode/jenkins/workspace/lo_ubsan/instdir/program/soffice --userdir=file:///home/tdf/lode/jenkins/workspace/lo_ubsan/workdir/UITest/calc_tests8/user --dir=/home/tdf/lode/jenkins/workspace/lo_ubsan/sc/qa/uitest/calc_tests8/\n        |                   |-oosplash,20866 --accept=pipe,name=pytest036cb782-8bd6-11ed-930a-54a050874899;urp -env:UserInstallation=file:///home/tdf/lode/jenkins/workspace/lo_ubsan/workdir/UITest/calc_tests8/user --quickstart=no --nofirststartwizard --norestore --nologo\n        |                   |   |-soffice.bin,20916 -env:UserInstallation=file:///home/tdf/lode/jenkins/workspace/lo_ubsan/workdir/UITest/calc_tests8/user --accept=pipe,name=pytest036cb782-8bd6-11ed-930a-54a050874899;urp --quickstart=no --nofirststartwizard --norestore --nologo\n  [...]\n  Thread 1 (Thread 0x7f16ed7bc7c0 (LWP 17603)):\n  Traceback (most recent call first):\n    <built-in method sleep of module object at remote 0x60c000090c70>\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/uitest/uitest/test.py\", line 66, in wait_until_property_is_updated\n      time.sleep(DEFAULT_SLEEP)\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/sc/qa/uitest/calc_tests8/navigator.py\", line 145, in test_tdf134390\n      self.ui_test.wait_until_property_is_updated(xRow, \"Value\", \"2\")\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/instdir/program/python-core-3.8.16/lib/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/instdir/program/python-core-3.8.16/lib/unittest/case.py\", line 1700, in run\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/instdir/program/python-core-3.8.16/lib/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/instdir/program/python-core-3.8.16/lib/unittest/suite.py\", line 378, in run\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/instdir/program/python-core-3.8.16/lib/unittest/suite.py\", line 84, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/instdir/program/python-core-3.8.16/lib/unittest/runner.py\", line 432, in run\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/uitest/test_main.py\", line 133, in <module>\n      result = unittest.TextTestRunner(stream=sys.stdout, verbosity=2).run(test_suite)\n\nand soffice.bin waiting at `desktop::Desktop::Main` -> `SvpSalInstance::ImplYield`.", "timestamp": "2023-01-04 07:10:57.000000000"}]}
{"thread_id": "cc64d9c9_8f272612", "url": "https://gerrit.libreoffice.org/#/c/core/+/144963/2/svl/source/numbers/zforlist.cxx@3187", "comments": [{"message": "This is unnecessary overhead. If you take a look at the implementation of SvNumberformat::GetNatNumXml() and you want to use only Spellout anyway, that's only the rNum.GetParams() there. The conversion to XmlAttributes for any NatNum# (not only NatNum12) is unnecessary.\n\nRather only obtain the rNum.GetParams() for if (rNum.IsSet() && rNum.GetNatNum() == css::i18n::NativeNumberMode::NATNUM12).\n\nAn additional caveat may be that this function here may generate a format code for a different locale (LanguageType eLnge) than the passed nIndex/pFormat was in, for that case likely the existing spellout may not match the new locale, at least if it contains some currency related spellout. This can be ignored for the actual bug case that does not change locales, but at least worth noting.", "timestamp": "2023-01-03 17:13:00.000000000"}, {"message": "Caveat about locale should be kept", "timestamp": "2023-01-05 07:38:56.000000000"}]}
{"thread_id": "52a927b7_ba32bcda", "url": "https://gerrit.libreoffice.org/#/c/core/+/144963/2/svl/source/numbers/zforlist.cxx@3362", "comments": [{"message": "This is wrong. Here the 2nd subformat code for negative values is added, but nNatNum12Length is at the start of the first subformat. Just leave it as is.", "timestamp": "2023-01-03 17:13:00.000000000"}, {"message": "I do not agree. If we leave it as is, we may get a format:\n[NatNum12 cardinal]0;[RED]-[NatNum12 cardinal]0\nwhich is invalid. Parenthesis or minus sign must be inserted between NatNum modifier and format", "timestamp": "2023-01-05 07:38:56.000000000"}, {"message": "Right.. I overlooked that sString is duplicated to sTmpStr and then used as the current second subformat string.. however, see my new comment at patchset 5.", "timestamp": "2023-01-05 19:22:07.000000000"}]}
{"thread_id": "0438f48b_14af9d18", "url": "https://gerrit.libreoffice.org/#/c/core/+/144963/2/svl/source/numbers/zforlist.cxx@3368", "comments": [{"message": "Ditto.", "timestamp": "2023-01-03 17:13:00.000000000"}, {"message": "Idem", "timestamp": "2023-01-05 07:38:56.000000000"}]}
{"thread_id": "05588943_be874efd", "url": "https://gerrit.libreoffice.org/#/c/core/+/144963/3/svl/source/numbers/zforlist.cxx@3189", "comments": [{"message": "Caveat, pFormat may be nullptr.", "timestamp": "2023-01-04 16:54:47.000000000"}, {"message": "New implementation check pFormat", "timestamp": "2023-01-05 07:38:56.000000000"}]}
{"thread_id": "97cb7f5e_82600f43", "url": "https://gerrit.libreoffice.org/#/c/core/+/144963/3/svl/source/numbers/zforlist.cxx@3192", "comments": [{"message": "I think we shouldn't restrict this to NatNum12, but add any existing [NatNum#] modifier (for which only NatNum12 has parameters as handled by NatNumTakesParameters() in svl/source/numbers/zformat.cxx). The implementation should better go to class SvNumberformat instead of handing out implementation details here, so a completed string can be obtained from that, like\n\n  OUString SvNumberformat::GetNatNumModifierString(sal_uInt16)\n\nthat would return empty \"\" or \"[NatNum1]\" or [NatNum12 ...]\" ...", "timestamp": "2023-01-04 16:54:47.000000000"}, {"message": "That sounds great to me. It is now implemented.", "timestamp": "2023-01-05 07:38:56.000000000"}]}
{"thread_id": "3172eeaf_790ebc07", "url": "https://gerrit.libreoffice.org/#/c/core/+/144963/5/svl/source/numbers/zforlist.cxx@3262", "comments": [{"message": "The NatNum modifier was obtained for the first subformat but is unconditionally duplicated here, which is not correct.\n\nTo support individual NatNum modifiers also for subsequent or at least the second subformat, they must be separately obtained and inserted. Otherwise omitted if not present.\n\nFurthermore, NfCurrencyEntry::CompletePositiveFormatString() and NfCurrencyEntry::CompleteNegativeFormatString() operate by inserting at position 0 or appending, so the strings passed must not contain any modifier.\n\nSo probably best to obtain both NatNumModifierString separately and insert first to front only after the string was completed, same for the second here and append before the\n\n    sString.append(sNegStr);", "timestamp": "2023-01-05 19:22:07.000000000"}, {"message": "Done", "timestamp": "2023-01-07 08:46:58.000000000"}]}
{"thread_id": "7aa2c925_07c5b641", "url": "https://gerrit.libreoffice.org/#/c/core/+/144963/5/svl/source/numbers/zforlist.cxx@3340", "comments": [{"message": "Same as for SvNumFormatType::CURRENCY, treat NatNum modifiers individually.", "timestamp": "2023-01-05 19:22:07.000000000"}, {"message": "Done", "timestamp": "2023-01-07 08:46:58.000000000"}]}
{"thread_id": "95f96cfe_aee81c77", "url": "https://gerrit.libreoffice.org/#/c/core/+/144963/7/svl/source/numbers/zforlist.cxx@3239", "comments": [{"message": "Why? If the original format has a NatNum in its first subformat but not in the second, why duplicate that for second? It might even be on purpose that it doesn't.", "timestamp": "2023-01-07 17:19:38.000000000"}, {"message": "The NatNum modifier of positive format is forced *only* if there is no negative format at all. If there is already a negative format, then the negative NatNum modifier is used (which can be none).", "timestamp": "2023-01-07 19:42:09.000000000"}, {"message": "Ack", "timestamp": "2023-01-11 15:33:35.000000000"}]}
{"thread_id": "9b9b6165_ea8a5c74", "url": "https://gerrit.libreoffice.org/#/c/core/+/144963/8/svl/source/numbers/zforlist.cxx@3261", "comments": [{"message": "There's a problem with these currency formats if they contain NatNum12 like\n\n  [NatNum12 title CAD]0\n\n(for en-CA locale) and then \"Negative numbers red\" is checked that leads to\n\n  [NatNum12 title CAD]$0;[RED][NatNum12 title CAD]-$0\n\neffectively displaying \"-$1$1\" for -1 (which is wrong anyway given the format code), though it displays \"$1\" for 1.\n\nPreviously it was\n\n  $0;[RED]-$0\n\nbut that's also wrong as it just inserts the currency symbol, which may or may not work (it does for $ but would not if that contained a format code keyword/character), but at least it displayed -$1 if it worked at all.\n\nNot adhoc sure how to resolve this.", "timestamp": "2023-01-11 15:33:35.000000000"}, {"message": "Probably there should be a check whether NatNum12 is used (which would be the reason for the format being categorized as Currency), and if yes omit all completion with GetNewCurrencySymbolString() or the old style GetCompatibilityCurrency() and just use sString/sNegStr as is and continue if IsRed and prepending sNegNatNumModifier.", "timestamp": "2023-01-11 15:43:36.000000000"}, {"message": "OK. I separated positive and negative formats", "timestamp": "2023-01-14 10:37:08.000000000"}]}
{"thread_id": "e04f9ace_1e8e3202", "url": "https://gerrit.libreoffice.org/#/c/core/+/144963/5/svl/source/numbers/zformat.cxx@5774", "comments": [{"message": "I'd change the head of the function to\n\n    if (nNumFor > 3)\n        return \"\";\n    const SvNumberNatNum& rNum = NumFor[nNumFor].GetNatNum();\n    if (!rNum.IsSet())\n        return \"\";\n    OUStringBuffer sNatNumModifier\n    ...\n\nThis way for the usual case of no NatNum modifier the construction of OUStringBuffer and its makeStringAndClear() don't need to be executed.", "timestamp": "2023-01-05 19:22:07.000000000"}, {"message": "Done", "timestamp": "2023-01-07 08:46:58.000000000"}]}
{"thread_id": "23419b3e_e09e6a70", "url": "https://gerrit.libreoffice.org/#/c/core/+/146073/3/oox/source/export/shapes.cxx@2605", "comments": [{"message": "It's possible to remove this extra definition.", "timestamp": "2023-01-30 11:25:24.000000000"}]}
{"thread_id": "18f80b7f_8692a5d0", "url": "https://gerrit.libreoffice.org/#/c/core/+/145750/4/sw/source/uibase/docvw/AnnotationWin.cxx@257", "comments": [{"message": "Will this incremented counter work if you create 2 documents in parallel then you copy&paste their content together? I thought Word generates a 32bit unsigned random number here (stored as hex), so these ids collide less.", "timestamp": "2023-01-27 07:40:24.000000000"}, {"message": "Good point, done", "timestamp": "2023-01-27 21:38:10.000000000"}]}
{"thread_id": "45017f6d_e584179c", "url": "https://gerrit.libreoffice.org/#/c/core/+/146172/1/sw/source/filter/xml/xmlfmte.cxx@223", "comments": [{"message": "dark<->Text and light<->Background. Comments are wrong.", "timestamp": "2023-01-26 13:20:25.000000000"}, {"message": "It's Miklos's fault .. I just copied the code \ud83d\ude0a", "timestamp": "2023-01-26 13:40:32.000000000"}, {"message": "Done", "timestamp": "2023-01-27 00:20:29.000000000"}]}
{"thread_id": "c804c30a_ca47d01a", "url": "https://gerrit.libreoffice.org/#/c/core/+/146242/1/framework/source/jobs/jobexecutor.cxx@301", "comments": [{"message": "Noting that JobData acquires the SolarMutex all over the place, but IMO it really does not need to (possibly it needs it's own mutex).\n\nWhich means that nothing in this loop should actually need the SolarMutex,\nsince Job::execute handles SolarMutex locking itself.\n\nHTH", "timestamp": "2023-01-27 10:01:45.000000000"}, {"message": "Interesting find, but somewhat orthogonal to this trivial and obviously safe change, which should be of value on its own.  So feel free to create a different change addressing your findings.", "timestamp": "2023-01-27 12:51:27.000000000"}, {"message": "It was a case of maybe this information would be useful to your other problem.\n\nImplemented my idea with https://gerrit.libreoffice.org/c/core/+/146253", "timestamp": "2023-01-27 13:13:46.000000000"}]}
{"thread_id": "1f9909e6_d819f9b2", "url": "https://gerrit.libreoffice.org/#/c/core/+/146006/2/sfx2/source/doc/guisaveas.cxx@679", "comments": [{"message": "Strings are fragile, we should use some enum instead.", "timestamp": "2023-01-25 12:23:21.000000000"}]}
{"thread_id": "a2b614ef_652bfd19", "url": "https://gerrit.libreoffice.org/#/c/core/+/146163/2/sd/qa/unit/uiimpress.cxx@1098", "comments": [{"message": "Note that every time when you dereference the result unconditionally, you must use UNO_QUERY_THROW. The UNO_QUERY is logically wrong, used only when we do not know if the object actually implements it, and will act depending on the result is empty or not.", "timestamp": "2023-01-26 10:46:55.000000000"}]}
{"thread_id": "bc2b94cb_c757dd3a", "url": "https://gerrit.libreoffice.org/#/c/core/+/77367/6/sw/source/core/text/porlay.cxx@322", "comments": [{"message": "Why is it done here? This isn't related to the stripping of the character at line break at all. This is related to #i3952#, and Word counts SIX-PER-EM SPACE height, unlike FOUR-PER-EM SPACE.\n\nSee tdf#153136.\nI'm going to remove this character from the condition again (and add correct ones); please tell if there is a real need for it here (in which case, you need to find a proper place for the change, not here).", "timestamp": "2023-01-21 09:11:41.000000000"}, {"message": "If I right remember, I wanted to keep the layout at the end of the lines, but it's possible that I made a mistake. Mike, many thanks for the fix and your feedback!", "timestamp": "2023-01-24 18:10:18.000000000"}]}
{"thread_id": "9ba65806_4272a355", "url": "https://gerrit.libreoffice.org/#/c/core/+/141079/2/sw/source/core/table/swnewtable.cxx@2179", "comments": [{"message": "We have a hit on this assert in crashtesting. To reproduce:\n\nwget https://bz.apache.org/ooo/attachment.cgi?id=14318 -O ~/ooo27428-1.sxw\n./instdir/program/soffice --headless --convert-to pdf ~/ooo27428-1.sxw", "timestamp": "2022-10-11 08:25:56.000000000"}, {"message": "these are all fixed now, no appearance of these in crashtesting anymore", "timestamp": "2023-01-23 17:27:32.000000000"}]}
{"thread_id": "77a1a163_a96b8dc4", "url": "https://gerrit.libreoffice.org/#/c/core/+/139001/5/basic/source/runtime/methods.cxx@979", "comments": [{"message": "Please put a new line after `return`.", "timestamp": "2023-01-20 12:29:03.000000000"}, {"message": "Done", "timestamp": "2023-01-20 13:11:34.000000000"}]}
{"thread_id": "29307e4f_f1333c43", "url": "https://gerrit.libreoffice.org/#/c/core/+/139001/5/basic/source/runtime/methods.cxx@994", "comments": [{"message": "Also here.", "timestamp": "2023-01-20 12:29:03.000000000"}, {"message": "Done", "timestamp": "2023-01-20 13:11:34.000000000"}]}
{"thread_id": "cbd79535_713e2f9e", "url": "https://gerrit.libreoffice.org/#/c/core/+/139001/5/basic/source/runtime/methods.cxx@1008", "comments": [{"message": "And also here.", "timestamp": "2023-01-20 12:29:03.000000000"}, {"message": "Done", "timestamp": "2023-01-20 13:11:34.000000000"}]}
{"thread_id": "99eb7b07_e0b88fb5", "url": "https://gerrit.libreoffice.org/#/c/core/+/145425/10/svx/source/svdraw/svdmodel.cxx@1785", "comments": [{"message": "Nit: you could avoid this when the old vs new value is the same, that would help performance with ODF docs where this is off, I believe.", "timestamp": "2023-01-20 07:56:27.000000000"}, {"message": "you are right! sorry i will make 1 more 'if' for it.", "timestamp": "2023-01-20 13:38:33.000000000"}]}
{"thread_id": "caa0b0e8_288fd9ea", "url": "https://gerrit.libreoffice.org/#/c/core/+/145817/2/svx/source/sidebar/area/AreaPropertyPanelBase.cxx@879", "comments": [{"message": "Interestingly, in desktop case, the control gets hidden by a call to mxLbFillAttr->set_visible in AreaPropertyPanelBase::FillStyleChanged. Doesn't it get called here? Why?", "timestamp": "2023-01-20 09:51:03.000000000"}]}
{"thread_id": "920d2f4e_6ccb9c1a", "url": "https://gerrit.libreoffice.org/#/c/core/+/145314/8/sw/source/core/fields/docufld.cxx@1919", "comments": [{"message": "OUString::number(m_nParentId, 16).toAsciiUpperCase()?", "timestamp": "2023-01-18 15:28:35.000000000"}, {"message": "Done", "timestamp": "2023-01-19 16:55:38.000000000"}]}
{"thread_id": "99ee0f27_aedd8aeb", "url": "https://gerrit.libreoffice.org/#/c/core/+/145314/8/sw/source/core/fields/docufld.cxx@1928", "comments": [{"message": "Same here, I believe these 4 lines can be collapsed into a single OUString::number() call if you use the hex ctor + toAsciiUpperCase()", "timestamp": "2023-01-18 15:28:35.000000000"}, {"message": "Done", "timestamp": "2023-01-19 16:55:38.000000000"}]}
{"thread_id": "30054a9f_932e12e9", "url": "https://gerrit.libreoffice.org/#/c/core/+/145314/8/sw/source/filter/ww8/docxattributeoutput.cxx@8809", "comments": [{"message": "Hm, this inner part is O(N^2), but let's worry about that once we see it as a cost in a perf profile.", "timestamp": "2023-01-18 15:28:35.000000000"}]}
{"thread_id": "2a1e038d_9078571d", "url": "https://gerrit.libreoffice.org/#/c/core/+/145314/8/sw/source/filter/ww8/docxattributeoutput.cxx@8887", "comments": [{"message": "Nit: it's useful to spell out types and not go via auto when you can decide.\n\nI think we mostly just have 3 contexts when we use auto (iterators, range-based for loops and when you cast and have the type spelled out in the same line anyway). It helps readability.", "timestamp": "2023-01-18 15:28:35.000000000"}]}
{"thread_id": "470d93c4_62c196b0", "url": "https://gerrit.libreoffice.org/#/c/core/+/145314/8/writerfilter/source/dmapper/DomainMapper_Impl.cxx@3830", "comments": [{"message": "The start of this file already has a 'using namespace ::com::sun::star;' statement, so you can go with just uno::Any().", "timestamp": "2023-01-18 15:28:35.000000000"}, {"message": "Done", "timestamp": "2023-01-19 16:55:38.000000000"}]}
{"thread_id": "1789f827_341d3197", "url": "https://gerrit.libreoffice.org/#/c/core/+/140985/4/sw/qa/uitest/writer_tests7/tdf135938.py@36", "comments": [{"message": "seen failing once at <https://ci.libreoffice.org//job/lo_tb_master_linux_dbg/41447/>,\n\n  ======================================================================\n  FAIL: test_tdf135938_cross_reference_update (tdf135938.tdf135938)\n  ----------------------------------------------------------------------\n  Traceback (most recent call last):\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/sw/qa/uitest/writer_tests7/tdf135938.py\", line 36, in test_tdf135938_cross_reference_update\n      self.assertEqual(get_state_as_dict(xTreeEntry)[\"Text\"], \"Insert Reference\")\n  AssertionError: 'Bookmarks' != 'Insert Reference'\n  - Bookmarks\n  + Insert Reference\n  \n  \n  ----------------------------------------------------------------------\n  Ran 41 tests in 760.917s\n  \n  FAILED (failures=1)\n  Tests run: 41\n  Tests failed: 1\n  Tests errors: 0\n  Tests skipped: 0", "timestamp": "2023-01-18 14:16:04.000000000"}, {"message": "Did it just fail once or many times?", "timestamp": "2023-01-18 16:59:18.000000000"}, {"message": "Otherwise I have to cycle to all the entries and check for the right entry, i.e., \"Insert reference\". What do you think?", "timestamp": "2023-01-18 17:01:59.000000000"}, {"message": "> Did it just fail once or many times?\n\nMust be a rather rare race condition.  Can't remember having seen it fail for any other build in the past.\n\n> Otherwise I have to cycle to all the entries and check for the right entry, i.e., \"Insert reference\". What do you think?\n\nNo idea.", "timestamp": "2023-01-19 10:15:31.000000000"}, {"message": "Will be addressed in https://gerrit.libreoffice.org/c/core/+/145816", "timestamp": "2023-01-19 15:05:05.000000000"}]}
{"thread_id": "d44b6637_75b75084", "url": "https://gerrit.libreoffice.org/#/c/core/+/145753/1/sw/source/core/crsr/bookmark.cxx@572", "comments": [{"message": "Missing error handling when GetParameters() returns nullptr.", "timestamp": "2023-01-19 07:18:22.000000000"}, {"message": "GetParameters() can't return nullptr", "timestamp": "2023-01-19 08:57:00.000000000"}, {"message": "Ah yes, I see. :-)", "timestamp": "2023-01-19 09:57:59.000000000"}]}
{"thread_id": "2fa53834_85c9fbc9", "url": "https://gerrit.libreoffice.org/#/c/core/+/145753/1/sw/source/core/crsr/bookmark.cxx@580", "comments": [{"message": "Same here, Current() may return nullptr.", "timestamp": "2023-01-19 07:18:22.000000000"}, {"message": "Done", "timestamp": "2023-01-19 08:57:00.000000000"}]}
{"thread_id": "51a74316_34e49567", "url": "https://gerrit.libreoffice.org/#/c/core/+/144854/1/filter/source/pdf/impdialog.cxx@1300", "comments": [{"message": "this is recurrent call, please notice that this lambda function is called when password dialog response is invoked", "timestamp": "2023-01-04 14:10:55.000000000"}, {"message": "this is probably not needed", "timestamp": "2023-01-04 14:13:01.000000000"}, {"message": "Done", "timestamp": "2023-01-17 12:13:42.000000000"}]}
{"thread_id": "0a2cc62a_bd83c21b", "url": "https://gerrit.libreoffice.org/#/c/core/+/144854/4/filter/source/pdf/impdialog.cxx@1279", "comments": [{"message": "missed this oops", "timestamp": "2023-01-17 12:09:25.000000000"}, {"message": "Done", "timestamp": "2023-01-17 12:13:42.000000000"}]}
{"thread_id": "82d94aeb_7e8c54d2", "url": "https://gerrit.libreoffice.org/#/c/core/+/144854/4/sfx2/source/dialog/passwd.cxx@68", "comments": [{"message": "I think aOKHdl is now executed before code below, but previously was executed after (after response was done). Is there any reason why we need that? can't we just execute that code in the lambda of runAsync?", "timestamp": "2023-01-17 11:29:00.000000000"}, {"message": "Good catch I'll move that after the base response.\n\nI put logic in OKHdl so lambda is only responsible for cleaning up after execution but if it makes it harder to follow the code I can it back into the lambda", "timestamp": "2023-01-17 12:09:25.000000000"}, {"message": "yes, please move it back. In current state the dialog has hidden functionality, which is obvious only after deep reading :)", "timestamp": "2023-01-17 14:56:23.000000000"}, {"message": "Done", "timestamp": "2023-01-17 17:57:53.000000000"}]}
{"thread_id": "cad8c366_27fb3ce7", "url": "https://gerrit.libreoffice.org/#/c/core/+/144854/2/vcl/jsdialog/enabled.cxx@100", "comments": [{"message": "maybe because it is a message dialog? then it goes through a bit different code path", "timestamp": "2023-01-09 14:40:36.000000000"}, {"message": "Done", "timestamp": "2023-01-17 12:13:42.000000000"}]}
{"thread_id": "666ccb01_611b791d", "url": "https://gerrit.libreoffice.org/#/c/core/+/142251/4/linguistic/source/gciterator.cxx@561", "comments": [{"message": "Wouldn't be better to replace this tricky hidden paragraph property with an UNO document-level property?", "timestamp": "2022-12-05 13:03:50.000000000"}, {"message": "Sorry, but my understanding of the code is not so deep, that I understand the difference.", "timestamp": "2022-12-06 22:34:38.000000000"}]}
{"thread_id": "cdcb1c92_da26088e", "url": "https://gerrit.libreoffice.org/#/c/core/+/141425/2/odk/examples/python/Text/BookmarkInsertion.py@63", "comments": [{"message": "In the Java example `odk/examples/java/Text/BookmarkInsertion.java`, we have exception handling. Can we also have exception handling here?", "timestamp": "2022-10-27 00:51:52.000000000"}, {"message": "Done", "timestamp": "2022-10-31 14:52:41.000000000"}]}
{"thread_id": "86eb4e44_971dcf2f", "url": "https://gerrit.libreoffice.org/#/c/core/+/141425/5/odk/examples/python/Text/WriterSelector.py@14", "comments": [{"message": "If you look closely at the corresponding Java example `odk/examples/java/Text/WriterSelector.java`, you will see that exception handling is needed when you bootstrap and after that. Please do the same here.", "timestamp": "2022-11-18 19:46:46.000000000"}, {"message": "Done", "timestamp": "2022-12-02 11:50:21.000000000"}]}
{"thread_id": "74b5bc65_3b9dbdac", "url": "https://gerrit.libreoffice.org/#/c/core/+/145317/4/sw/source/uibase/uno/unotxdoc.cxx@3600", "comments": [{"message": "If UpdateFields() is wanted, but causes problems on the online.git side (which assumes that a doc can't be modified right after loading), then perhaps you can make everyone happy by calling pShell->ResetModified() after UpdateFields(). That probably requires changing the type of pShell from SwViewShell to SwEditShell as well. (SwWrtShell inherits from SwEditShell, which inherits from SwViewShell).", "timestamp": "2023-01-16 13:43:04.000000000"}, {"message": "Ack", "timestamp": "2023-01-17 07:03:13.000000000"}]}
{"thread_id": "215489c6_1293221c", "url": "https://gerrit.libreoffice.org/#/c/core/+/115706/1/sdext/source/pdfimport/wrapper/wrapper.cxx@257", "comments": [{"message": "here and below: is the input always controlled by us, so that we can be sure that the assert will always be true?", "timestamp": "2021-05-17 13:26:20.000000000"}, {"message": "no, we're reading an external PDF file", "timestamp": "2021-05-17 13:41:51.000000000"}, {"message": "so these asserts are bogus?", "timestamp": "2021-05-17 14:11:15.000000000"}, {"message": "I'm not sure what to do here. The existing code in sal/rtl/strtmpl.hxx:833 will just silently overflow if the number is bigger than what can fit into a sal_Int32. \nSo just ignoring invalid input here would not make things any worse", "timestamp": "2021-05-17 16:34:15.000000000"}, {"message": "> I'm not sure what to do here. The existing code in sal/rtl/strtmpl.hxx:833 will just silently overflow if the number is bigger than what can fit into a sal_Int32. \n\nAh, sorry, I had naively assumed that it would do some kind of error return, but without actually looking at the code.", "timestamp": "2021-05-18 06:31:59.000000000"}, {"message": "> Ah, sorry, I had naively assumed that it would do some kind of error return, but without actually looking at the code.\n\nBut wait, when I do look at the implementation (toInt_WithLength in sal/rtl/strtmpl.hxx:892--893), the documentation of e.g. OString::toInt32 in include/rtl/string.hxx (\"0 if this string represents no number or one of too large magnitude\"), and e.g. testToInt32Overflow in sal/qa/rtl/strings/test_strings_toint.cxx, it /does/ return 0 for values out of range.", "timestamp": "2021-05-18 06:39:53.000000000"}]}
{"thread_id": "66207b9a_f2ee547b", "url": "https://gerrit.libreoffice.org/#/c/core/+/145549/3/include/o3tl/string_view.hxx@447", "comments": [{"message": "You refer to these? I handle these here, too \ud83d\ude0a", "timestamp": "2023-01-16 08:30:17.000000000"}, {"message": "Done", "timestamp": "2023-01-16 10:31:12.000000000"}]}
{"thread_id": "359c8f51_df428049", "url": "https://gerrit.libreoffice.org/#/c/core/+/145459/1/sw/source/uibase/shells/basesh.cxx@934", "comments": [{"message": "nit: undo can come after this return", "timestamp": "2023-01-13 16:06:12.000000000"}, {"message": "Indeed, fixed with https://gerrit.libreoffice.org/c/core/+/145555", "timestamp": "2023-01-16 08:21:09.000000000"}]}
{"thread_id": "47c4a279_02f01cfb", "url": "https://gerrit.libreoffice.org/#/c/core/+/145413/2/sw/source/uibase/shells/textsh1.cxx@575", "comments": [{"message": "nit: shouldn't undo/guard start after this return? No undo-able changes have been made prior to this, so no need to go through the setup/teardown of undo in this case.", "timestamp": "2023-01-13 15:53:50.000000000"}]}
{"thread_id": "8dfbfee4_71b3f40d", "url": "https://gerrit.libreoffice.org/#/c/core/+/145413/2/sw/source/uibase/shells/textsh1.cxx@584", "comments": [{"message": "nit: another unused before possible return.", "timestamp": "2023-01-13 15:53:50.000000000"}]}
{"thread_id": "940f3880_cb13c6ac", "url": "https://gerrit.libreoffice.org/#/c/core/+/145102/2/sc/source/ui/view/tabcont.cxx@217", "comments": [{"message": "...else nSlot = undefined!", "timestamp": "2023-01-06 08:26:25.000000000"}, {"message": "Can we ignore the whole \"else\" part instead and initialise the \"nSlot\" with some basic least value?", "timestamp": "2023-01-10 11:35:38.000000000"}, {"message": "If you always want to deselect, just dispatch this command / ID (...Execute( FID_TAB_DESELECTALL, ...) and forget all about nSlot and GetSelectPageCount().", "timestamp": "2023-01-10 12:02:48.000000000"}, {"message": "I have implemented this but while building the patch, it is crashing due to some Unit Tests getting failed. Do I need to create a separate test for this patch?", "timestamp": "2023-01-11 19:21:11.000000000"}, {"message": "Specially, the \"Chart2ImportTest::testAutomaticSizeBarChartVeryLongLabel\" test failed.", "timestamp": "2023-01-11 19:26:03.000000000"}, {"message": "The if condition is not met for single sheets and nSlot would be still unknown in this case.", "timestamp": "2023-01-12 07:59:10.000000000"}, {"message": "So should I upload the patchset with the changes that are proposed by you?", "timestamp": "2023-01-12 15:58:11.000000000"}, {"message": "At least it's not going to fly as it is, despite from whatever Jenkins complains about.", "timestamp": "2023-01-12 16:14:58.000000000"}, {"message": "Okay then, uploading it with new changes then. Thanks.", "timestamp": "2023-01-12 16:19:42.000000000"}, {"message": "Done", "timestamp": "2023-01-13 19:21:40.000000000"}]}
{"thread_id": "9a189990_ce941200", "url": "https://gerrit.libreoffice.org/#/c/core/+/145102/3/sc/source/ui/view/tabcont.cxx@216", "comments": [{"message": "Please also remove obsolete comments. (Let me do it here in the web interface)", "timestamp": "2023-01-13 08:02:29.000000000"}, {"message": "Done", "timestamp": "2023-01-13 08:03:32.000000000"}, {"message": "I don't need to upload another patchset by removing that comments as you have already done it, right? Just to confirm.", "timestamp": "2023-01-13 19:16:00.000000000"}]}
{"thread_id": "7181ed1e_7bc7a30b", "url": "https://gerrit.libreoffice.org/#/c/core/+/145547/3/oox/source/drawingml/textfield.cxx@124", "comments": [{"message": "Unfortunately, string view is not required to be null-terminated (which rtl_ustr_toInt32 requires). So we need to use \"with_length\" variant; for now, we only have one for sal_Int64, but it's trivial to add for sal_Int32.\n\nSame in other places.", "timestamp": "2023-01-16 05:22:19.000000000"}]}
{"thread_id": "f5cc74e8_b6653984", "url": "https://gerrit.libreoffice.org/#/c/core/+/145547/3/sax/source/tools/fastattribs.cxx@143", "comments": [{"message": "Better use dedicated FSNS macro", "timestamp": "2023-01-16 05:22:19.000000000"}]}
{"thread_id": "77054a6b_7ae496e7", "url": "https://gerrit.libreoffice.org/#/c/core/+/145500/1/vcl/qa/cppunit/svm/svmtest.cxx@279", "comments": [{"message": "assume you're going to remove this before commit? :-)", "timestamp": "2023-01-14 09:43:27.000000000"}, {"message": "good catch ... I would probably forget", "timestamp": "2023-01-14 10:46:40.000000000"}, {"message": "Done", "timestamp": "2023-01-14 11:43:45.000000000"}]}
{"thread_id": "8ebd490b_5c47279b", "url": "https://gerrit.libreoffice.org/#/c/core/+/145363/2/desktop/source/lib/init.cxx@5375", "comments": [{"message": "Why 4? A comment or perhaps some named constexpr instead of the magic number 4 is helpful.", "timestamp": "2023-01-12 11:43:08.000000000"}, {"message": "According to LANGUAGE_STATUS, it is a 4 tuple sequence, I have added the comments", "timestamp": "2023-01-12 12:28:50.000000000"}]}
{"thread_id": "90878bde_a64df475", "url": "https://gerrit.libreoffice.org/#/c/core/+/145363/2/desktop/source/lib/init.cxx@5461", "comments": [{"message": "Can't we use: \nfor (const auto& lang : aLangItems)", "timestamp": "2023-01-12 11:43:08.000000000"}, {"message": "Done", "timestamp": "2023-01-12 12:28:50.000000000"}]}
{"thread_id": "56c69127_2026e705", "url": "https://gerrit.libreoffice.org/#/c/core/+/145363/2/desktop/source/lib/init.cxx@5500", "comments": [{"message": "Not sure I understand the comment. Here we do use getDocLanguages already. Is the fixme saying that we should replace the remaining code in getLanguages and use getDocLanguages? Why can't we do that now?", "timestamp": "2023-01-12 11:43:08.000000000"}, {"message": "Because the release team is about to release, and in order to not have a risk break something, this change will require a heavy test in Online. Unless, of course the release schedule change.", "timestamp": "2023-01-12 12:28:50.000000000"}]}
{"thread_id": "80b14e62_6adad337", "url": "https://gerrit.libreoffice.org/#/c/core/+/145414/2/vcl/win/gdi/salnativewidgets-luna.cxx@403", "comments": [{"message": "This line is unlikely to make a difference ;)", "timestamp": "2023-01-12 21:18:41.000000000"}, {"message": "damnit, dangers of a cast cut and paste, funny no warning on such", "timestamp": "2023-01-13 08:46:24.000000000"}]}
{"thread_id": "3d17d608_ecb003d6", "url": "https://gerrit.libreoffice.org/#/c/core/+/144816/2/comphelper/source/misc/lok.cxx@265", "comments": [{"message": "I'm afraid there's a typo here?", "timestamp": "2022-12-27 13:59:26.000000000"}, {"message": "Good catch!", "timestamp": "2023-01-05 13:04:29.000000000"}, {"message": "Done", "timestamp": "2023-01-10 14:55:04.000000000"}]}
{"thread_id": "440320f4_4906098b", "url": "https://gerrit.libreoffice.org/#/c/core/+/144816/3/desktop/qa/desktop_lib/test_desktop_lib.cxx@3664", "comments": [{"message": "I left this because we could support setting the timezone for a document by the owner (from the UI) at some point. It seems like a good feature to have.", "timestamp": "2023-01-10 14:55:04.000000000"}]}
{"thread_id": "55a48445_6ddcdaa7", "url": "https://gerrit.libreoffice.org/#/c/core/+/144816/3/desktop/source/lib/init.cxx@4640", "comments": [{"message": "I'd prefer to do this directly in the handler of these .uno: commands, because it is unclear to me if there are other ways how to trigger these (like via keyboard or so).\n\nLike - probably sc/source/ui/view/cellsh1.cxx (the SID_INSERT_CURRENT_DATE and SID_INSERT_CURRENT_TIME), or even directly in sc/source/ui/view/viewfun6.cxx, in the ScViewFunc::InsertCurrentTime (the above mentioned SID's are the only users of this anyway).", "timestamp": "2023-01-10 08:45:37.000000000"}, {"message": "Done", "timestamp": "2023-01-10 14:55:04.000000000"}]}
{"thread_id": "2b55541b_a6b0dd91", "url": "https://gerrit.libreoffice.org/#/c/core/+/145324/1/sfx2/source/dialog/StyleList.cxx@935", "comments": [{"message": "We could hide styles in the tree that don't have children (eg. Heading 9). But I have no idea how to figure out (HasChildren() is a dummy) and wonder if it's neccessary.", "timestamp": "2023-01-11 10:17:43.000000000"}, {"message": "Mike agrees that styles/nodes without children does not need to be hidden.", "timestamp": "2023-01-12 15:29:35.000000000"}]}
{"thread_id": "1800f71e_3bbd226f", "url": "https://gerrit.libreoffice.org/#/c/core/+/145324/3/sfx2/source/dialog/StyleList.cxx@1567", "comments": [{"message": "This likely should be between the rRenderContext.Push and rRenderContext.Pop?", "timestamp": "2023-01-12 14:51:43.000000000"}, {"message": "The render context has been pushed before. At least it works for me.", "timestamp": "2023-01-12 14:53:20.000000000"}, {"message": "The change of the context is local to the code in braces. It has a pair of push/pop. So not changing the context inside the push/pop is a logical error. And \"works for me\" is not a reason for logical errors.", "timestamp": "2023-01-12 14:57:00.000000000"}, {"message": "Done", "timestamp": "2023-01-12 15:29:53.000000000"}]}
{"thread_id": "155151c3_8eb5ee7a", "url": "https://gerrit.libreoffice.org/#/c/core/+/145348/1/sw/source/core/doc/docbm.cxx@1434", "comments": [{"message": "You process the first bookmark twice.  You should ++it before starting the loop.\n\nI see the same is true for getFieldmarkFor.", "timestamp": "2023-01-12 15:11:45.000000000"}]}
{"thread_id": "5bfcfea3_f6f538be", "url": "https://gerrit.libreoffice.org/#/c/core/+/144883/1/sc/source/core/tool/interpr1.cxx@5055", "comments": [{"message": "This works for =MATCH(\"a\";{1;3;\"b\";\"d\"};1) but not for =MATCH(4;{\"d\";\"b\";3;1};-1) that still yields 2 as result.\n\nNote that ODFF says\nMatchType = -1 : If Search is of type Number and the value found is of type Text, the #N/A Error is returned.\nMatchType = 1 : If Search is of type Text and the value found is of type Number, the #N/A Error is returned.", "timestamp": "2023-01-05 23:01:45.000000000"}, {"message": "Done", "timestamp": "2023-01-12 14:55:48.000000000"}]}
{"thread_id": "276f0e1a_7be6b424", "url": "https://gerrit.libreoffice.org/#/c/core/+/145347/1/sw/source/uibase/shells/textfld.cxx@956", "comments": [{"message": "Is aFieldCommandPrefix mandatory? If it is empty, should this part just be skipped and accept EVERYTHING?\n\nIt looks like pretty much every field will have this CODE_PARAM. But in case one didn't, it wouldn't be able to be deleted with this function call. So these two \"continue\" checks should be wrapped in a \"if !aFieldCommandPrefix.isEmpty()\" clause.", "timestamp": "2023-01-12 14:34:27.000000000"}, {"message": "Makes sense. For Zotero, we always set a prefix, so I didn't give much thought for the empty case, but all UNO command parameters are optional, so it makes sense to handle that case correctly.\n\nhttps://gerrit.libreoffice.org/c/core/+/145409 does what you suggest.", "timestamp": "2023-01-12 14:51:49.000000000"}]}
{"thread_id": "304643df_8c32e8fd", "url": "https://gerrit.libreoffice.org/#/c/core/+/140034/4/sw/qa/uitest/sidebar/stylesSidebar.py@69", "comments": [{"message": "seen this hang at <https://ci.libreoffice.org/job/gerrit_linux_clang_dbgutil/128801/> and the soffice.bin process idle at\n\n  Thread 6 (Thread 0x7fabdea11700 (LWP 9836)):\n  #0  0x00007fabf79677bd in accept () at /lib64/libc.so.6\n  #1  0x00007fabf8074409 in osl_acceptPipe (pPipe=0x18f9990) at sal/osl/unx/pipe.cxx:381\n  #2  0x00007fabf7d009fd in osl::Pipe::accept(osl::StreamPipe&) (this=0x18faf20, Connection=...) at include/osl/pipe.hxx:155\n  #3  0x00007fabf7cfd47b in desktop::PipeIpcThread::execute() (this=0x18faef0) at desktop/source/app/officeipcthread.cxx:1132\n  #4  0x00007fabf7f167ec in salhelper::Thread::run() (this=0x18faef0) at salhelper/source/thread.cxx:39\n  #5  0x00007fabf7f1713e in threadFunc (param=0x18faf00) at include/osl/thread.hxx:189\n  #6  0x00007fabf8093cad in osl_thread_start_Impl(void*) (pData=0x18f8ca0) at sal/osl/unx/thread.cxx:265\n  #7  0x00007fabf6811ea5 in start_thread () at /lib64/libpthread.so.0\n  #8  0x00007fabf7966b0d in clone () at /lib64/libc.so.6\n  \n  Thread 5 (Thread 0x7fabde051700 (LWP 9839)):\n  #0  0x00007fabf79677bd in accept () at /lib64/libc.so.6\n  #1  0x00007fabf8074409 in osl_acceptPipe (pPipe=0x2a67010) at sal/osl/unx/pipe.cxx:381\n  #2  0x00007fabde153fcd in osl::Pipe::accept(osl::StreamPipe&) (this=0x7fabde04ec40, Connection=...) at include/osl/pipe.hxx:155\n  #3  0x00007fabde152a4b in io_acceptor::PipeAcceptor::accept() (this=0x2a41c60) at io/source/acceptor/acc_pipe.cxx:157\n  #4  0x00007fabde164205 in (anonymous namespace)::OAcceptor::accept(rtl::OUString const&) (this=0x17a2c10, sConnectionDescription=...) at io/source/acceptor/acceptor.cxx:198\n  #5  0x00007fabde1646ef in non-virtual thunk to (anonymous namespace)::OAcceptor::accept(rtl::OUString const&) () at /home/tdf/lode/jenkins/workspace/lo_gerrit/Config/linux_clang_dbgutil_64/instdir/program/libiolo.so\n  #6  0x00007fabde1e78d7 in desktop::Acceptor::run() (this=0x17a2970) at desktop/source/offacc/acceptor.cxx:107\n  #7  0x00007fabde1e8c31 in desktop::offacc_workerfunc(void*) (acc=0x17a2970) at desktop/source/offacc/acceptor.cxx:45\n  #8  0x00007fabf8093cad in osl_thread_start_Impl(void*) (pData=0x2635ce0) at sal/osl/unx/thread.cxx:265\n  #9  0x00007fabf6811ea5 in start_thread () at /lib64/libpthread.so.0\n  #10 0x00007fabf7966b0d in clone () at /lib64/libc.so.6\n  \n  Thread 4 (Thread 0x7fabd5a62700 (LWP 10258)):\n  #0  0x00007fabf6815a35 in pthread_cond_wait@@GLIBC_2.3.2 () at /lib64/libpthread.so.0\n  #1  0x00007fabf8051022 in osl_waitCondition (Condition=0x2bc6d50, pTimeout=0x0) at sal/osl/unx/conditn.cxx:228\n  #2  0x00007fabde07ade0 in osl::Condition::wait(TimeValue const*) (this=0x2bc6c98, pTimeout=0x0) at include/osl/conditn.hxx:123\n  #3  0x00007fabde0dc7df in binaryurp::Writer::execute() (this=0x2bc6ad0) at binaryurp/source/writer.cxx:151\n  #4  0x00007fabf7f167ec in salhelper::Thread::run() (this=0x2bc6ad0) at salhelper/source/thread.cxx:39\n  #5  0x00007fabf7f1713e in threadFunc (param=0x2bc6ae0) at include/osl/thread.hxx:189\n  #6  0x00007fabf8093cad in osl_thread_start_Impl(void*) (pData=0x2bb26c0) at sal/osl/unx/thread.cxx:265\n  #7  0x00007fabf6811ea5 in start_thread () at /lib64/libpthread.so.0\n  #8  0x00007fabf7966b0d in clone () at /lib64/libc.so.6\n  \n  Thread 3 (Thread 0x7fabd4e75700 (LWP 10261)):\n  #0  0x00007fabf79679bb in recv () at /lib64/libc.so.6\n  #1  0x00007fabf8074dbc in osl_receivePipe (pPipe=0x2bb4f30, pBuffer=0x29f4e08, BytesToRead=8) at sal/osl/unx/pipe.cxx:439\n  #2  0x00007fabf80759f3 in osl_readPipe (pPipe=0x2bb4f30, pBuffer=0x29f4e08, n=8) at sal/osl/unx/pipe.cxx:509\n  #3  0x00007fabde156b86 in osl::StreamPipe::read(void*, int) const (this=0x2a3ec70, pBuffer=0x29f4e08, n=8) at include/osl/pipe.hxx:200\n  #4  0x00007fabde1532fa in io_acceptor::(anonymous namespace)::PipeConnection::read(com::sun::star::uno::Sequence<signed char>&, int) (this=0x2a3ec40, aReadBytes=..., nBytesToRead=8) at io/source/acceptor/acc_pipe.cxx:83\n  #5  0x00007fabde0d068e in binaryurp::(anonymous namespace)::read(com::sun::star::uno::Reference<com::sun::star::connection::XConnection> const&, unsigned int, bool) (connection=..., size=8, eofOk=true) at binaryurp/source/reader.cxx:70\n  #6  0x00007fabde0cfa7a in binaryurp::Reader::execute() (this=0x2bcb180) at binaryurp/source/reader.cxx:105\n  #7  0x00007fabf7f167ec in salhelper::Thread::run() (this=0x2bcb180) at salhelper/source/thread.cxx:39\n  #8  0x00007fabf7f1713e in threadFunc (param=0x2bcb190) at include/osl/thread.hxx:189\n  #9  0x00007fabf8093cad in osl_thread_start_Impl(void*) (pData=0x2bc6dc0) at sal/osl/unx/thread.cxx:265\n  #10 0x00007fabf6811ea5 in start_thread () at /lib64/libpthread.so.0\n  #11 0x00007fabf7966b0d in clone () at /lib64/libc.so.6\n  \n  Thread 2 (Thread 0x7fabd3d6d700 (LWP 7715)):\n  #0  0x00007fabf6815de2 in pthread_cond_timedwait@@GLIBC_2.3.2 () at /lib64/libpthread.so.0\n  #1  0x00007fabf8050923 in osl_waitCondition (Condition=0x64b8360, pTimeout=0x7fabd3d6b698) at sal/osl/unx/conditn.cxx:203\n  #2  0x00007fabf58e6320 in osl::Condition::wait(TimeValue const*) (this=0x7fabd3d6b6b8, pTimeout=0x7fabd3d6b698) at include/osl/conditn.hxx:123\n  #3  0x00007fabf58e31ed in osl::Condition::wait(TimeValue const&) (this=0x7fabd3d6b6b8, timeout=...) at include/osl/conditn.hxx:127\n  #4  0x00007fabf58dc168 in cppu_threadpool::ThreadPool::waitInPool(rtl::Reference<cppu_threadpool::ORequestThread> const&) (this=0x2bc7720, pThread=...) at cppu/source/threadpool/threadpool.cxx:123\n  #5  0x00007fabf58d36c8 in cppu_threadpool::ORequestThread::run() (this=0x2afebd0) at cppu/source/threadpool/thread.cxx:185\n  #6  0x00007fabf58d5e4e in threadFunc (param=0x2afebe0) at include/osl/thread.hxx:189\n  #7  0x00007fabf8093cad in osl_thread_start_Impl(void*) (pData=0x2bc8300) at sal/osl/unx/thread.cxx:265\n  #8  0x00007fabf6811ea5 in start_thread () at /lib64/libpthread.so.0\n  #9  0x00007fabf7966b0d in clone () at /lib64/libc.so.6\n  \n  Thread 1 (Thread 0x7fabdf76cec0 (LWP 9701)):\n  #0  0x00007fabf6815de2 in pthread_cond_timedwait@@GLIBC_2.3.2 () at /lib64/libpthread.so.0\n  #1  0x00007fabef003cc5 in __gthread_cond_timedwait(pthread_cond_t*, pthread_mutex_t*, timespec const*) (__cond=0x17a6228, __mutex=0x17a6200, __abs_timeout=0x7ffd2d083250) at /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/x86_64-redhat-linux/bits/gthr-default.h:871\n  #2  0x00007fabef0047e0 in std::condition_variable::__wait_until_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::unique_lock<std::mutex>&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) (this=0x17a6228, __lock=..., __atime=...) at /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/condition_variable:166\n  #3  0x00007fabef004735 in std::condition_variable::wait_until<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::unique_lock<std::mutex>&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) (this=0x17a6228, __lock=..., __atime=...) at /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/condition_variable:106\n  #4  0x00007fabef003c16 in std::condition_variable::wait_until<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, SvpSalInstance::ImplYield(bool, bool)::$_2>(std::unique_lock<std::mutex>&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, SvpSalInstance::ImplYield(bool, bool)::$_2) (this=0x17a6228, __lock=..., __atime=..., __p=...) at /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/condition_variable:129\n  #5  0x00007fabef003544 in std::condition_variable::wait_for<long, std::ratio<1l, 1000l>, SvpSalInstance::ImplYield(bool, bool)::$_2>(std::unique_lock<std::mutex>&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&, SvpSalInstance::ImplYield(bool, bool)::$_2) (this=0x17a6228, __lock=..., __rtime=..., __p=...) at /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/condition_variable:145\n  #6  0x00007fabef0033c7 in SvpSalInstance::ImplYield(bool, bool) (this=0x17a6700, bWait=true, bHandleAllCurrentEvents=false) at vcl/headless/svpinst.cxx:505\n  #7  0x00007fabef003681 in SvpSalInstance::DoYield(bool, bool) (this=0x17a6700, bWait=true, bHandleAllCurrentEvents=false) at vcl/headless/svpinst.cxx:525\n  #8  0x00007fabeec0f38b in ImplYield(bool, bool) (i_bWait=true, i_bAllEvents=false) at vcl/source/app/svapp.cxx:475\n  #9  0x00007fabeec0ecbd in Application::Yield() () at vcl/source/app/svapp.cxx:559\n  #10 0x00007fabeec0ea92 in Application::Execute() () at vcl/source/app/svapp.cxx:453\n  #11 0x00007fabf7c8b834 in desktop::Desktop::Main() (this=0x7ffd2d084e48) at desktop/source/app/app.cxx:1604\n  #12 0x00007fabeec317a4 in ImplSVMain() () at vcl/source/app/svmain.cxx:203\n  #13 0x00007fabeec33489 in SVMain() () at vcl/source/app/svmain.cxx:235\n  #14 0x00007fabf7d0993f in soffice_main () at desktop/source/app/sofficemain.cxx:94\n  #15 0x00000000004008dd in sal_main () at desktop/source/app/main.c:51\n  #16 0x00000000004008b7 in main (argc=7, argv=0x7ffd2d085028) at desktop/source/app/main.c:49", "timestamp": "2022-11-30 20:59:55.000000000"}]}
{"thread_id": "710b9272_174bb4ea", "url": "https://gerrit.libreoffice.org/#/c/core/+/140034/4/sw/qa/uitest/sidebar/stylesSidebar.py@70", "comments": [{"message": "Seen unrelated <https://ci.libreoffice.org/job/gerrit_linux_clang_dbgutil/131236/> (for <https://gerrit.libreoffice.org/c/core/+/145394> \"loplugin:passparamsbyref (clang-cl)\") fail here with\n\n  FAIL: test_load_styles_from_template (stylesSidebar.StylesSidebar)\n  ----------------------------------------------------------------------\n  Traceback (most recent call last):\n    File \"/home/tdf/lode/jenkins/workspace/lo_gerrit/Config/linux_clang_dbgutil_64/sw/qa/uitest/sidebar/stylesSidebar.py\", line 70, in test_load_styles_from_template\n      self.assertEqual(expectedResults[i], get_state_as_dict(xFlatView)['SelectEntryText'])\n  AssertionError: 'customParagraphStyle' != ''\n  - customParagraphStyle\n  + \n\nwhich is somewhat strange given that the preceding wait_until_property_is_updated waits until this assertEqual would become true.  Maybe there's a race here that can cause the relevant value to fall back to \"\" again after it had already gone to \"customParagraph\"?", "timestamp": "2023-01-12 14:05:04.000000000"}]}
{"thread_id": "f363693b_280b6354", "url": "https://gerrit.libreoffice.org/#/c/core/+/145361/2/vcl/source/bitmap/bitmap.cxx@153", "comments": [{"message": "Please see the default path taken from VCL_DUMP_BMP_PATH env, which allows to use the debugging on different platforms ;)", "timestamp": "2023-01-12 07:36:19.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/145400 is meant to help with this.", "timestamp": "2023-01-12 12:34:30.000000000"}]}
{"thread_id": "722aea85_d648e469", "url": "https://gerrit.libreoffice.org/#/c/core/+/145334/1/desktop/source/app/updater.cxx@565", "comments": [{"message": "Julien, this should be removed also from comments", "timestamp": "2023-01-11 15:32:15.000000000"}, {"message": "Indeed!", "timestamp": "2023-01-11 15:42:53.000000000"}]}
{"thread_id": "fa2155f5_e52f541e", "url": "https://gerrit.libreoffice.org/#/c/core/+/145334/1/extensions/source/update/check/download.cxx@235", "comments": [{"message": "Julien, this should be removed also from comments", "timestamp": "2023-01-11 15:32:15.000000000"}, {"message": "Done", "timestamp": "2023-01-11 15:42:53.000000000"}]}
{"thread_id": "f86c61b8_1aef89fb", "url": "https://gerrit.libreoffice.org/#/c/core/+/145192/1/sw/source/uibase/uno/unotxdoc.cxx@3602", "comments": [{"message": "This unfortunately updates all views it seems at least that is what I see in online.", "timestamp": "2023-01-10 05:48:17.000000000"}]}
{"thread_id": "3dddfb5d_bbcf8148", "url": "https://gerrit.libreoffice.org/#/c/core/+/143828/1/sw/source/filter/ww8/styles.cxx@29", "comments": [{"message": "o3tl::enumarray would be useful here, to keep things in sync", "timestamp": "2022-12-08 18:27:08.000000000"}, {"message": "Thanks!\nThis requires a class enum; I can't convert this ATM, so unfortunately will skip it for now.", "timestamp": "2022-12-09 14:29:19.000000000"}]}
{"thread_id": "b2352ff4_8aba5000", "url": "https://gerrit.libreoffice.org/#/c/core/+/145281/2/sw/source/uibase/shells/textsh1.cxx@425", "comments": [{"message": "setting the name twice? Is this necessary?", "timestamp": "2023-01-11 12:52:33.000000000"}, {"message": "Oh, on master it is called SetFormatName - so two different things with the same name.", "timestamp": "2023-01-11 13:06:42.000000000"}, {"message": "Yes, there are two places where we store the section name: SwSectionFormat and the SwSectionData of the SwSection. It's a bit confusing: SwSectionData is what the UI reads, but initial section insert on the UI sets both. Once you rename with the UI, then only SwSectionData is updated. Which can be painful while debugging.\n\nSo I update both, but apart from confusing someone in a debugger, only the SwSectioNData one matters.", "timestamp": "2023-01-11 13:28:34.000000000"}]}
{"thread_id": "0ba6630e_3dc14c1c", "url": "https://gerrit.libreoffice.org/#/c/core/+/145208/3/extensions/source/update/check/download.cxx@242", "comments": [{"message": "you forgot to remove this (unconditional) line?", "timestamp": "2023-01-10 10:23:49.000000000"}, {"message": "Indeed! Done now.", "timestamp": "2023-01-10 16:45:34.000000000"}]}
{"thread_id": "2844f42f_6694520a", "url": "https://gerrit.libreoffice.org/#/c/core/+/145268/1/svx/source/tbxctrls/tbcontrl.cxx@3200", "comments": [{"message": "It should break, not continue: the next iterations will never have this condition false.", "timestamp": "2023-01-10 14:20:00.000000000"}, {"message": "Done", "timestamp": "2023-01-10 14:22:16.000000000"}]}
{"thread_id": "261acc06_8e47d732", "url": "https://gerrit.libreoffice.org/#/c/core/+/145175/1/sw/source/ui/misc/glossary.cxx@910", "comments": [{"message": "Is there any \"special\" variable I may take into consideration to get a reasonable text length to determine the maximum considerated length of the preselected text?", "timestamp": "2023-01-08 11:41:17.000000000"}, {"message": "Sorry, no idea \ud83d\ude0a", "timestamp": "2023-01-11 05:24:46.000000000"}, {"message": "Thank you for your time and help!", "timestamp": "2023-01-11 06:57:36.000000000"}]}
{"thread_id": "40ec4721_5ee659d6", "url": "https://gerrit.libreoffice.org/#/c/core/+/145237/2/sw/source/uibase/dialog/regionsw.cxx@161", "comments": [{"message": "Move backward into the previous section? Ahh, I bet that InsertSection creates both the start AND the end of the section, and that the cursor is after the end of the new, empty section. Makes sense based on Writer's section pyramid.", "timestamp": "2023-01-10 14:07:31.000000000"}, {"message": "InsertSection() is quite high-level, similar to what you get with the insert -> section menu item. There you also have this behavior that the cursor after the insertion is past the end of the section, so we have to move backwards to be in the section.\n\nIt may be a bit strange, but at least it's consistent. :-)", "timestamp": "2023-01-10 15:10:45.000000000"}]}
{"thread_id": "7a7221a7_b48b362f", "url": "https://gerrit.libreoffice.org/#/c/core/+/145238/1/sw/source/uibase/shells/textfld.cxx@1009", "comments": [{"message": "typo: fieldmark", "timestamp": "2023-01-10 14:11:10.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/145277 will fix it for master (as you say, I won't bother with a backport)", "timestamp": "2023-01-10 15:03:09.000000000"}]}
{"thread_id": "bfa5b00c_04af33f5", "url": "https://gerrit.libreoffice.org/#/c/core/+/145082/2/desktop/source/lib/init.cxx@5730", "comments": [{"message": "Wow - this looks dangerous. I'll trust NOT doing this earlier was simply a minor optimization to avoid an unnecessary lookup for some of the commands.", "timestamp": "2023-01-06 16:27:33.000000000"}, {"message": "In practice ITiledRenderable is implemented for Writer, Calc and Draw/Impress, so this can't really fail. Based on this, I think this is safe to do.", "timestamp": "2023-01-09 08:50:41.000000000"}]}
{"thread_id": "0afb5693_a49d45a3", "url": "https://gerrit.libreoffice.org/#/c/core/+/145082/2/sw/source/uibase/uno/loktxdoc.cxx@278", "comments": [{"message": "nit: supportsCommand? The plural is what throws me off here.", "timestamp": "2023-01-06 16:27:33.000000000"}, {"message": "The intent is that we have getCommandValues(), which takes a command (e.g. .uno:FontSize) and you get possible values for it (e.g. 8, 10, 12, etc). This has been generalized a bit, so now it's more like a generic getter, e.g. getCommandValues(.uno:Undo) gives you info about the undo stack, etc.\n\nWe need a function where sw/ can tell to desktop/ if a given .uno:Something command is handled in sw/ when it comes to getCommandValues(). That's what I tried to call supportsCommandValues(), since getCommandValues() is already plural.\n\nBut if you have a suggestion on what is a better name, I don't mind renaming. :-)", "timestamp": "2023-01-09 08:50:41.000000000"}, {"message": "> But if you have a suggestion on what is a better name, I don't mind renaming. :-)\n\nMy suggestion was \"supportsCommand\". You are passing a single OUString, and asking if the \"thing\" supports the OUString command.", "timestamp": "2023-01-09 13:00:19.000000000"}, {"message": "Makes sense, I've renamed it at <https://gerrit.libreoffice.org/c/core/+/145212>.", "timestamp": "2023-01-09 14:32:37.000000000"}]}
{"thread_id": "305ec475_ecc759b9", "url": "https://gerrit.libreoffice.org/#/c/core/+/145186/3/desktop/source/app/updater.cxx@566", "comments": [{"message": "the argument for this should be a char*, the man page says: \ncurl_easy_setopt(curl, CURLOPT_REDIR_PROTOCOLS_STR, \"http,https\");", "timestamp": "2023-01-09 12:38:01.000000000"}, {"message": "I've submitted a new patch here:\nhttps://gerrit.libreoffice.org/c/core/+/145208", "timestamp": "2023-01-09 12:57:31.000000000"}]}
{"thread_id": "fd46e5f6_afc4d66d", "url": "https://gerrit.libreoffice.org/#/c/core/+/145186/3/extensions/source/update/check/download.cxx@64", "comments": [{"message": "this one expects a \"curl_off_t*\"", "timestamp": "2023-01-09 12:38:01.000000000"}, {"message": "idem", "timestamp": "2023-01-09 12:57:31.000000000"}]}
{"thread_id": "a6ad8973_cd783667", "url": "https://gerrit.libreoffice.org/#/c/core/+/145186/3/extensions/source/update/check/download.cxx@236", "comments": [{"message": "same as above", "timestamp": "2023-01-09 12:38:01.000000000"}, {"message": "idem", "timestamp": "2023-01-09 12:57:31.000000000"}]}
{"thread_id": "5420051a_730aa75d", "url": "https://gerrit.libreoffice.org/#/c/core/+/145186/3/extensions/source/update/check/download.cxx@244", "comments": [{"message": "the type of the callback is different:\n\n       int progress_callback(void *clientp,\n                             curl_off_t dltotal,\n                             curl_off_t dlnow,\n                             curl_off_t ultotal,\n                             curl_off_t ulnow);", "timestamp": "2023-01-09 12:38:01.000000000"}, {"message": "idem", "timestamp": "2023-01-09 12:57:31.000000000"}]}
{"thread_id": "0a4b714c_0f8c5cf1", "url": "https://gerrit.libreoffice.org/#/c/core/+/145186/3/extensions/source/update/check/download.cxx@278", "comments": [{"message": "same as above", "timestamp": "2023-01-09 12:38:01.000000000"}, {"message": "idem", "timestamp": "2023-01-09 12:57:31.000000000"}]}
{"thread_id": "eaab45d8_2e7df83b", "url": "https://gerrit.libreoffice.org/#/c/core/+/145144/1/sw/source/uibase/shells/textfld.cxx@926", "comments": [{"message": "nit: would have been nice to have a comment here stating how this is different from FN_UPDATE_TEXT_FORMFIELDS. Other than a code read (or commit message check) there is no way to know this is a \"cursor-based\" update.", "timestamp": "2023-01-06 16:45:53.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/145189 adds more comments to improve this.", "timestamp": "2023-01-09 08:57:40.000000000"}]}
{"thread_id": "664c6aa7_30d35518", "url": "https://gerrit.libreoffice.org/#/c/core/+/144603/2/basctl/source/dlged/dlged.cxx@554", "comments": [{"message": "Using the document background is not correct; either the application background or some OS/DE color - the background prolly fails as the dialog itself uses it.", "timestamp": "2022-12-21 10:41:08.000000000"}, {"message": "My first attempt was svtools::APPBACKGROUND, but it didn't work well because it's the same color used by the dialog. Now I tried DOCBOUNDARIES and it looks good to my eyes... what do you think?", "timestamp": "2022-12-21 14:33:40.000000000"}, {"message": "Grey is quite light on the dark theme. And APPBACKGROUND looks good here, see https://i.imgur.com/np3rIWA.png", "timestamp": "2022-12-21 14:48:32.000000000"}]}
{"thread_id": "046f32e6_b3f389e8", "url": "https://gerrit.libreoffice.org/#/c/core/+/143746/3/sw/source/uibase/uiview/scroll.cxx@b43", "comments": [{"message": "Could you please remove this temporary variable and use `GetVisibleSize()` directly in `SetPageSize()` below?", "timestamp": "2022-12-12 12:32:29.000000000"}, {"message": "Done", "timestamp": "2022-12-12 19:57:39.000000000"}]}
{"thread_id": "a08b493f_569dc870", "url": "https://gerrit.libreoffice.org/#/c/core/+/143746/6/sw/source/uibase/uiview/scroll.cxx@44", "comments": [{"message": "Is it guaranteed that the call to SetLineSize will not have side effects that may impact the value returned from the call to GetVisibleSize?", "timestamp": "2022-12-20 09:59:30.000000000"}, {"message": "As far as I have looked ino the DevGuide, `LineIncrement` is the amount of scrolling that is done when you click on the either of the end arrows of the scroll bar. Setting a constant value to this property should have no impact on the `VisibleSize`, \"the portion of the displayable content that is currently visible in a dialog\".\n\nI assume that `SetLineSize()` and `GetVisibleSize()` set and get similar properties. Do you agree?\n\nFrom here:\n\"A scroll bar also has arrows at its end that when clicked or held, incrementally moves the thumb along the scroll bar to increase or decrease the scroll value. The change of the scroll value per mouse click on an arrow is specified by the `LineIncrement` property. When clicking in a scroll bar in the region between the thumb and the arrows, the scroll value increases or decreases by the value set for the `BlockIncrement` property. The thumb position represents the portion of the displayable content that is currently visible in a dialog. The visible size of the thumb is set by the `VisibleSize` property and represents the percentage of the currently visible content and the total displayable content\"\nhttps://wiki.documentfoundation.org/Documentation/DevGuide/LibreOffice_Basic#Horizontal.2FVertical_Scroll_Bar", "timestamp": "2022-12-20 11:33:57.000000000"}, {"message": "> I assume that `SetLineSize()` and `GetVisibleSize()` set and get similar properties. Do you agree?\n\n(I have no idea about this code, and only tracked down these calls to SetLineSize and GetVisibleSize first to ScrollAdaptor::SetLineSize and ScrollAdaptor::GetVisibleSize in svtools/source/control/scrolladaptor.cxx and then to the pure virtual weld::Scrollbar::adjustment_set_step_increment and weld::Scrollbar::adjustment_get_page_size (and gave up there), and just wondered whether calling GetVisibleSize before calling SetLineSize might have been done deliberately ever since at least <https://git.libreoffice.org/core/+/7b0b5cdfeed656b279bc32cd929630d5fc25878b%5E!/> \"initial import\".)", "timestamp": "2022-12-20 13:39:22.000000000"}, {"message": "OK, then let me revert this part of the code to makae sure that the behavior is kept as it was before.", "timestamp": "2022-12-20 14:21:04.000000000"}]}
{"thread_id": "654600e8_fedaea14", "url": "https://gerrit.libreoffice.org/#/c/core/+/143746/3/sw/source/uibase/utlui/glbltree.cxx@320", "comments": [{"message": "Please just use `int`. It would be OK.", "timestamp": "2022-12-12 12:32:29.000000000"}, {"message": "Done", "timestamp": "2022-12-12 19:57:39.000000000"}]}
{"thread_id": "f71a80cd_d42f395f", "url": "https://gerrit.libreoffice.org/#/c/core/+/143746/3/sw/source/uibase/utlui/glbltree.cxx@855", "comments": [{"message": "Please just use `int` for `nSource`, `nDest` and `nEntryCount`.", "timestamp": "2022-12-12 12:32:29.000000000"}, {"message": "Done", "timestamp": "2022-12-12 19:57:39.000000000"}]}
{"thread_id": "5fcf5764_e9610872", "url": "https://gerrit.libreoffice.org/#/c/core/+/144683/11/sw/source/uibase/shells/textfld.cxx@962", "comments": [{"message": "Could you check how this works with undo? My expectation would be that InsertText() on SwTextNode (directly) will bypass undo, which is poor UX. If you do rDoc.getIDocumentContentOperations().InsertString() instead, that should handle undo for you.", "timestamp": "2023-01-02 08:30:41.000000000"}, {"message": "Done", "timestamp": "2023-01-03 13:23:35.000000000"}]}
{"thread_id": "93dcb109_06de325a", "url": "https://gerrit.libreoffice.org/#/c/core/+/144683/11/sw/source/uibase/shells/textfld.cxx@974", "comments": [{"message": "Same here.", "timestamp": "2023-01-02 08:30:41.000000000"}, {"message": "Done", "timestamp": "2023-01-03 13:23:35.000000000"}]}
{"thread_id": "b1da7fc0_be298bce", "url": "https://gerrit.libreoffice.org/#/c/core/+/145036/1/sw/source/uibase/shells/basesh.cxx@775", "comments": [{"message": "U...Contents - typo", "timestamp": "2023-01-04 20:58:32.000000000"}, {"message": "Done", "timestamp": "2023-01-06 14:48:00.000000000"}]}
{"thread_id": "9fbf53c9_fb73f0ec", "url": "https://gerrit.libreoffice.org/#/c/core/+/145036/1/sw/source/uibase/shells/basesh.cxx@810", "comments": [{"message": "Don't you need to start a counter or something here? You are filtering out of ALL (nRefMark) of the reference marks in the document, but your list of fields is only going to apply to the filtered list right?\n\nWhat happens in a document with 4 reference marks, and only the 4th refmark startsWith(rNamePrefix)? At that point nRefMark is 3, and I assume aFields.getLength is 1.", "timestamp": "2023-01-04 20:58:32.000000000"}, {"message": "Good catch, I'll fix in a bit.", "timestamp": "2023-01-05 07:11:54.000000000"}, {"message": "Done", "timestamp": "2023-01-06 14:48:00.000000000"}]}
{"thread_id": "adeea9e8_639af33b", "url": "https://gerrit.libreoffice.org/#/c/core/+/145036/2/sw/source/uibase/shells/basesh.cxx@813", "comments": [{"message": "break, not continue.", "timestamp": "2023-01-05 14:39:12.000000000"}, {"message": "Ah indeed, will fix.", "timestamp": "2023-01-05 14:54:01.000000000"}, {"message": "Done", "timestamp": "2023-01-06 14:48:00.000000000"}]}
{"thread_id": "2a56dbfd_0b5a051b", "url": "https://gerrit.libreoffice.org/#/c/core/+/144618/1/drawinglayer/source/processor2d/d2dpixelprocessor2d.cxx@106", "comments": [{"message": "\u201cWould do to have\u201d? That isn\u2019t idiomatic English. In this case, it should read \u201cwould have to have\u201d or \u201cwould need to have\u201d. Also, I would add the Saxon genitive: \u201cduring LO's lifetime\u201d", "timestamp": "2022-12-20 16:57:24.000000000"}, {"message": "Applied. I'm going to send updated version. Thanks", "timestamp": "2022-12-22 08:38:58.000000000"}]}
{"thread_id": "5e8aae75_dec3eda7", "url": "https://gerrit.libreoffice.org/#/c/core/+/143820/3/sw/source/core/doc/list.cxx@45", "comments": [{"message": "uh...  aren't things going to leak left and right if you throw exceptions from sw core code?  most of it appears quite unprepared.  (also see https://bugs.documentfoundation.org/show_bug.cgi?id=152710)", "timestamp": "2023-01-05 18:32:47.000000000"}, {"message": "Probably, but the alternative was having the OO process spin with 100% CPU, eating RAM until something killed it.\n\nWhat would the alternative be?\n\n(Noting that there are at least 8 other places in sw core that already throw an exception for a corrupt document, so this patch is not a new thing).", "timestamp": "2023-01-05 18:55:28.000000000"}]}
{"thread_id": "ca206907_0fe1a475", "url": "https://gerrit.libreoffice.org/#/c/core/+/144941/1/sw/source/uibase/fldui/fldmgr.cxx@1075", "comments": [{"message": "What is sPar2? It is the content that is passed. Probably the second StringItem from the params in sdi/swriter.sdi.", "timestamp": "2023-01-04 21:09:54.000000000"}]}
{"thread_id": "2a2bdf46_37b85aaf", "url": "https://gerrit.libreoffice.org/#/c/core/+/144941/1/sw/source/uibase/fldui/fldmgr.cxx@1077", "comments": [{"message": "Should the start/end action be inside the if statement?  Otherwise we have added a lot of overhead for nothing. (Its fine as is.)\n\nWhat does start/end action do? (It avoids layout changes during the action.) Is it really a lot of overhead? (No, very tiny).", "timestamp": "2023-01-04 21:09:54.000000000"}]}
{"thread_id": "01ce97ec_cb1e0461", "url": "https://gerrit.libreoffice.org/#/c/core/+/144941/1/sw/source/uibase/fldui/fldmgr.cxx@1086", "comments": [{"message": "move where? (Split, so cursor is at the start of a new paragraph/node. Move to the end of the previous paragraph/node.)", "timestamp": "2023-01-04 21:09:54.000000000"}]}
{"thread_id": "ac52b8cb_214607e8", "url": "https://gerrit.libreoffice.org/#/c/core/+/144941/1/sw/source/uibase/fldui/fldmgr.cxx@1094", "comments": [{"message": "set mark (end of initial node), move to start of next node, and delete the split. Then \"select\" to the end of pasted content, and assign to Cursor, so Point is at start of reference, and mark is end of reference.", "timestamp": "2023-01-04 21:09:54.000000000"}]}
{"thread_id": "52cb9273_c535668c", "url": "https://gerrit.libreoffice.org/#/c/core/+/145039/1/sw/source/filter/html/parcss1.cxx@558", "comments": [{"message": "FWIW other places use Color::IncreaseLuminance() to increase the luminance, but I don't think it would make the code simpler to use it here.", "timestamp": "2023-01-04 14:27:14.000000000"}]}
{"thread_id": "2b744657_3e5179b0", "url": "https://gerrit.libreoffice.org/#/c/core/+/131904/6/toolkit/source/awt/vclxwindows.cxx@1515", "comments": [{"message": "Hmm. Why not add that to all controls? Perhaps even add it as a default to always consider, in PushPropertyIds()?\n\nIn any case, just adding it for XListBox feels unnecessarily special-casing it, and makes the code behave more inconsistently.", "timestamp": "2022-10-26 13:02:14.000000000"}, {"message": "As said, I've uploaded now the other solution. Then may be there is no need to discuss if the property has to be add to all controls or it will be subject of another ticket. It behaves now like setting foreground color as example. I'm not sure what the correct solution is. My first solution seems to be consistent with the definition of native controls, but Michael has argumented, that this could be meanwhile somehow obsolete. With my first solution, the macro programmer has to know that he has additionally must set this property to false to achieve another background color in a listbox, with the second not.", "timestamp": "2022-10-27 10:01:52.000000000"}, {"message": "Given that general support for drawing the control background in native controls has been added in the context of tdf#136094, my take from a first look is that it would be in line with that and most consistent to make it work for the listbox case as well (or otherwise, require explicitly setting non-native mode by the macro programmer for all controls, i.e. revert what was done in the context of tdf#136094?), rather than having a special handling for the listbox case.\n\nIn a quick test with PS 7 on top of master as of 097a2de6428f834d28fa78af203d3c0b6577656e and the macro from tdf#148109, the background is not painted for me for gtk3 and kf5. Am I still missing anything or can you possibly reproduce that?\n(IIRC, it worked when we quickly tried such an approach quite a while ago, but I don't remember the details any more.)", "timestamp": "2022-10-31 17:15:45.000000000"}, {"message": "I can reproduce it and have corrected it. But there is also a thick border that is painted additionally, don't know if that is ok. I've also corrected for osx, although I can't test it.", "timestamp": "2022-11-10 13:36:26.000000000"}, {"message": "Thanks, and sorry for the late reply.\n\nIs the thick border possibly related to the non-native drawing that takes place now (s. my comment of 17:04) and if so, would that be fine with the other potential approached mentioned in that comment?", "timestamp": "2022-12-29 16:11:46.000000000"}, {"message": "No prob. The thick border is a seperate problem as described here: https://bugs.documentfoundation.org/show_bug.cgi?id=151101", "timestamp": "2022-12-30 07:11:04.000000000"}, {"message": "Done", "timestamp": "2023-01-03 07:03:43.000000000"}]}
{"thread_id": "a387dba1_3307adc8", "url": "https://gerrit.libreoffice.org/#/c/core/+/131904/5/toolkit/source/helper/property.cxx@158", "comments": [{"message": "The formatting change to these existing lines looks unrelated to the actual change, so I suggest to not mix that into this patch.", "timestamp": "2022-06-17 06:39:58.000000000"}, {"message": "It's related to the topic. The Listbox shows a blue highlight color of the selected item, the background color is ignored in this. So it is part of the solution, as I need to set the item with another background color even when it is selected.", "timestamp": "2022-06-17 07:08:16.000000000"}, {"message": "Sorry for nit-picking, but isn't that related to the two lines above (adding \"HighlightColor\", HightlightTextColor\") rather than the added space in the lines for \"ImageAlign\", \"ImagePosition\"?\n(This is mostly a minor comment for this change, but it's usually recommended to not touch unrelated lines so they don't show up in the diff, making it easier to see what the actual change is about, thus e.g. simplifying review and analysing the commit later in case it causes any regressions, etc.)", "timestamp": "2022-06-17 09:11:33.000000000"}, {"message": "Done", "timestamp": "2023-01-03 07:03:43.000000000"}]}
{"thread_id": "88f8e227_f9499356", "url": "https://gerrit.libreoffice.org/#/c/core/+/131904/10/vcl/osx/salnativewidgets.cxx@165", "comments": [{"message": "unrelated whitespace change", "timestamp": "2022-12-30 12:35:02.000000000"}, {"message": "Done", "timestamp": "2023-01-03 07:03:43.000000000"}]}
{"thread_id": "a31784bc_be6e1482", "url": "https://gerrit.libreoffice.org/#/c/core/+/131904/8/vcl/unx/gtk3/salnativewidgets-gtk.cxx@2727", "comments": [{"message": "This effectively disables \"native\" drawing of list boxes, so they no longer look like/similar to actual native gtk widgets.\nI'd suggest to instead draw the background color in the native drawing code (GtkSalGraphics::drawNativeControl for gtk3), as is the case for other control types.\n\nI've looked a bit further into why PS7 alone wasn't enough: At the moment, the background color is not passed for list boxes, but when doing so, background color \"just worked\" in a quick test with qt5/kf5 (which doesn't yet work in PS9):\n\n```\ndiff --git a/vcl/source/control/imp_listbox.cxx b/vcl/source/control/imp_listbox.cxx\nindex 531244925062..7fab9becf0d4 100644\n--- a/vcl/source/control/imp_listbox.cxx\n+++ b/vcl/source/control/imp_listbox.cxx\n@@ -2603,6 +2603,9 @@ void ImplWin::ImplDraw(vcl::RenderContext& rRenderContext, bool bLayout)\n             if( bMouseOver )\n                 nState |= ControlState::ROLLOVER;\n \n+            Color aBackgroundColor = COL_AUTO;\n+            if (IsControlBackground())\n+                aBackgroundColor = GetControlBackground();\n             // if parent has no border, then nobody has drawn the background\n             // since no border window exists. so draw it here.\n             WinBits nParentStyle = pWin->GetStyle();\n@@ -2610,11 +2613,11 @@ void ImplWin::ImplDraw(vcl::RenderContext& rRenderContext, bool bLayout)\n             {\n                 tools::Rectangle aParentRect( Point( 0, 0 ), pWin->GetSizePixel() );\n                 pWin->GetOutDev()->DrawNativeControl( ControlType::Listbox, ControlPart::Entire, aParentRect,\n-                                         nState, aControlValue, OUString() );\n+                                         nState, aControlValue, OUString(), aBackgroundColor);\n             }\n \n             bNativeOK = rRenderContext.DrawNativeControl(ControlType::Listbox, ControlPart::Entire, aCtrlRegion,\n-                                                         nState, aControlValue, OUString());\n+                                                         nState, aControlValue, OUString(), aBackgroundColor);\n         }\n \n         if (bIsEnabled)\n\n```\n\ngtk3 still needs changes to take the passed background color into account, but it worked for me with e.g. that local change in place (set the background color in CSS style settings; and needed `render_common` of  `mpListboxBoxStyle` to be done after `mpListboxButtonStyle`, which otherwise causes white background again):\n\n```\ndiff --git a/vcl/unx/gtk3/salnativewidgets-gtk.cxx b/vcl/unx/gtk3/salnativewidgets-gtk.cxx\nindex 6fc1be3f8257..f55b45a8b92b 100644\n--- a/vcl/unx/gtk3/salnativewidgets-gtk.cxx\n+++ b/vcl/unx/gtk3/salnativewidgets-gtk.cxx\n@@ -1005,9 +1005,8 @@ void GtkSalGraphics::PaintCombobox( GtkStateFlags flags, cairo_t *cr,\n         else\n         {\n             render_common(mpListboxStyle, cr, aRect, flags);\n-            render_common(mpListboxBoxStyle, cr, aRect, flags);\n-\n             render_common(mpListboxButtonStyle, cr, aRect, flags);\n+            render_common(mpListboxBoxStyle, cr, aRect, flags);\n \n             gtk_render_arrow(mpListboxButtonArrowStyle, cr,\n                              G_PI,\n@@ -1882,13 +1881,24 @@ bool GtkSalGraphics::drawNativeControl( ControlType nType, ControlPart nPart, co\n     case RenderType::Combobox:\n         if (pBgCssProvider)\n         {\n-            gtk_style_context_add_provider(mpComboboxEntryStyle, GTK_STYLE_PROVIDER(pBgCssProvider),\n-                                           GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);\n+            if (nType == ControlType::Combobox)\n+            {\n+                gtk_style_context_add_provider(mpComboboxEntryStyle, GTK_STYLE_PROVIDER(pBgCssProvider),\n+                                               GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);\n+            }\n+            else if (nType == ControlType::Listbox)\n+            {\n+                gtk_style_context_add_provider(mpListboxBoxStyle, GTK_STYLE_PROVIDER(pBgCssProvider),\n+                                               GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);\n+            }\n         }\n         PaintCombobox(flags, cr, rControlRegion, nType, nPart);\n         if (pBgCssProvider)\n         {\n-            gtk_style_context_remove_provider(mpComboboxEntryStyle, GTK_STYLE_PROVIDER(pBgCssProvider));\n+            if (nType == ControlType::Combobox)\n+                gtk_style_context_remove_provider(mpComboboxEntryStyle, GTK_STYLE_PROVIDER(pBgCssProvider));\n+            else if (nType == ControlType::Listbox)\n+                gtk_style_context_remove_provider(mpListboxBoxStyle, GTK_STYLE_PROVIDER(pBgCssProvider));\n         }\n         break;\n     case RenderType::Icon:\n\n```", "timestamp": "2022-12-29 16:04:46.000000000"}, {"message": "Thanks, I will implement your suggestion. I was inspired through the solution in windows, see vcl/win/gdi/salnativewidgets-luna.cxx:\n\n        case ControlType::Listbox:\n            if( nPart == ControlPart::HasBackgroundTexture )\n                return false;   // we do not paint the inner part (ie the selection background/focus indication)\n            if( nPart == ControlPart::Entire || nPart == ControlPart::ListboxWindow )\n                hTheme = getThemeHandle(mhWnd, L\"Listview\", mWinSalGraphicsImplBase);\n            else if( nPart == ControlPart::ButtonDown )\n                hTheme = getThemeHandle(mhWnd, L\"Combobox\", mWinSalGraphicsImplBase);\n            break;", "timestamp": "2022-12-30 07:34:40.000000000"}, {"message": "Super, it works and the thick border issue is also solved", "timestamp": "2022-12-30 10:17:45.000000000"}, {"message": "Done", "timestamp": "2023-01-03 07:03:43.000000000"}]}
{"thread_id": "9373cc8b_bb894ac0", "url": "https://gerrit.libreoffice.org/#/c/core/+/131904/10/vcl/unx/gtk3/salnativewidgets-gtk.cxx@2737", "comments": [{"message": "This looks like an unrelated change (of order).", "timestamp": "2022-12-30 12:35:02.000000000"}, {"message": "Done", "timestamp": "2023-01-03 07:03:43.000000000"}]}
{"thread_id": "9443c6d2_812a4a55", "url": "https://gerrit.libreoffice.org/#/c/core/+/144458/2/sw/qa/uitest/writer_tests4/spellDialog.py@237", "comments": [{"message": "The builds starting at <https://ci.libreoffice.org/job/lo_ubsan/2632/> failed this three times in a row now,\n\n  FAIL: test_tdf65535 (spellDialog.SpellingAndGrammarDialog)\n  ----------------------------------------------------------------------\n  Traceback (most recent call last):\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/sw/qa/uitest/writer_tests4/spellDialog.py\", line 237, in test_tdf65535\n      self.assertEqual(\"Bad baad\", output_text)\n  AssertionError: 'Bad baad' != 'Baad baad'\n  - Bad baad\n  + Baad baad\n  ?   +\n\nI at least can't reproduce that locally, but there might be some kind of race here that can make this fail?", "timestamp": "2023-01-02 06:44:31.000000000"}, {"message": "It seems, spell checking is always active in the background, so it's possible, that the dialog window depends on its result, so it's better to wait a little bit after opening the file. I'll add some latency hoping that will solve the problem. Thanks for the report!", "timestamp": "2023-01-02 17:43:49.000000000"}]}
{"thread_id": "f560f64c_6ae87ba2", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/4/sw/qa/extras/txtimport/txtimport.cxx@182", "comments": [{"message": "Did you make sure that this test fails without the fix?", "timestamp": "2021-09-11 16:53:18.000000000"}, {"message": "Yes, it is failing with this:\nExpected: 1\nActual: 2", "timestamp": "2021-09-24 13:07:06.000000000"}, {"message": "Done", "timestamp": "2021-09-26 21:40:20.000000000"}]}
{"thread_id": "bea85107_122a3fd1", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/7/sw/qa/extras/txtimport/txtimport.cxx@182", "comments": [{"message": "I suppose that these lines are just some copy-paste, and don't test anything in this specific issue, right?", "timestamp": "2021-09-27 06:40:38.000000000"}, {"message": "Yes! This has been resolved in the latest patchset", "timestamp": "2022-08-16 13:07:12.000000000"}]}
{"thread_id": "c492e27c_2ac5f590", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/7/sw/qa/extras/txtimport/txtimport.cxx@196", "comments": [{"message": "Just to be sure, could you please increase the file size to, say, 30000 characters? And maybe better just generate the input file dynamically, to avoid being limited to what we may reasonably store in the source tree, and be able to test with arbitrarily long data, even say 10 M?", "timestamp": "2021-09-27 06:40:38.000000000"}, {"message": "It has been updated now!", "timestamp": "2022-08-16 13:07:12.000000000"}]}
{"thread_id": "c975c1f3_d2366793", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/11/sw/qa/extras/txtimport/txtimport.cxx@181", "comments": [{"message": "Why do you load this file? If you want to create arbitrary size text file, you should not load this file.", "timestamp": "2021-11-17 19:53:26.000000000"}, {"message": "Done", "timestamp": "2022-08-16 13:07:12.000000000"}]}
{"thread_id": "2d2ffcc1_322e324c", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/11/sw/qa/extras/txtimport/txtimport.cxx@183", "comments": [{"message": "Take a look at what others did in this .cxx file for similar situations.", "timestamp": "2021-11-17 19:53:26.000000000"}, {"message": "Done", "timestamp": "2022-08-16 13:07:12.000000000"}]}
{"thread_id": "b47d031d_e8cec717", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/11/sw/qa/extras/txtimport/txtimport.cxx@192", "comments": [{"message": "Why do you repeat this each time?", "timestamp": "2021-11-17 19:53:26.000000000"}, {"message": "Done", "timestamp": "2022-08-16 13:07:12.000000000"}]}
{"thread_id": "d2d68e00_4f204d54", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/11/sw/qa/extras/txtimport/txtimport.cxx@193", "comments": [{"message": "You should insert an OUString.", "timestamp": "2021-11-17 19:53:26.000000000"}, {"message": "Done", "timestamp": "2022-08-16 13:07:12.000000000"}]}
{"thread_id": "fc166bc8_ea53102d", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/13/sw/qa/extras/txtimport/txtimport.cxx@186", "comments": [{"message": "If you define size as sal_Int32, it's better because then you don't need to cast it in the assertion.", "timestamp": "2021-12-03 14:57:01.000000000"}, {"message": "Done", "timestamp": "2022-08-16 13:07:12.000000000"}]}
{"thread_id": "35af4043_5c22bdb5", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/13/sw/qa/extras/txtimport/txtimport.cxx@189", "comments": [{"message": "It should be rtl::OUStringBuffer and it should be with previous line written in one line.", "timestamp": "2021-12-03 14:57:01.000000000"}, {"message": "Done", "timestamp": "2022-08-16 13:07:12.000000000"}]}
{"thread_id": "efd99445_b024b3dc", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/13/sw/qa/extras/txtimport/txtimport.cxx@192", "comments": [{"message": "Could you please define i here?", "timestamp": "2021-12-03 14:57:01.000000000"}, {"message": "Done", "timestamp": "2022-08-16 13:07:12.000000000"}]}
{"thread_id": "fba2e8dd_a4d9d691", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/13/sw/qa/extras/txtimport/txtimport.cxx@200", "comments": [{"message": "You forgot to insert the text into paragraph before this.\n    pWrtShell->Insert(OUString(s));", "timestamp": "2021-12-03 14:57:01.000000000"}, {"message": "Done", "timestamp": "2022-08-16 13:07:12.000000000"}]}
{"thread_id": "69d1aeb2_0f0f2773", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/13/sw/qa/extras/txtimport/txtimport.cxx@208", "comments": [{"message": "You have defined the size variable. Please use that instead of 30000.", "timestamp": "2021-12-03 14:57:01.000000000"}, {"message": "Done", "timestamp": "2022-08-16 13:07:12.000000000"}]}
{"thread_id": "bb21fa0f_44067263", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/23/sw/qa/extras/txtimport/txtimport.cxx@210", "comments": [{"message": "Please use OUStringBuffer::makeStringAndClear(), that would not require to copy the string, but would just use the built internal data in the new OUString.", "timestamp": "2022-08-17 07:55:16.000000000"}, {"message": "Sure sir.", "timestamp": "2022-08-17 18:36:23.000000000"}]}
{"thread_id": "964d5682_c19b5c16", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/23/sw/qa/extras/txtimport/txtimport.cxx@217", "comments": [{"message": "Why 2? I would expect that to be 3 at least...", "timestamp": "2022-08-17 07:55:16.000000000"}, {"message": "I thought it would split one para into 2 if limit exceeds than 1000 chars!", "timestamp": "2022-08-17 18:36:23.000000000"}, {"message": "Ohh...MY bad! I've ran the test and the results was that it has splitted 3 paras. Will correct it.", "timestamp": "2022-08-22 16:55:51.000000000"}]}
{"thread_id": "818978ca_fd1502fc", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/23/sw/qa/extras/txtimport/txtimport.cxx@225", "comments": [{"message": "Is this correct? Importing a text file would split paragraphs before your fix, so all paragraphs would be no larger than 10000.", "timestamp": "2022-08-17 07:55:16.000000000"}, {"message": "While running the test without the fix, it gave this output", "timestamp": "2022-08-17 18:36:23.000000000"}, {"message": "In this one also, it gave me 10000 without the fix. So, fixing this one too.", "timestamp": "2022-08-22 16:55:51.000000000"}]}
{"thread_id": "abc05604_2ebfc9f6", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/23/sw/qa/extras/txtimport/txtimport.cxx@226", "comments": [{"message": "Also would it be possible to store the initially created OUString, and check the paragraph text here to match it?", "timestamp": "2022-08-17 07:55:16.000000000"}, {"message": "Will have to try that approach. Not sure though. But is there any problem in this method of comparision?", "timestamp": "2022-08-17 18:57:49.000000000"}, {"message": "@Radhey,\nImplementing this is not hard. Just store the `OUString` result and use `CPPUNIT_ASSERT_EQUAL()`. Please do it.", "timestamp": "2022-09-02 21:03:40.000000000"}, {"message": "Done", "timestamp": "2022-09-15 14:11:26.000000000"}]}
{"thread_id": "e63995e9_f1b219c0", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/27/sw/qa/extras/txtimport/txtimport.cxx@210", "comments": [{"message": "What is the point of introducing the variable `res`? You could simply use `s`.", "timestamp": "2022-09-15 16:13:52.000000000"}, {"message": "Just named it differently to avoid much confusion.", "timestamp": "2022-09-15 16:15:47.000000000"}, {"message": "Should I covert this using the variable s?", "timestamp": "2022-09-15 16:21:28.000000000"}, {"message": "Okay.", "timestamp": "2022-09-15 16:23:13.000000000"}, {"message": "Done", "timestamp": "2022-11-29 22:09:21.000000000"}]}
{"thread_id": "182b017f_b11fbbe6", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/28/sw/qa/extras/txtimport/txtimport.cxx@210", "comments": [{"message": "What's the point of this statement? Please remove it.", "timestamp": "2022-09-15 16:30:36.000000000"}, {"message": "Done", "timestamp": "2022-11-29 22:09:21.000000000"}]}
{"thread_id": "06a217fd_ed0d9def", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/31/sw/qa/extras/txtimport/txtimport.cxx@212", "comments": [{"message": "You can forget about this variable and use `s` instead.", "timestamp": "2022-12-03 01:00:56.000000000"}, {"message": "If I'm using only \"s\", the test is failing.", "timestamp": "2023-01-01 20:02:45.000000000"}, {"message": "You should have converted `s` to `OUString` first. I did it for you.", "timestamp": "2023-01-02 06:16:52.000000000"}]}
{"thread_id": "b0380324_f5111c05", "url": "https://gerrit.libreoffice.org/#/c/core/+/121548/7/sw/source/filter/ascii/parasc.cxx@395", "comments": [{"message": "We skip the trailing empty paragraph here", "timestamp": "2021-09-27 09:48:08.000000000"}, {"message": "Done", "timestamp": "2022-08-16 13:30:30.000000000"}]}
{"thread_id": "89484eab_f0563276", "url": "https://gerrit.libreoffice.org/#/c/core/+/143680/2/sfx2/source/doc/docmacromode.cxx@291", "comments": [{"message": "Please note that IInternetSecurityManager handles the zones correctly, unlike getting it all manually.", "timestamp": "2022-12-29 17:42:30.000000000"}, {"message": "I'm not sure - the documentation of MapUrlToZone() is not very clear on that (and the samples I've seen all use the explicit query)", "timestamp": "2022-12-30 03:31:48.000000000"}, {"message": "Nice, checking the file location is clearly incrementally better. I'll play with that!", "timestamp": "2022-12-30 14:46:09.000000000"}, {"message": "> FF:\n\nand https://hg.mozilla.org/mozilla-central/file/tip/toolkit/components/downloads/DownloadPlatform.cpp#l258.\n\nAlso this explanation from Raymond Chen (https://devblogs.microsoft.com/oldnewthing/20131104-00/?p=2753):\n\n> if you want your application to be sensitive to the file zone (so that you can disable features for untrusted documents), you should use the IInternet\u00adSecurity\u00adManager::Map\u00adUrl\u00adTo\u00adZone function rather than using only the file zone identifier, because the effective zone of a file is a combination of the file\u2019s declared zone as well as its physical location. (For example, a file in the Temporary Internet Files directory or on an untrusted server should not be given full trust regardless of what it claims. ...)", "timestamp": "2022-12-30 09:50:53.000000000"}]}
{"thread_id": "88afb506_459e38ab", "url": "https://gerrit.libreoffice.org/#/c/core/+/143680/4/sfx2/source/doc/docmacromode.cxx@341", "comments": [{"message": "These values (0 = ask, 1 = allow, 2 = disallow) seem inconsistent related to other existing settings of this kind. There is officecfg::Office::Common::Security::Scripting::MacroSecurityLevel setting, where 0 is lowest security level, 3 is highest [1]; there is also css::document::MacroExecMode [2], which defines 9 modes in an odd order. Possibly it would make sense to align this settings group with one of those? If necessary, limiting to a subset of recognized values.\n\n[1] https://opengrok.libreoffice.org/xref/core/officecfg/registry/schema/org/openoffice/Office/Common.xcs?r=b22bbfa2#2762\n[2] https://opengrok.libreoffice.org/xref/core/offapi/com/sun/star/document/MacroExecMode.idl?r=5687eba4#27", "timestamp": "2023-01-01 10:09:13.000000000"}]}
{"thread_id": "28e05b63_5035e1a9", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/connpooloptions.cxx@169", "comments": [{"message": "I would store the welded component instead of welding them twice:\n\n    const auto aWeldedLabel = m_xBuilder->weld_label(label);\n    if (aWeldedLabel->is_visible())\n    \nor with the new syntax:\n\n    if (const auto aWeldedLabel = m_xBuilder->weld_label(label);aWeldedLabel->is_visible())", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "d6761978_4cdfabe3", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/connpooloptions.cxx@177", "comments": [{"message": "Same as above, just weld it once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "ec25deea_30bb5bb5", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/24/cui/source/options/connpooloptions.cxx@169", "comments": [{"message": "Here we could also work with references since we don't change the object (const auto& instead of const auto), ofc. for all the getStrings methods.", "timestamp": "2023-08-20 10:26:01.000000000"}, {"message": "Done (for all getStrings methods)", "timestamp": "2023-08-21 17:46:19.000000000"}]}
{"thread_id": "66e0717a_1bec52d1", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/fontsubs.cxx@148", "comments": [{"message": "const auto&", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "529463fa_46c5f041", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/fontsubs.cxx@150", "comments": [{"message": "Weld it once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "8c3b5209_3ae67328", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/fontsubs.cxx@156", "comments": [{"message": "const auto&", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "905ce5bb_b27139fc", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/fontsubs.cxx@158", "comments": [{"message": "Weld it once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "15f01e43_25399124", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optaccessibility.cxx@56", "comments": [{"message": "const auto&", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "c1bdd355_3e5c4fdb", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optaccessibility.cxx@58", "comments": [{"message": "Weld it once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "d6dffc53_ec93abca", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optaccessibility.cxx@65", "comments": [{"message": "const auto&", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "4c0b3f32_d25f9766", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optaccessibility.cxx@67", "comments": [{"message": "Weld it once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "80eb681e_eae3acef", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/29/cui/source/options/optaccessibility.cxx@56", "comments": [{"message": "Is the visibility check not needed anymore? You may also drop the curly brackets but it is up to you if you do so.", "timestamp": "2023-08-25 12:41:02.000000000"}, {"message": "> Is the visibility check not needed anymore?\nI had to remove the visibility check because otherwise we cannot get strings at Options dialog startup since dialogs are literally are not visible. So, getAllStrings() always returns empty string.\n\n> You may also drop the curly brackets but it is up to you if you do so.\nworking on it...", "timestamp": "2023-08-25 13:01:57.000000000"}, {"message": "Done", "timestamp": "2023-08-26 07:02:52.000000000"}]}
{"thread_id": "c39c1333_9d2d2c6f", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optasian.cxx@144", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "ebf57608_9cd960c6", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optbasic.cxx@56", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "813ecc3e_083f8fd4", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optchart.cxx@146", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "b48571d3_dcd5e107", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optcolor.cxx@803", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "611fa48d_bc40712c", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optctl.cxx@61", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "625f4722_70b64ffe", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optdeepl.cxx@46", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "f473bf48_b27f9723", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optfltr.cxx@74", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "3e9b6e99_b04462d7", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optgdlg.cxx@220", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "b6f33ba4_f33d40e4", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optgdlg.cxx@713", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "885e2d49_511159e6", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optgdlg.cxx@1267", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "dd30f8b2_106d96ad", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/17/cui/source/options/optgenrl.cxx@361", "comments": [{"message": "if a label is not visible to the user, then it will not included into searching.\n\n(tooltips and accessible-descriptions will be added)", "timestamp": "2023-08-07 08:15:41.000000000"}]}
{"thread_id": "53fedf60_adb4796e", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optgenrl.cxx@344", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "80f24b3f_8622c54f", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/opthtml.cxx@71", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "84e2f8ac_f601dd8a", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optinet2.cxx@339", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "cab4640d_4caf5ff6", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optinet2.cxx@854", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "ca371c85_66c5c91b", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optinet2.cxx@972", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "099a4665_82e0ef95", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optjava.cxx@470", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "ea4e0ee6_36565db2", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optjsearch.cxx@204", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "d193d42b_ddfe07ec", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optlanguagetool.cxx@86", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "90a78b40_13473d73", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optlingu.cxx@924", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "facf6dca_f2f65226", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optopencl.cxx@53", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "40c1be75_31002d48", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optsave.cxx@241", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "f1d4a113_94be1c70", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/optupdt.cxx@193", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "44cb5933_6cb13881", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/personalization.cxx@58", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "5fd864f0_a48c1d28", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/7/cui/source/options/treeopt.cxx@511", "comments": [{"message": "@Heiko: I tried to remove the focus being on OK button. I hope it will work.", "timestamp": "2023-07-05 10:18:39.000000000"}, {"message": "How about putting the search field into focus?", "timestamp": "2023-07-05 11:19:37.000000000"}, {"message": "> How about putting the search field into focus?\n\nupdated.\nhttps://gerrit.libreoffice.org/c/core/+/152519/8/cui/source/options/treeopt.cxx#1185", "timestamp": "2023-07-05 12:20:26.000000000"}, {"message": "Done", "timestamp": "2023-07-07 08:02:38.000000000"}]}
{"thread_id": "b36c36ff_098510bb", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/12/cui/source/options/treeopt.cxx@948", "comments": [{"message": "Here, I don't get any results from the pages on win10.", "timestamp": "2023-07-12 09:58:31.000000000"}, {"message": "Done", "timestamp": "2023-08-08 15:07:17.000000000"}]}
{"thread_id": "669c6b61_bf4870e5", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/15/cui/source/options/treeopt.cxx@645", "comments": [{"message": "@Andreas: here, I try to run all sub-dialogs that Options dialog has.\n\nAs we know, sub-dialogs are shown at right pane - which is referenced as `xTabBox`. Running only `initializeAllDialogs()` here, adds multiple dialogs into one `xTabBox`. Therefore, the right pane expand itself wider than the screen and I can't even see the buttons at the bottom of the Options dialog. (That's why I added `clearOptionsDialog()` after the initialization. you can see the strange behavior by removing `clearOptionsDialog()` and `selectFirstEntry()`)\n\nin this approach we have 2 problems:\n- 1) we should initialize dialogs without interrupting the UI. To achieve this, initializing should be possible without needing xTabBox. (please see other comment about xTabBox)\n- 2) after solving problem #1, then we can run them in the background. (I tried to do this but could not succeed.)\n\nanother approach that came to my mind is that we can add something like a loading page until initializing and getting strings completed. (but of course I don't know how much time it will take on other systems/OSes)\n\nWhat do you think? Thanks.", "timestamp": "2023-08-01 10:54:53.000000000"}, {"message": "(I forgot to mention): to initialize all dialogs, click `Reset` button. (for testing purpose I assigned the initializeAllDialogs() to `Reset` button)", "timestamp": "2023-08-01 20:40:49.000000000"}, {"message": "Dialogs are now initialized at Options dialog startup. `Reset` button use its default behavior.\n\nmarking as Done.", "timestamp": "2023-08-07 08:15:41.000000000"}]}
{"thread_id": "f7c52636_b0b3ae70", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/15/cui/source/options/treeopt.cxx@805", "comments": [{"message": "BTW, searching is disabled for now.", "timestamp": "2023-08-01 10:54:53.000000000"}]}
{"thread_id": "9159ae2c_8164d42e", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/15/cui/source/options/treeopt.cxx@909", "comments": [{"message": "here, you can test/see how much time the initializing will take. on my linux machine it generally takes 2-4 secs. (rarely takes 7-8 secs when the first time I open the LO)", "timestamp": "2023-08-01 10:54:53.000000000"}]}
{"thread_id": "3868f221_43c4765d", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/15/cui/source/options/treeopt.cxx@1271", "comments": [{"message": "this method is copied from `SelectHdl_Impl()` - with two new parameters. but we have to get rid of anything related to UI update. we don't need to update the UI but need to create them and access their label etc. values.\n\nbtw, every time `initializeCurrentDialog()` runs, it actually updates the UI, but it is not possible to see the update because update happens very fast, when initializing all sub-dialogs.", "timestamp": "2023-08-01 10:54:53.000000000"}]}
{"thread_id": "cab1afd9_119a981d", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/15/cui/source/options/treeopt.cxx@1344", "comments": [{"message": "Here, `xTabBox.get()` is used to show dialogs in xTabBox container. Replacing `xTabBox.get()` with `nullptr` still initialize dialogs, but clicking the treeview items return empty dialog - as expected. (also gives GTK-CRITICAL warning).\n\nI should find a way to initialize the dialogs without `XtabBox` (because xTabBox is the only thing that updates the UI). Then, after clicking a tree item, I should assign xTabBox on the dialog, to show it on the UI.\n\nI'm open to any new suggestions. Thanks!", "timestamp": "2023-08-01 10:54:53.000000000"}, {"message": "initializing is not possible(?) without `XtabBox`. since we use threads to initialize, this seems not to be a blocker. marking as done.", "timestamp": "2023-08-07 08:15:41.000000000"}]}
{"thread_id": "aaf3f87a_119a38df", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/15/cui/source/options/treeopt.cxx@1347", "comments": [{"message": "Hmm. I found a trick/workaround here. Before this line, I added `pPageInfo->m_xPage->set_visible(false);`. This fixed the `xTabBox` expanding issue.\n\n(before adding this line, I removed `clearOptionsDialog()` and `selectFirstEntry()` methods at the line 652, 653)\n\nTreeview and dialogs are working very well in this case.", "timestamp": "2023-08-02 17:34:41.000000000"}, {"message": "So are your previous questions obsolete now? Tried the implementation. Did you disable the search functionality? Atm it does not work on my machine on Win10.", "timestamp": "2023-08-03 07:43:29.000000000"}, {"message": "Search functionality is disabled (until we fix issues regarding initializing the dialogs at the background).\n\nYou can test again with patchset 16 to see if xTabBox expanding issue is exist on win10 (by clicking `Reset` button).\n\nFrom the previous questions, I just want to ask how to run `initializeAllDialogs()` (at the line 648), at the background? (I tried to do this but could not succeed.)\n\nThanks.", "timestamp": "2023-08-03 10:49:51.000000000"}, {"message": "Unfortunately, I have never implemented a function running in a separate thread in the background. You may ask in the developer chat fir some code points.", "timestamp": "2023-08-03 11:40:28.000000000"}, {"message": "[5:38:06 PM] <caolanm> bayramcicek, maybe it would be of some use to have an idle that opens one page and starts a new idle for the next page when that completes and so on. Not in the background, but at least mostly responsive to the user while its happening\n [5:39:11 PM] <noelgrandin> caolanm, bayramcicek it should be a lot faster to load the underlying XML as an XML document, and parse out the labels from that? And that would be doable on a backgtround thread\n [5:39:26 PM] <noelgrandin> using e.g. XFastParser\n [5:39:52 PM] <noelgrandin> and a thread-pool\n [5:40:12 PM] <noelgrandin> but maybe that is beyond the scope of this change\n [5:41:49 PM] <caolanm> noelgrandin, true. I think localized terms might be needed, but that could be doable by getting the domain=\"XXX\" of the .ui and fiddling with gettext using the context of the string\n \nThe XML idea will not be useful since we need to know labels visibility at run-time. But initializing dialogs in a separate thread/asynchronous may be speed up the initializing. I'm working on that...", "timestamp": "2023-08-03 16:47:27.000000000"}, {"message": "Done", "timestamp": "2023-08-07 08:15:41.000000000"}]}
{"thread_id": "66b86845_8fac309a", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/16/cui/source/options/treeopt.cxx@1349", "comments": [{"message": "@Andreas: Could you please use this line to see if you can get the `GetAllStrings(): _Allow use of OpenCL` string in your debug messages (if yes, does the string change when you use another language)?\n\nI get something like:\n\n ...\n debug:36318:36318: GetAllStrings(): empty\n debug:36318:36318: GetAllStrings(): empty\n debug:36318:36318: GetAllStrings(): empty\n debug:36318:36318: GetAllStrings(): _Allow use of OpenCL\n debug:36318:36318: GetAllStrings(): empty\n debug:36318:36318: GetAllStrings(): empty\n debug:36318:36318: GetAllStrings(): empty\n ...\n \nwhich indicates `mxUseOpenCL->get_label()` returns the `Allow use of OpenCL` string correctly. Then I can implement `GetAllStrings()` function for all ~69 dialogs step by step. But before doing that, first we should initialize all dialogs at the background successfully.", "timestamp": "2023-08-03 10:49:51.000000000"}, {"message": "Done", "timestamp": "2023-08-04 15:09:30.000000000"}]}
{"thread_id": "aa3c672e_ac07c085", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/17/cui/source/options/treeopt.cxx@473", "comments": [{"message": "Dialogs are being initialized here in a new thread, when Options dialog opens.", "timestamp": "2023-08-07 08:15:41.000000000"}]}
{"thread_id": "359f1c61_90bf482c", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/17/cui/source/options/treeopt.cxx@924", "comments": [{"message": "you can use this debug message to see how much time the initializing will take.", "timestamp": "2023-08-07 08:15:41.000000000"}]}
{"thread_id": "ab841823_cb54f634", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/17/cui/source/options/treeopt.cxx@1346", "comments": [{"message": "debug message lines, #1346 and #1364 can be used to see label strings that currently visible.", "timestamp": "2023-08-07 08:15:41.000000000"}]}
{"thread_id": "66275333_ed278a0d", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/treeopt.cxx@1027", "comments": [{"message": "Switch the cases: if (textSearch ...) { code below from the else case }", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "c9542a1a_a45c9831", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/treeopt.cxx@1038", "comments": [{"message": "const auto&", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "06a83cac_a1e3474f", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/29/cui/source/options/treeopt.cxx@823", "comments": [{"message": "Could you call OfaTreeOptionsDialog::initializeFirstNDialog with the correct nthNode?", "timestamp": "2023-08-25 12:57:07.000000000"}, {"message": "`initializeFirstNDialog()` starts initialization from the first node until the `nthNode`(renamed to `nNumberOfNode`). It has a default value `-1` if no parameter provided. Default value will initialize all dialogs.\n\n> Could you call OfaTreeOptionsDialog::initializeFirstNDialog with the correct nthNode? \n(if I understand correctly), calling a specific node is possible. e.g: call only 16th node. but `initializeFirstNDialog()` doesn't do that, we need a new function for this.\n\n`selectFirstEntry()` selects first child-node of first parent-node which is the default behavior after the searching done.", "timestamp": "2023-08-26 07:02:52.000000000"}, {"message": "Ack", "timestamp": "2023-08-28 05:21:41.000000000"}]}
{"thread_id": "1d1b78a2_4e286d37", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/29/cui/source/options/treeopt.cxx@836", "comments": [{"message": "Is this block needed?", "timestamp": "2023-08-25 12:57:07.000000000"}, {"message": "Done", "timestamp": "2023-08-26 07:02:52.000000000"}]}
{"thread_id": "57e3abb5_aea85ec0", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/29/cui/source/options/treeopt.cxx@872", "comments": [{"message": "Maybe a for loop is more suited here?\n\n    for (weld::TreeIter xTemp = xTreeLB->make_iterator(); \n         xTreeLB->get_iter_first(xTemp) && nCount < nthNode;\n         xTreeLB->iter_next(xTemp), ++nCount)", "timestamp": "2023-08-25 12:57:07.000000000"}, {"message": "this for loop iterates forever and `nthNode`'s default value (-1) will not run the for loop. I left the while loop as is.\n\n(`nthNode` is changed to `nNumberOfNode`)", "timestamp": "2023-08-26 07:02:52.000000000"}]}
{"thread_id": "92cac52d_ac8ebad8", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/29/cui/source/options/treeopt.cxx@876", "comments": [{"message": "Is it possible to make here something like\n    \n    if (!(xEntry = xTreeLB->make_iterator(xTemp.get())", "timestamp": "2023-08-25 12:57:07.000000000"}, {"message": "Done", "timestamp": "2023-08-26 07:02:52.000000000"}]}
{"thread_id": "cbdd05e3_602cfed9", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/29/cui/source/options/treeopt.cxx@877", "comments": [{"message": "Is there an empty block needed here?", "timestamp": "2023-08-25 12:57:07.000000000"}, {"message": "Done", "timestamp": "2023-08-26 07:02:52.000000000"}]}
{"thread_id": "6cbbfd04_4eefb84f", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/29/cui/source/options/treeopt.cxx@931", "comments": [{"message": "Empty block?", "timestamp": "2023-08-25 12:57:07.000000000"}, {"message": "Done", "timestamp": "2023-08-26 07:02:52.000000000"}]}
{"thread_id": "f9a502d9_fec03b62", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/29/cui/source/options/treeopt.cxx@944", "comments": [{"message": "Maybe here you could do something like to avoid duplication?\n\n    OUString entryText = xTreeLB->get_text(*xEntry);\n    const bool isParentNode = !xTreeLB->get_iter_depth(*xEntry);", "timestamp": "2023-08-25 12:57:07.000000000"}, {"message": "> Maybe here you could do something like to avoid duplication?\n> \n>     OUString entryText = xTreeLB->get_text(*xEntry);\nsince I need previous(parent) node text, this won't work. did some refactoring on that.\n\n>     const bool isParentNode = !xTreeLB->get_iter_depth(*xEntry);\nDone.", "timestamp": "2023-08-26 07:02:52.000000000"}]}
{"thread_id": "553daf3b_114d0d79", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@501", "comments": [{"message": "I would remove the comment since what happens if the constant got changed?", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "0a5c52af_e89e5c1b", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@976", "comments": [{"message": "Anything you don't change should be declared as const", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "f46f5a40_baf69218", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@1765", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "I need `if (vPageId.size() != 0)` to be sure that if there is any ongoing search operation. If `vPageId` is empty, then we should add the tab page with the following else block. Otherwise search functionality doesn't work well.\n\nBut with `if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )` there is no need to use for loop and `break;`, so I removed them and the code is shorter now. Thanks!", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "5d597da7_31e5a956", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@1797", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "c15fa713_3798479e", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@1843", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "fcaace34_93a03422", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@1897", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "639df306_c03cd7dc", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@1914", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "e120aca9_7e356673", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@1940", "comments": [{"message": "See comments for the assertion", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "I left all moved codes as they were.", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "94df8d38_ea453568", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@1943", "comments": [{"message": "Code should be indented using CTRL+K, CTRL+F (like in every place where you add code)", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "I left all moved codes as they were.", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "1612378a_803cdf9b", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@1946", "comments": [{"message": "Code should be indented using CTRL+K, CTRL+F", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "I left all moved codes as they were.", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "358c9c52_00addebd", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@1961", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "72fd6c39_4e32300c", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@1979", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "b2cce6ad_bf7209af", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@2005", "comments": [{"message": "See comments for the assertion", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "I left all moved codes as they were.", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "84417759_a89b9c13", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@2025", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "6d6f108a_4d4c7b2d", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@2052", "comments": [{"message": "See the other comments for the assert.", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "I left all moved codes as they were.", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "e148076d_7a0adf3d", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@2072", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "23050c46_90a7755f", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@2099", "comments": [{"message": "Like the comment in 2146", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "I left all moved codes as they were.", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "2cc2a0bd_09285567", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@2119", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "a64591e0_7340aaef", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@2146", "comments": [{"message": "Slurs / political statements etc. should not be used in the code base. The message should indicate what actually happened.", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Hi Andreas. Thanks for the reviews.\n\nI just want clarify the situation here. Actually those kind of commits are not mine. That's why I didn't touch them. When I separate the`OfaTreeOptionsDialog::Initialize` function into new multiple functions, git assumed that those kind of commits are written by me but actually they are not. I just moved them.\n\nBut I will update them according to your suggestion of course. As you know, I never write something like that in the codebase, so I don't want to be misunderstood :) Thanks.", "timestamp": "2023-08-28 08:48:56.000000000"}, {"message": "Ah ok, I did not realize it, so if you just moved them, just leave them as they were.", "timestamp": "2023-08-28 10:14:43.000000000"}, {"message": "I left all moved codes as they were.", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "7e96059c_b58f9a13", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@2164", "comments": [{"message": "How about:\n\n    if (std::find(vPageId.begin(), vPageId.end(), id) != vPageId.end() )", "timestamp": "2023-08-28 05:49:05.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "21b3cd3e_672a8a2d", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@2207", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "bf97bcf9_95ebf15e", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@2241", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "e459f954_5650bcee", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/33/cui/source/options/treeopt.cxx@2281", "comments": [{"message": "if (std::find(vPageId.begin(), vPageId.end(), nPageId) != vPageId.end() )", "timestamp": "2023-08-28 08:00:37.000000000"}, {"message": "Done", "timestamp": "2023-08-28 12:21:15.000000000"}]}
{"thread_id": "33d69624_1347165d", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/12/cui/source/options/treeopthelper.cxx@220", "comments": [{"message": "On win10 the file exists, for instance, instdir/share/uioptions/cui/optuserpage.txt, but doesn't get read.", "timestamp": "2023-07-12 09:58:31.000000000"}, {"message": "interesting. I'll check it after the issues in makefile fixed.", "timestamp": "2023-07-14 01:58:58.000000000"}, {"message": "Done", "timestamp": "2023-08-08 15:07:17.000000000"}]}
{"thread_id": "112223a3_a5ab4cbf", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/treeopthelper.cxx@221", "comments": [{"message": "const auto&", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "61fdbc15_33cb259f", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/treeopthelper.cxx@253", "comments": [{"message": "const auto&", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "a58f84a2_bb1646ee", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/tabpages/tparea.cxx@284", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "8be9707e_b2fd57e8", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sc/source/ui/optdlg/opredlin.cxx@61", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "ad2d746c_1a80abb0", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sc/source/ui/optdlg/tpcalc.cxx@162", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "bd5f68e7_430678c5", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sc/source/ui/optdlg/tpcompatibility.cxx@33", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "11343c6a_ae743399", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sc/source/ui/optdlg/tpdefaults.cxx@43", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "e7766bee_62f5366f", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sc/source/ui/optdlg/tpformula.cxx@261", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "43658dad_6ac5d274", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sc/source/ui/optdlg/tpprint.cxx@84", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "8daa6011_74ff765e", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sc/source/ui/optdlg/tpusrlst.cxx@188", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "9de30ada_2eb8c428", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sc/source/ui/optdlg/tpview.cxx@97", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "9c7533d4_71f31204", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sd/source/ui/dlg/prntopts.cxx@72", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "efee7845_5ec3ef20", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sd/source/ui/dlg/tpoption.cxx@122", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "472706ba_4887a8b2", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sfx2/source/dialog/printopt.cxx@82", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "2a456e96_59377012", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/starmath/source/dialog.cxx@189", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "d3bbeb5f_4713f615", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/svx/source/dialog/optgrid.cxx@152", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "c5c6f129_ca8ba37e", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sw/source/ui/config/mailconfigpage.cxx@133", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "8b127d05_a72d3d58", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sw/source/ui/config/optcomp.cxx@359", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "b4722897_aedf0d2f", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sw/source/ui/config/optload.cxx@150", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "6c52167e_25ba51fb", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/sw/source/ui/config/optpage.cxx@215", "comments": [{"message": "const auto& and weld all components once", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "38a52ff0_87d6b790", "url": "https://gerrit.libreoffice.org/#/c/core/+/156190/1/svtools/source/control/ctrlbox.cxx@381", "comments": [{"message": "What's different about online here? I think the idea was that if fonts are changed that the previews gets discarded. Or I guess maybe if the background changes and the image needs to be regenerated, which for the transparent online bg case is a reason not to do this?", "timestamp": "2023-08-28 13:21:13.000000000"}, {"message": "yes, we don't really change theme in lok case so they will remain the same, avoiding unnecessary redrawing in case we will do some settings changes", "timestamp": "2023-08-28 14:31:36.000000000"}, {"message": "fair enough", "timestamp": "2023-08-28 14:38:52.000000000"}]}
{"thread_id": "e08d13f7_f382ed8d", "url": "https://gerrit.libreoffice.org/#/c/core/+/156172/2/sd/qa/unit/uiimpress.cxx@1027", "comments": [{"message": "Some of these hard-coded values can be named constants. Avoids comments and self documenting.", "timestamp": "2023-08-28 15:43:50.000000000"}, {"message": "Ack", "timestamp": "2023-08-28 16:09:59.000000000"}]}
{"thread_id": "d4327bdd_660de1c6", "url": "https://gerrit.libreoffice.org/#/c/core/+/156165/1/sc/source/ui/theme/ThemeColorChanger.cxx@220", "comments": [{"message": "updateSdrObject dereferences pView unconditionally, and it may be nullptr here.", "timestamp": "2023-08-28 09:57:51.000000000"}, {"message": "Indeed - that would be an issue already in ThemeColorChanger::apply. I'll address that in a new patch.", "timestamp": "2023-08-28 10:34:44.000000000"}]}
{"thread_id": "f5241d0e_2464fd35", "url": "https://gerrit.libreoffice.org/#/c/core/+/156165/1/sd/source/core/ThemeColorChanger.cxx@131", "comments": [{"message": "Wouldn't this prevent applying new themes in e.g. headless mode? IIRC, there's no view?", "timestamp": "2023-08-28 09:57:51.000000000"}, {"message": "Maybe, but I didn't find a way how to change editeng model in a different way.", "timestamp": "2023-08-28 10:34:44.000000000"}]}
{"thread_id": "91befce0_9fce100e", "url": "https://gerrit.libreoffice.org/#/c/core/+/156165/1/sw/source/core/model/ThemeColorChanger.cxx@231", "comments": [{"message": "Is it possible that pView is nullptr here? Because then the same concert applies - that updateSdrObject dereferences it unconditionally (inside updateEditEngTextSections) - that latter might need to be prepared for nullptr?", "timestamp": "2023-08-28 09:57:51.000000000"}, {"message": "Hmm.. I'll look into it.", "timestamp": "2023-08-28 10:34:44.000000000"}]}
{"thread_id": "5a12fc20_ae32929b", "url": "https://gerrit.libreoffice.org/#/c/core/+/156150/1/oox/source/export/ThemeExport.cxx@190", "comments": [{"message": "Here we have getRed/Green/Blue to return HSL values - isn't it better to name them like \"getComponent1/2/3\"? Or maybe have functions instead, like \"getRGBComponents\" / \"getHSLComponents\", that would return tuples, and internally would assert the correct type of the complex color?", "timestamp": "2023-08-28 08:57:44.000000000"}, {"message": "Right, I'm not happy with this part of ComplexColor. Returning a tuple idea sounds good.", "timestamp": "2023-08-28 09:35:58.000000000"}]}
{"thread_id": "8169ec27_9fd72bf6", "url": "https://gerrit.libreoffice.org/#/c/core/+/156106/2/oox/source/export/ColorExportUtils.cxx@37", "comments": [{"message": "Can nLumOff be negative? The following line will run in that case, if that's possible - would that be correct?\n\nAs far as I see, the nLumMod is only used, when nLumOff is unused?\n\nPossibly an option could be to remove the lines 30-31, and use an 'else if (nLumOff == 0 && nLumMod != 10'000)' here?", "timestamp": "2023-08-28 08:09:04.000000000"}, {"message": "It can't be negative but it can be 0. I wanted to return the special case nLumMod == 10'000 and nLumOff == 0 early, but it maybe isn't needed because -double(10'000 - 10'000) / 10'000 results to 0 too.", "timestamp": "2023-08-28 08:33:38.000000000"}, {"message": "Ack", "timestamp": "2023-08-28 08:51:29.000000000"}]}
{"thread_id": "bdd3a897_8dc82016", "url": "https://gerrit.libreoffice.org/#/c/core/+/156104/2/include/editeng/brushitem.hxx@97", "comments": [{"message": "Same here", "timestamp": "2023-08-28 07:47:27.000000000"}, {"message": "Done", "timestamp": "2023-08-28 08:13:33.000000000"}]}
{"thread_id": "d3727404_8a042cb9", "url": "https://gerrit.libreoffice.org/#/c/core/+/156103/2/sc/source/filter/excel/xestyle.cxx@1858", "comments": [{"message": "Won't this case now trigger when \"rComplexColor.isValidSchemeType()\" is true, and so the complex color is expected to be output?", "timestamp": "2023-08-28 07:34:39.000000000"}, {"message": "good point .. will change in a follow up", "timestamp": "2023-08-28 07:43:58.000000000"}]}
{"thread_id": "9e9feb9d_fc77f075", "url": "https://gerrit.libreoffice.org/#/c/core/+/156103/2/sc/source/filter/excel/xestyle.cxx@2006", "comments": [{"message": "These two cases do the same - so should it be merged in a single condition like\n\n  if (maForegroundComplexColor.isValidSchemeType() || mnForeColor != 0)\n\nto show that the same action is not a typo, and is intended to run in both cases?", "timestamp": "2023-08-28 07:34:39.000000000"}, {"message": "yes, makes sense.. will change in master", "timestamp": "2023-08-28 07:43:58.000000000"}]}
{"thread_id": "09fdee2e_8e86381a", "url": "https://gerrit.libreoffice.org/#/c/core/+/156103/2/sc/source/filter/excel/xestyle.cxx@2014", "comments": [{"message": "Same here", "timestamp": "2023-08-28 07:34:39.000000000"}]}
{"thread_id": "41af0bb7_c2135f6f", "url": "https://gerrit.libreoffice.org/#/c/core/+/155079/5/sc/source/ui/optdlg/tpcompatibility.cxx@41", "comments": [{"message": "It feels like get_state_changed_from_saved() is a more natural thing to use here?\n\nand to split this so\na) we set the KEY_BINDING_COMPAT if the keybindings value is not the saved one and set bRet to true\nb) independent of that set the OPT_LINKS one if the btnlink state is the not the saved one, and set bRet to true", "timestamp": "2023-08-09 15:26:25.000000000"}, {"message": "Done\nThx, you are right.. \ud83d\ude0a", "timestamp": "2023-08-17 12:19:58.000000000"}]}
{"thread_id": "84bb7011_c9bdc176", "url": "https://gerrit.libreoffice.org/#/c/core/+/156132/1/reportdesign/source/filter/xml/xmlExport.cxx@523", "comments": [{"message": "this part is just for consistency? shouldn't make a difference", "timestamp": "2023-08-28 08:36:12.000000000"}, {"message": "correct", "timestamp": "2023-08-28 09:08:22.000000000"}]}
{"thread_id": "0bf4d831_67f77bb2", "url": "https://gerrit.libreoffice.org/#/c/core/+/155791/2/comphelper/source/misc/instancelocker.cxx@242", "comments": [{"message": "hard to tell whether the original `catch( uno::Exception& )` was there to catch exceptions from the `xDesktop->removeTerminateListener` call (and should thus stay) and/or from the `uno::UNO_QUERY_THROW`", "timestamp": "2023-08-25 09:04:50.000000000"}, {"message": "> hard to tell whether the original `catch( uno::Exception& )` was there to catch exceptions from the `xDesktop->removeTerminateListener` call (and should thus stay) and/or from the `uno::UNO_QUERY_THROW`", "timestamp": "2023-08-25 09:31:25.000000000"}]}
{"thread_id": "b935877a_44419f22", "url": "https://gerrit.libreoffice.org/#/c/core/+/156097/1/editeng/source/editeng/impedit5.cxx@324", "comments": [{"message": "Possibly change this to \n\n   assert(pNode && \"Node not found: GetAttrib\" );\n   \nso we find the culprit through crashtesting", "timestamp": "2023-08-25 12:57:46.000000000"}, {"message": "Done", "timestamp": "2023-08-25 13:58:58.000000000"}]}
{"thread_id": "f914b0d3_99e089b2", "url": "https://gerrit.libreoffice.org/#/c/core/+/156081/1/sc/qa/unit/ucalc_DocumentThemes.cxx@78", "comments": [{"message": "Document what these numbers are?", "timestamp": "2023-08-25 11:40:58.000000000"}]}
{"thread_id": "069887df_d1767496", "url": "https://gerrit.libreoffice.org/#/c/core/+/156080/1/sc/source/ui/theme/ThemeColorChanger.cxx@248", "comments": [{"message": "Something like setDocShellTheme(), setDocShellColorSet() or setDocShellThemeColorSet() would be better as a name; the current one just says we change the theme, but then we don't take a model::Theme parameter, so this is a bit confusing.", "timestamp": "2023-08-25 11:39:48.000000000"}]}
{"thread_id": "ec8ae2f2_0b0efd26", "url": "https://gerrit.libreoffice.org/#/c/core/+/156077/1/include/oox/export/ColorExportUtils.hxx@49", "comments": [{"message": "It would be useful to document the purpose of this; sounds like you need to tweak the first 4 elements, but then the rest is the same in Calc and Excel.", "timestamp": "2023-08-25 11:33:54.000000000"}]}
{"thread_id": "3c93366c_bc3c1708", "url": "https://gerrit.libreoffice.org/#/c/core/+/156070/1/sc/source/ui/drawfunc/drawsh.cxx@292", "comments": [{"message": "Nit: either drop the \"a\" prefix here or change to \"p\", since this is a pointer. It reads strange to dereference aNewArgs later.", "timestamp": "2023-08-25 08:32:51.000000000"}]}
{"thread_id": "674d80b5_31478f9b", "url": "https://gerrit.libreoffice.org/#/c/core/+/156068/1/sc/source/filter/excel/excdoc.cxx@871", "comments": [{"message": "This looks problematic if the doc has 2 sheets and the first sheet gets removed, but I think you're aware of this limitation. Writer and Impress doesn't have such a problem.", "timestamp": "2023-08-25 08:30:32.000000000"}]}
{"thread_id": "2feafe55_fc78a01d", "url": "https://gerrit.libreoffice.org/#/c/core/+/150828/2/msicreator/createmsi.py@574", "comments": [{"message": "Hmm. So this changed one hardcoded directory with another, which was already tested in line 578 below?\n\nNote that normal installation of WIX also sets 'WIX' env variable pointing to its location, which IMO should be tried first.", "timestamp": "2023-04-28 09:52:30.000000000"}, {"message": "Ugh. Yep, how could I have missed that line 578. Sorry, this change does not make sense (for whatever local screw-up, it didn't work before & worked afterwards...).\n\nOn the general remark, there's a lot to improve wrt WiX detection (which should happen in configure.ac IMO).", "timestamp": "2023-04-28 10:53:57.000000000"}, {"message": "WiX's own installer hardcodes the install path and does not provide an installer option to change it. Unless someone goes out of their way to be different, WiX tools are always found in the same location.", "timestamp": "2023-05-14 17:32:17.000000000"}, {"message": "Also, if you make any changes to this script, please file them upstream first so the two don't get out of sync: https://github.com/jpakkane/msicreator", "timestamp": "2023-05-14 17:52:39.000000000"}, {"message": "Ack", "timestamp": "2023-08-24 15:01:10.000000000"}]}
{"thread_id": "bd8a3d91_f32f0b42", "url": "https://gerrit.libreoffice.org/#/c/core/+/156022/4/vcl/source/gdi/pdfwriter_impl2.cxx@519", "comments": [{"message": "this piece looks like a debugging leftover?", "timestamp": "2023-08-24 06:06:43.000000000"}, {"message": "> this piece looks like a debugging leftover?\n\nNope. That needs to be there. When #if OSL_DEBUG_LEVEL > 0 and Skia is enabled (at least on macOS), the second invert must be skipped or else the exported PDF's alpha masks are all meesed up.\n\nI suspect that an extra SkiaSalBitmap::Invert is being called when #if OSL_DEBUG_LEVEL > 0 somewhere because for release builds, we need to invert the alpha mask even when Skia is enabled.\n\nI have one more rebuild to test this, then I'll commit it.", "timestamp": "2023-08-24 11:47:00.000000000"}]}
{"thread_id": "39ed41fc_3fc92907", "url": "https://gerrit.libreoffice.org/#/c/core/+/155885/1/sw/source/core/layout/paintfrm.cxx@2869", "comments": [{"message": "The && is a typo here, pointed out by Coverity, the follow-up change will fix it.", "timestamp": "2023-08-22 14:41:18.000000000"}]}
{"thread_id": "569c91a8_15292395", "url": "https://gerrit.libreoffice.org/#/c/core/+/155895/2/svgio/source/svgreader/svgstyleattributes.cxx@3075", "comments": [{"message": "Xisco: it could be relevant to use a enum class to avoid magical numbers and potential errors, what do you think?\nIf you want I can propose a patch for this.", "timestamp": "2023-08-21 13:53:45.000000000"}, {"message": "Hi Julien,\nThis is just a mechanism to avoid infinite loops. See 1fe8479e5ba4ec092d6dc6d88a1edd5fb4487542\nPlease, go ahead a propose a patch if you think it would make the code cleaner", "timestamp": "2023-08-21 13:59:57.000000000"}, {"message": "Ok I thought that each index was related to a specific feature, eg:\n- 0 for \"fill\"\n- 1 for \"stroke\"\n- 2 for \"SvgGradientNodeFill\"\n- 3 for \"SvgGradientNodeStroke\"\netc.\nbut following what you indicated, it seems, it could have been:\n- 0 for \"stroke\"\n- 1 for \"SvgGradientNodeFill\"\n- 2 for \"SvgGradientNodeStroke\"\n- 3 for \"fill\"\n\n\nSorry for the noise then!", "timestamp": "2023-08-21 14:08:49.000000000"}]}
{"thread_id": "646d90a5_b7bc8cd1", "url": "https://gerrit.libreoffice.org/#/c/core/+/155834/1/ucb/source/ucp/webdav-curl/CurlSession.cxx@1220", "comments": [{"message": "this will always prefix the scheme, which is wrong in 2 ways:\n1. the m_Proxy.aName could already contain a scheme\n2. possibly a different scheme would be required to access the proxy than to access the m_URI; this is something that libcurl explicitly supports\n\nreading man CURLOPT_PROXY, it is clear that the value in m_Proxy.aName is not required to be a URL, it may also be a hostname, so the existing code is also wrong.\n\nseeing as the only reason a CurlUri is constructed here is to check if it contains user/password, then this should just be wrapped in try/catch and ignore errors and just leave user/password unset.", "timestamp": "2023-08-18 11:25:39.000000000"}, {"message": "> this will always prefix the scheme, which is wrong in 2 ways:\n> 1. the m_Proxy.aName could already contain a scheme\n\nIt does not.\n\n> 2. possibly a different scheme would be required to access the proxy than to access the m_URI; this is something that libcurl explicitly supports\n> \n\nShould make no difference - we are not using the scheme here, we are just using curl to parse stuff.\n\n> reading man CURLOPT_PROXY, it is clear that the value in m_Proxy.aName is not required to be a URL, it may also be a hostname, so the existing code is also wrong.\n> \n\nWell, debugging the actual specification (i.e. the curl code) it most certainly returns a failure", "timestamp": "2023-08-18 11:28:37.000000000"}, {"message": "I have changed the patch to simply ignore the exception, which is fine for my situation", "timestamp": "2023-08-18 11:51:24.000000000"}]}
{"thread_id": "ad9f3114_738627a8", "url": "https://gerrit.libreoffice.org/#/c/core/+/153939/3/sfx2/source/appl/appserv.cxx@619", "comments": [{"message": "I think we are fighting against each other by accident here.\n\nIn https://gerrit.libreoffice.org/c/core/+/152817 I added the original\n!= rSchemeName to not do this load if the EditableConfig was already using the same Scheme that it was asked to change to. My scenario there is to avoid a full-window invalidation for everyone every time someone else new joins a shared document in online.\n\nRight now again if someone joins then we have that problem again.\n\nMy scenario is reproducible with opening hello-world.odt in one browser window, help, about, triple click to activate the blinkenlight and close help, open another browser window and open the same document and the first window will flash red from \n\n#0  desktop::CallbackFlushHandler::libreOfficeKitViewInvalidateTilesCallback(tools::Rectangle const*, int, int) (this=0x6ea05d0, pRect=0x0, nPart=0, nMode=0)\n    at /home/caolan/LibreOffice/co-23.05/desktop/source/lib/init.cxx:1655\n#1  0x00007f227dd9c33d in SwViewShell::ImplApplyViewOptions(SwViewOption const&) (this=this@entry=0x6ec4ff0, rOpt=...)\n    at /home/caolan/LibreOffice/co-23.05/sw/source/core/view/viewsh.cxx:2490\n#2  0x00007f227dd9ccdb in SwViewShell::ApplyViewOptions(SwViewOption const&) (this=this@entry=0x6ec4ff0, rOpt=...)\n    at /home/caolan/LibreOffice/co-23.05/sw/source/core/view/viewsh.cxx:2281\n#3  0x00007f227d8e669c in SwEditShell::ApplyViewOptions(SwViewOption const&) (this=this@entry=0x6ec4ff0, rOpt=...)\n    at /home/caolan/LibreOffice/co-23.05/sw/source/core/edit/editsh.cxx:1094\n#4  0x00007f227e1c2529 in SwWrtShell::ApplyViewOptions(SwViewOption const&) (this=0x6ec4ff0, rOpt=<optimized out>)\n    at /home/caolan/LibreOffice/co-23.05/sw/source/uibase/wrtsh/wrtsh1.cxx:2129\n#5  0x00007f227dec23e5 in SwModule::ConfigurationChanged(utl::ConfigurationBroadcaster*, ConfigurationHints) (this=0x63ce120, pBrdCst=<optimized out>)\n    at /home/caolan/LibreOffice/co-23.05/sw/source/uibase/app/apphdl.cxx:995\n#6  0x00007f2296f04617 in utl::ConfigurationBroadcaster::NotifyListeners(ConfigurationHints) (nHint=<optimized out>, this=0x64001f0) at /usr/include/c++/13/bits/stl_vector.h:1123\n#7  utl::ConfigurationBroadcaster::NotifyListeners(ConfigurationHints) (this=0x64001f0, nHint=<optimized out>)\n    at /home/caolan/LibreOffice/co-23.05/unotools/source/config/options.cxx:75\n#8  0x00007f2296f045e4 in utl::detail::Options::ConfigurationChanged(utl::ConfigurationBroadcaster*, ConfigurationHints) (nHint=<optimized out>, this=<optimized out>)\n    at /home/caolan/LibreOffice/co-23.05/unotools/source/config/options.cxx:111\n#9  utl::ConfigurationBroadcaster::NotifyListeners(ConfigurationHints) (nHint=<optimized out>, this=0x62418e0)\n    at /home/caolan/LibreOffice/co-23.05/unotools/source/config/options.cxx:85\n#10 utl::ConfigurationBroadcaster::NotifyListeners(ConfigurationHints) (this=0x62418e0, nHint=<optimized out>)\n    at /home/caolan/LibreOffice/co-23.05/unotools/source/config/options.cxx:75\n#11 0x00007f2296ec7fbb in utl::ConfigChangeListener_Impl::changesOccurred(com::sun::star::util::ChangesEvent const&) (this=0x6302a30, rEvent=<optimized out>)\n    at /home/caolan/LibreOffice/co-23.05/unotools/source/config/configitem.cxx:131\n#12 0x00007f2281c0bda4 in configmgr::Broadcaster::send() (this=this@entry=0x7ffe6c86b7d0) at /home/caolan/LibreOffice/co-23.05/configmgr/source/broadcaster.cxx:169\n#13 0x00007f2281c2f05c in configmgr::RootAccess::commitChanges() (this=0x6fd4a40) at /home/caolan/LibreOffice/co-23.05/configmgr/source/rootaccess.cxx:169\n#14 0x00007f2296ecdbd7 in utl::ConfigItem::PutProperties(com::sun::star::uno::Sequence<rtl::OUString> const&, com::sun::star::uno::Sequence<com::sun::star::uno::Any> const&)\n    (this=this@entry=0x7453de0, rNames=uno::Sequence of length 1 = {...}, rValues=uno::Sequence of length 1 = {...})\n    at /home/caolan/LibreOffice/co-23.05/unotools/source/config/configitem.cxx:506\n#15 0x00007f2295cfec6a in svtools::ColorConfig_Impl::CommitCurrentSchemeName() (this=0x7453de0) at /home/caolan/LibreOffice/co-23.05/svtools/source/config/colorcfg.cxx:283\n#16 0x00007f2295cfee63 in svtools::EditableColorConfig::LoadScheme(rtl::OUString const&) (this=<optimized out>, rScheme=<optimized out>)\n    at /home/caolan/LibreOffice/co-23.05/svtools/source/config/colorcfg.cxx:525\n#17 0x00007f22971c373d in SfxApplication::MiscExec_Impl(SfxRequest&) (this=<optimized out>, rReq=<optimized out>) at /home/caolan/LibreOffice/co-23.05/sfx2/source/appl/appserv.cxx:615", "timestamp": "2023-08-17 16:23:31.000000000"}, {"message": "If I remember correctly my issue was that ColorConfig_Impl which was the EditableColorConfig implementation was using a global state, and sometimes when opening a second browser window and changing theme, the ChangeTheme command would do nothing because it would think the NewTheme theme name was the same as the old one. I need to check if GetCurrentSchemeName is a global state as I remember (colorconfig_impl is a static class in ColorConfig and in EditableColorConfig iirc it would get the current scheme name from somewhere and it wasn't view specific.", "timestamp": "2023-08-17 17:01:08.000000000"}]}
{"thread_id": "0a65cd74_f50278b8", "url": "https://gerrit.libreoffice.org/#/c/core/+/155568/6/vcl/skia/salbmp.cxx@238", "comments": [{"message": "Is this '&& mImage' important here? The assert below fires on ProcessAndBlurAlphaMask, which downscales the alpha mask, and then upscales it back - which keeps the sizes unsynchronized, but mImage is empty (the data is in the mBuffer, and the EnsureBitmapData handles that). I have a patch, but wanted to know if there are considerations to take into account - e.g., should I just drop the '&& mImage', or should I still check it when 'getenv(\"SAL_FORCE_HIDPI_SCALING\")', or maybe should I instead do something like '&& (mImage || mBuffer || mEraseColorSet)'?", "timestamp": "2023-08-17 09:15:33.000000000"}, {"message": "I don't know what you are seeing, but the point of this patch is to replace a valid mImage with an mBuffer in memory which is what EnsureBitmapData does. mImage is non-null and mBuffer is null before EnsureBitmapData() and mImage is null and mBuffer is non-null after. This effectively \"snapshots\" the bitmap's state. mImage is a shared_ptr and, if this SalBitmap is an alpha mask, it apparently gets changed after this call if there if window scaling != 1.0 (e.g. macOS Retina displays). Creating a new mImage doesn't work so this patch does the \"safe but slow\" conversion of an mImage to an mBuffer.\n\nIf mImage is not set, there should be no need to do this conversion. AFAICT, this bug only happens on macOS with 8 bit alpha masks since macOS due to the Retina scaling factor (do other platforms have this?) so we could add #if defined MACOSX || defined IOS around this block.\n\nOr maybe make the conditions more restrictive e.g. replace \"&& mImage\" with something like \"&& (mImage && mBitCount == 8 && !mBuffer && !mEraseColorSet)\".", "timestamp": "2023-08-17 11:45:52.000000000"}, {"message": "So IIRC, the bug I fixed would look like this: the alpha mask's mImage would be drawn upscaled 2x in some cases. But, the stretched alpha mask was low resolution so it sounds like maybe the downscaling you are seeing in ProcessAndBlurAlphaMask might possibly be the real cause of this bug?\n\nAnyway, if you have a link to a document that I can reproduce this? I can test it on macOS and see if there is anything I can change.", "timestamp": "2023-08-17 12:14:03.000000000"}, {"message": "> Anyway, if you have a link to a document that I can reproduce this? I can test it on macOS and see if there is anything I can change.\n\nIt is https://bugs.documentfoundation.org/attachment.cgi?id=182024 from tdf#150610 - it asserts here, and the function that performs the scaling (which is pending when entering this code) is drawinglayer::primitive2d::ProcessAndBlurAlphaMask in drawinglayer/source/primitive2d/GlowSoftEgdeShadowTools.cxx. My simple fix is just to remove this '&& mImage'; it looks OK, because if mPixelsSize != mSize, then something is still pending, and it seems not reasonable to spend more on this. When there's no mImage, but mBuffer and the size mismatch, then EnsureBitmapData first converts the mBuffer to mImage, then does its magic, and in the end created the updated mBuffer, which seems OK. Of course, it seems reasonable to keep the '&& mImage' check for that env var test, to avoid extra overhead in *that* case...", "timestamp": "2023-08-17 12:32:22.000000000"}, {"message": "> ... if mPixelsSize != mSize, then something is still pending, and it seems not reasonable to spend more on this\n\nI meant, not reasonable to spend time testing more conditions; to the contrary, it seems reasonable to go ahead and try to rectify the status by calling EnsureBitmapData whenever there's a size mismatch?", "timestamp": "2023-08-17 12:34:15.000000000"}, {"message": "> I meant, not reasonable to spend time testing more conditions; to the contrary, it seems reasonable to go ahead and try to rectify the status by calling EnsureBitmapData whenever there's a size mismatch?\n\nThe problem I see is that EnsureBitmapData() is really slow. It is, at best, a \"duct tape\" solution. Worse, I now realize that EnsureBitmapData() is downscaling mImage to non-Retina resolution (from mPixelsSize down to mSize). This is the heart of the problem throughout LibreOffice: there is no concept of a bitmap's backing buffer being higher resolution than the bitmap's size. That is, LibreOffice assumes a point in a bitmap can only contain 1 pixel of data.\n\nIdeally, I would not call EnsureBitmapData() and make a new mImage that is mPixelsSize. I tried creating an SkSurface, drawing mImage to it, and then setting mImage to the new SkImage extracted from the new SkSurface. That fixes the bug in document windows and slideshows, but does not fix exporting to PDF.\n\nGo ahead and remove \"&& mImage\" and then I will take a second look at recreating mImage instead of calling EnsureBitmapData().", "timestamp": "2023-08-17 12:43:59.000000000"}, {"message": "> Go ahead and remove \"&& mImage\" and then I will take a second look at recreating mImage instead of calling EnsureBitmapData().\n\nhttps://gerrit.libreoffice.org/c/core/+/155792", "timestamp": "2023-08-17 14:37:29.000000000"}, {"message": "> > Go ahead and remove \"&& mImage\" and then I will take a second look at recreating mImage instead of calling EnsureBitmapData().\n> \n> https://gerrit.libreoffice.org/c/core/+/155792\n\nLooks good to me. Interestingly, I can now really see the downscaling of the alpha mask on macOS with Retina display when running in a slideshow or exporting to PDF so I will try to replace EnsureBitmapData() which a Skia-only approach to handle to the pending resizes.", "timestamp": "2023-08-17 16:03:08.000000000"}]}
{"thread_id": "aff5cd3d_999ada77", "url": "https://gerrit.libreoffice.org/#/c/core/+/155494/2/sw/source/core/access/AccessibilityIssue.cxx@242", "comments": [{"message": "Can you open the \"Font\" tab directly?", "timestamp": "2023-08-10 06:41:10.000000000"}, {"message": "I think we need this to open the Style related Font dialog? Otherwise we would just open the font dialog related to the default style. Ot is there another uno command which would better fit here? :)", "timestamp": "2023-08-10 09:06:38.000000000"}, {"message": "The dialog is fine, but it should open the font tab directly, because there you specify the language.\n\nSee implementation of SID_STYLE_EDIT, you could add a \"page\" parameter?\nOr a separate UNO command?\n\nThe SwDocShell::Edit already has a sPage param which probably does what you need. You just need to pass the param through.", "timestamp": "2023-08-10 09:16:51.000000000"}, {"message": "Ohh yes, didn't notice that only the previous tab will be appaered and not always the Font tab. For me always the Font tab was the last what I opened. :) Thanks for the notice.", "timestamp": "2023-08-10 09:21:11.000000000"}, {"message": "Done", "timestamp": "2023-08-10 14:02:09.000000000"}]}
{"thread_id": "ca353813_fff9b0cc", "url": "https://gerrit.libreoffice.org/#/c/core/+/155494/2/sw/source/core/access/AccessibilityIssue.cxx@245", "comments": [{"message": "Please don't introduce unused code, add it whenever you actually need it (YAGNI).", "timestamp": "2023-08-10 06:41:10.000000000"}, {"message": "Done", "timestamp": "2023-08-10 09:06:38.000000000"}]}
{"thread_id": "5ab8277f_ed09966f", "url": "https://gerrit.libreoffice.org/#/c/core/+/155449/4/sc/source/ui/view/tabview3.cxx@1794", "comments": [{"message": "You dropped the nDir == 0 situation by removing the else. Couldn't find an issue but wonder if it is relevant. What do you think?", "timestamp": "2023-08-16 08:33:40.000000000"}, {"message": "I didn't remove the \"else\" expression intentionally. That was my oversight. \nBut I think that checking if \"nDir\" is equal to zero is not necessary because this check was already done in the expression \"if (!nDir) return;\". Should I send a new patch with the \"else\" expression?", "timestamp": "2023-08-16 09:57:55.000000000"}, {"message": "!nDir should be fine.", "timestamp": "2023-08-16 10:16:32.000000000"}]}
{"thread_id": "3d912401_c813efc6", "url": "https://gerrit.libreoffice.org/#/c/core/+/155724/1/svgio/inc/svgtspannode.hxx@87", "comments": [{"message": "typo", "timestamp": "2023-08-16 09:12:36.000000000"}, {"message": "Fixed in https://gerrit.libreoffice.org/c/core/+/155734. Thanks", "timestamp": "2023-08-16 09:19:19.000000000"}]}
{"thread_id": "6448ad86_9f7203ec", "url": "https://gerrit.libreoffice.org/#/c/core/+/155724/1/svgio/source/svgreader/svgdocumenthandler.cxx@97", "comments": [{"message": "wonder if it's possible that there is some text but no attributes?", "timestamp": "2023-08-16 09:12:36.000000000"}, {"message": "if the text doesn't have any attribute itself, it will get it from its parent. See svgio/source/svgreader/svgcharacternode.cxx:89", "timestamp": "2023-08-16 09:19:19.000000000"}]}
{"thread_id": "1cfbcc68_3d58ac44", "url": "https://gerrit.libreoffice.org/#/c/core/+/152857/2/include/svl/SfxBroadcaster.hxx@57", "comments": [{"message": "Looking at the impl., it doesn't seem to be the case actually. I wonder if this might be the cause of the \"parent-style has the name \"default\". But such style does not exist in the file.\" part of https://bugs.documentfoundation.org/show_bug.cgi?id=156685#c1 ? (I don't have a dev build currently to check it myself)", "timestamp": "2023-08-11 05:20:55.000000000"}, {"message": "Fixing ForAllListeners does not fix that bug, sorry", "timestamp": "2023-08-11 12:21:05.000000000"}, {"message": "Fix for ForAllListeners here: https://gerrit.libreoffice.org/c/core/+/155589", "timestamp": "2023-08-11 12:24:23.000000000"}]}
{"thread_id": "92af0cd6_01bb99ab", "url": "https://gerrit.libreoffice.org/#/c/core/+/155429/5/drawinglayer/source/primitive2d/graphicprimitivehelper2d.cxx@176", "comments": [{"message": "Is this still true on Windows or Linux? When useAlphaMask is false, rendering is noticeably grainier and darker. Note that the oval that the elephant in the following image stands on is black instead of light gray when useAlphaMask is false:\n\nhttps://bugs.documentfoundation.org/attachment.cgi?id=188792", "timestamp": "2023-08-09 14:22:16.000000000"}, {"message": "Just to be safe, I will leave the Windows and Linux code as is.", "timestamp": "2023-08-10 12:01:05.000000000"}]}
{"thread_id": "ff3fd71a_9f778a3d", "url": "https://gerrit.libreoffice.org/#/c/core/+/155429/5/drawinglayer/source/primitive2d/graphicprimitivehelper2d.cxx@185", "comments": [{"message": "Is there a better way to force the alpha mask to be copied instead of retaining a reference to maVirtualDeviceMask's alpha mask?", "timestamp": "2023-08-09 14:17:53.000000000"}, {"message": "I have not found a better way to do this.", "timestamp": "2023-08-10 12:01:05.000000000"}]}
{"thread_id": "f161e783_27ee26bc", "url": "https://gerrit.libreoffice.org/#/c/core/+/155509/1/sc/source/ui/docshell/docsh.cxx@236", "comments": [{"message": "I would expect Calc has one draw page / sheet, so this would work with the draw page's theme, while we want a single theme for a Calc document.\n\nBut I guess you know this problem and will address it later.", "timestamp": "2023-08-10 11:50:03.000000000"}]}
{"thread_id": "278c5161_e2af48c1", "url": "https://gerrit.libreoffice.org/#/c/core/+/155508/1/svx/source/svdraw/svdpage.cxx@1227", "comments": [{"message": "This will enable themes for non-master slides in Impress, but I think you'll address that in a follow-up change.", "timestamp": "2023-08-10 11:47:48.000000000"}]}
{"thread_id": "dc606d33_99902160", "url": "https://gerrit.libreoffice.org/#/c/core/+/155464/1/sw/source/core/access/AccessibilityIssue.cxx@226", "comments": [{"message": "Maybe use comphelper::dispatchCommand ?", "timestamp": "2023-08-10 06:33:39.000000000"}, {"message": "Agree, thanks. :)", "timestamp": "2023-08-10 07:54:47.000000000"}]}
{"thread_id": "10ca7de1_544cd85a", "url": "https://gerrit.libreoffice.org/#/c/core/+/153806/3/cui/source/tabpages/numpages.cxx@1427", "comments": [{"message": "Better to not change any logic in the dialog itself.\nPlease add missing set_active_id function in JSComboBox class similar to set_active instead.", "timestamp": "2023-07-12 13:20:39.000000000"}, {"message": "Done", "timestamp": "2023-08-02 08:34:39.000000000"}]}
{"thread_id": "eeadb98d_1b78f96d", "url": "https://gerrit.libreoffice.org/#/c/core/+/155459/1/framework/source/services/autorecovery.cxx@b3037", "comments": [{"message": "I'm just unsure if dropping these SAFE comments is a good thing. They actually help me to notice the bounds of locking...", "timestamp": "2023-08-09 10:15:54.000000000"}, {"message": "> I'm just unsure if dropping these SAFE comments is a good thing.\n:-) except that these are COMMENTED OUT safe comments - so they are actually confusing because they are (kind-of) not true. (almost the entire function is SAFE in this case).", "timestamp": "2023-08-09 10:47:15.000000000"}, {"message": "Why?\nHere this shows that the safe section ends (the closing brace), because the next line is 'g.clear();'; then line 3043 tells that from now on, it's safe - because the previous line is 'g.reset();'...", "timestamp": "2023-08-09 10:54:00.000000000"}, {"message": "Hmm - obviously I'm not understanding g.clear() and g.reset(). But now that you point it out I see it is called a \"Resettable\"MutextGuard. OK - I'll revert that part.", "timestamp": "2023-08-09 11:05:44.000000000"}]}
{"thread_id": "49f92635_475a209f", "url": "https://gerrit.libreoffice.org/#/c/core/+/155011/1/basic/source/runtime/methods.cxx@405", "comments": [{"message": "This change keeps the code behavior, as the `#else` part is not compiled if `_WIN32` is defined. In Visual Studio, you see `Inactive Preprocessor Block` for the block that comes between `#else` and `#endif`.\n\nBut, to achieve the goal of the EasyHack, please write it as:\n\n    if ( !ok )\n        return StarBASIC::Error( ERRCODE_BASIC_NO_DEVICE );\n    rPar.Get(0)->PutString(OUString(o3tl::toU(pBuffer)));", "timestamp": "2023-07-28 23:39:18.000000000"}, {"message": "Done", "timestamp": "2023-07-29 05:08:17.000000000"}]}
{"thread_id": "cb5291b8_06545528", "url": "https://gerrit.libreoffice.org/#/c/core/+/155011/3/basic/source/runtime/methods.cxx@381", "comments": [{"message": "The old style for one line blocks was like this:\n if ( condition )\n {\n     // one line of code\n {\n\nBut in the newer parts of the code, and as suggested by EasyHack, this is also usable:\n if (condition)\n     // one line of code\n\nPlease stick to one style in your patch. I suggest you to choose the second style.", "timestamp": "2023-07-29 11:13:16.000000000"}, {"message": "Done", "timestamp": "2023-07-29 11:27:09.000000000"}]}
{"thread_id": "414906fa_77058aee", "url": "https://gerrit.libreoffice.org/#/c/core/+/155011/3/basic/source/runtime/methods.cxx@401", "comments": [{"message": "Please add a blank line before this, as shown in the EasyHack description.", "timestamp": "2023-07-29 11:13:16.000000000"}, {"message": "also in the same file, I found some files where there are conditionals like\n```\nif (condition)\n{\n    // one line of code\n}\nelse\n{\n    // one line of code\n}\n```\n\nshould i convert these to the second format where there are no curly braces.", "timestamp": "2023-07-29 11:27:09.000000000"}, {"message": "No, do not touch other lines.", "timestamp": "2023-07-29 12:07:13.000000000"}]}
{"thread_id": "ec539429_acac2304", "url": "https://gerrit.libreoffice.org/#/c/core/+/155282/2/sfx2/source/view/viewsh.cxx@755", "comments": [{"message": "possible improvement in the future: instead of boost::property_tree we started to use our JsonWriter https://opengrok.libreoffice.org/xref/core/include/tools/json_writer.hxx?r=6086d896#34", "timestamp": "2023-08-09 05:28:30.000000000"}, {"message": "Nce to know. I'll migrate to JsonWriter in a subsequent patch.", "timestamp": "2023-08-09 07:27:46.000000000"}]}
{"thread_id": "a84d6d2d_ca4c253f", "url": "https://gerrit.libreoffice.org/#/c/core/+/155381/1/sax/source/fastparser/fastparser.cxx@1271", "comments": [{"message": "This (and everything in my review) is just a nit, but could you please move the 'throw' to the end, so that the flow would be \"if URL exists then set namespace; else if ignore missing namespace decl then clear it; else throw\". Thank you!", "timestamp": "2023-08-07 03:59:02.000000000"}, {"message": "Done.", "timestamp": "2023-08-07 12:12:59.000000000"}]}
{"thread_id": "a605fee5_194c540e", "url": "https://gerrit.libreoffice.org/#/c/core/+/154490/1/framework/source/services/autorecovery.cxx@2001", "comments": [{"message": "implts_markDocumentAsSaved is expected to remove recovery info when a document is saved. So - I believe that we need to do the magic there, pass the \"bRemoveIt\", and not rely on the additional layer of rInfo.DocumentState data.", "timestamp": "2023-07-18 06:14:49.000000000"}, {"message": "Done", "timestamp": "2023-08-03 00:02:54.000000000"}]}
{"thread_id": "73cd46c4_2b3484fa", "url": "https://gerrit.libreoffice.org/#/c/core/+/154683/7/framework/source/services/autorecovery.cxx@2988", "comments": [{"message": "These should be *pIT. It sets ListenForModify.", "timestamp": "2023-08-07 13:01:57.000000000"}]}
{"thread_id": "2f5aeb79_d236243f", "url": "https://gerrit.libreoffice.org/#/c/core/+/154683/7/framework/source/services/autorecovery.cxx@2998", "comments": [{"message": "This should be before creating aInfo, so the real m_lDocCache entry has  ListenForModify (although not really important currently).", "timestamp": "2023-08-07 13:01:57.000000000"}]}
{"thread_id": "6a494f39_4bc79779", "url": "https://gerrit.libreoffice.org/#/c/core/+/155243/1/sw/source/core/access/AccessibilityCheck.cxx@335", "comments": [{"message": "why not check the protocol of INetURLObject(sText) ?", "timestamp": "2023-08-03 09:56:40.000000000"}, {"message": "I think it was enough to check the aHyperlink protocol, from the HyperLinkURL property. Also because the sText can be invalid in other cases. Like when we use a sText = \"Link\", but the sHyperLinkURL = \"https://www.google.com/\". In that case the sHyperLinkURL is valid and the sText is invalid?", "timestamp": "2023-08-03 10:02:03.000000000"}]}
{"thread_id": "fe9eed34_95de08df", "url": "https://gerrit.libreoffice.org/#/c/core/+/155073/1/vcl/source/filter/imet/ios2met.cxx@b1131", "comments": [{"message": "This one, and the next line seem to be using `2*pi` as `6.28318530718`. Can be instances of tdf#145759.", "timestamp": "2023-08-07 00:48:38.000000000"}]}
{"thread_id": "06b5a010_150b18de", "url": "https://gerrit.libreoffice.org/#/c/core/+/155061/5/sw/source/core/layout/tabfrm.cxx@3517", "comments": [{"message": "would be more efficient to check if rHint has already been found here, before calling FindPageFrame", "timestamp": "2023-07-31 08:15:00.000000000"}, {"message": "Can do, but would leave an assert in the update function then just to be sure.", "timestamp": "2023-07-31 12:35:24.000000000"}, {"message": "Done", "timestamp": "2023-08-02 13:00:24.000000000"}]}
{"thread_id": "d645a75d_bcbfa384", "url": "https://gerrit.libreoffice.org/#/c/core/+/155061/6/sw/source/core/layout/trvlfrm.cxx@1844", "comments": [{"message": "Eh, this needs to be CallSwClientNotify as in Patchset 3 (rebase fumble).", "timestamp": "2023-07-31 12:35:24.000000000"}, {"message": "Done", "timestamp": "2023-08-02 13:00:24.000000000"}]}
{"thread_id": "7bb9744e_4e8777e6", "url": "https://gerrit.libreoffice.org/#/c/core/+/155284/1/reportdesign/source/ui/report/ViewsWindow.cxx@1053", "comments": [{"message": "Minor performance nit: I did some testing and _pSection does not appear to change with each pass through the loop so maybe refetching _pHdl can be moved to the end of the loop and called only once?", "timestamp": "2023-08-03 13:07:27.000000000"}]}
{"thread_id": "bdded2dd_f810f47c", "url": "https://gerrit.libreoffice.org/#/c/core/+/153069/12/compilerplugins/clang/staticmethods.cxx@188", "comments": [{"message": "It might look odd to add a new special case, but those members are used in a function pointer table so I can either add this special case, or a bunch of no-ops to trick the plugin into thinking the method could not be static (e.g. `(void)this`).  Without an better solution, I feel like it's better to add the special case here; but tell me if you don't like it.", "timestamp": "2023-07-26 15:27:37.000000000"}, {"message": "@noelgrandin, sberg: Any opinion on how to best make the clang plugin happy here?", "timestamp": "2023-07-26 17:25:03.000000000"}, {"message": "Adding a special case here is fine.", "timestamp": "2023-07-27 09:14:48.000000000"}]}
{"thread_id": "f46a0d9d_4d793c51", "url": "https://gerrit.libreoffice.org/#/c/core/+/153069/4/vcl/qa/cppunit/a11y/atspi2/atspi2.cxx@103", "comments": [{"message": "That will probably need an update in line with pending https://gerrit.libreoffice.org/c/core/+/154387 .\nAnd thanks for your comment on https://gitlab.gnome.org/GNOME/at-spi2-core/-/merge_requests/146 ! \ud83d\ude0a", "timestamp": "2023-07-13 12:48:50.000000000"}, {"message": "Indeed.  BTW if you have an idea for avoiding the duplication here, that's probably be a good thing.", "timestamp": "2023-07-13 13:45:09.000000000"}, {"message": "Indeed, deduplication would be great, haven't thought about ways yet.", "timestamp": "2023-07-14 06:00:38.000000000"}, {"message": "Note also that this is mapping ATSPI constants, not ATK ones.  They are similar, but not 100% compatible unfortunately.", "timestamp": "2023-07-14 23:08:19.000000000"}, {"message": "I just updated it now https://gerrit.libreoffice.org/c/core/+/154387 has landed", "timestamp": "2023-07-18 13:59:12.000000000"}]}
{"thread_id": "893a7668_9f34fe5d", "url": "https://gerrit.libreoffice.org/#/c/core/+/153069/4/vcl/qa/cppunit/a11y/atspi2/atspi2.cxx@250", "comments": [{"message": "IIUC, that case (empty reference) would crash two lines further down", "timestamp": "2023-07-13 11:41:44.000000000"}, {"message": "Indeed, it doesn't make sense to allow this but access the reference.  Will fix (removing this part of the condition).", "timestamp": "2023-07-13 13:45:09.000000000"}, {"message": "Done", "timestamp": "2023-07-13 16:58:34.000000000"}]}
{"thread_id": "dc1ec430_60a7d763", "url": "https://gerrit.libreoffice.org/#/c/core/+/153069/4/vcl/qa/cppunit/a11y/atspi2/atspi2.cxx@299", "comments": [{"message": "Do you have any more details or specific hints on how to reproduce that? (Just uncomment the next two lines and try again?)", "timestamp": "2023-07-13 11:41:44.000000000"}, {"message": "Yeah, I think you just comment the workaround and see the issue.  Or maybe you have to run the main loop first\u2026 I'll check again.", "timestamp": "2023-07-13 13:45:09.000000000"}, {"message": "Yeah you comment out the two lines below (which are the workaround), and run the scheduler (you can uncomment the `dumpA11YTree()` call in the test entry point):\n\n```\n.../libreoffice/vcl/qa/cppunit/a11y/atspi2/atspi2.cxx:308:Test1::TestBody\nequality assertion failed\n- Expected: 0\n- Actual  : 1\n- Unmatched state: ATSPI_STATE_FOCUSED\n```", "timestamp": "2023-07-13 22:38:54.000000000"}, {"message": "Nothing to do in the context of this change, let's leave the workaround for now.", "timestamp": "2023-07-27 15:04:59.000000000"}]}
{"thread_id": "b8f94673_5afebbd2", "url": "https://gerrit.libreoffice.org/#/c/core/+/153069/12/vcl/qa/cppunit/a11y/atspi2/atspi2.cxx@268", "comments": [{"message": "There's now https://gerrit.libreoffice.org/c/core/+/154947 to address this FIXME.", "timestamp": "2023-07-26 17:23:05.000000000"}, {"message": "And it works, thanks!  I'll remove this once that lands.", "timestamp": "2023-07-27 08:58:37.000000000"}, {"message": "Done", "timestamp": "2023-07-27 15:17:46.000000000"}]}
{"thread_id": "2e4e1121_7604d5ac", "url": "https://gerrit.libreoffice.org/#/c/core/+/153069/4/vcl/qa/cppunit/a11y/atspi2/atspi2text.cxx@761", "comments": [{"message": ";)", "timestamp": "2023-07-13 11:41:44.000000000"}, {"message": "Done", "timestamp": "2023-07-26 17:23:05.000000000"}, {"message": "BTW I can remove the extra comment if you like and be a bit more formal here", "timestamp": "2023-07-27 08:58:37.000000000"}, {"message": "There's no rule about that. I personally don't add such comments, but see others doing it and sometimes it makes reading code a bit more fun, so that's up to you to decide. :)", "timestamp": "2023-07-27 09:08:50.000000000"}, {"message": "I actually just removed it, I was just annoyed by the unpaired surrogates at that point, it doesn't bring any value \ud83d\ude0a", "timestamp": "2023-07-27 15:17:46.000000000"}]}
{"thread_id": "d09cffe3_1459950b", "url": "https://gerrit.libreoffice.org/#/c/core/+/153069/4/vcl/qa/cppunit/a11y/atspi2/atspi2text.cxx@766", "comments": [{"message": "Just rechecked (had done so earlier) and at least from what I see in Accerciser's IPython console, it seems like ATK or libatspi is providing some fallback implementation. With a paragraph \"Hello world \" selected in accerciser's treeview:\n\n```\nIn [3]: text.getStringAtOffset(0, 0)\nOut[3]: ('W', 0, 1)\nIn [4]: text.getStringAtOffset(0, 1)\nOut[4]: ('Werwerwer ', 0, 10)\nIn [5]: text.getStringAtOffset(0, 0)\nOut[5]: ('H', 0, 1)\nIn [6]: text.getStringAtOffset(0, 1)\nOut[6]: ('Hello ', 0, 6)\nIn [7]: text.getStringAtOffset(0, 2)\nOut[7]: ('Hello world ', 0, 12)\n```\n\nIf so, is that good enough or should the gtk3 VCL still implement that?", "timestamp": "2023-07-13 11:41:44.000000000"}, {"message": "From a consumer POV, I think it's mostly fine to rely on atk-adaptor's one, but it doesn't support GRANULARITY_PARAGRAPH, yet I don't know how many consumers there already is for this.  So\u2026 ideally it'd be implemented, but it doesn't strike me as a priority.\nAlso note that there is no fallback the other way around, so LO would have to implement both for keeping older consumer working.", "timestamp": "2023-07-13 13:45:09.000000000"}, {"message": "Nothing to do here in the context of this Gerrit change, keeping the workaround for now is IMHO fine.", "timestamp": "2023-07-27 15:04:59.000000000"}, {"message": "Yeah, actually I removed the TODO that doesn't really make any sense here.", "timestamp": "2023-07-27 15:17:46.000000000"}]}
{"thread_id": "0b2b44b3_69e2c76a", "url": "https://gerrit.libreoffice.org/#/c/core/+/153069/4/vcl/qa/cppunit/a11y/atspi2/atspi2text.cxx@935", "comments": [{"message": "Is that something that would break (have to be adapted) in case LO started exposing off-screen paragraphs via the a11y layer? as suggested e.g. in tdf#35652 (and IIRC, you also recommended in some Impress-related Gerrit change once that offscreen objects should be exposed in general).", "timestamp": "2023-07-13 11:41:44.000000000"}, {"message": "Yes, it would have to be adapted, as here the way to find an off-screen element to scroll in relies on this implementation.  But it should be easier to write a version working with a complete tree, basically it should be a mere matter of verifying whether it has states `SHOWING|VISIBLE` instead.  If you insist, I can probably (assuming states are correct for those objects right now, I'd have to verify it) write a version that would work both ways, by looking for a child without those states in a compatible way (probably merely iterating relations would work).", "timestamp": "2023-07-13 13:45:09.000000000"}, {"message": "Thanks for the explanation. If you want to write a version that works for both, that's nice, but it's not a requirement now. The question was mostly to check whether I understood that correctly.", "timestamp": "2023-07-14 06:00:38.000000000"}, {"message": "Unfortunately my attempt at a (probably, as I can't really test it) generic way failed, because I have troubles with the off-screen objects updating their state set somehow (as mentioned above).  I can reproduce weird things in Accerciser as well, so it doesn't seem to be related to the test case itself, nor to the GTK VCL (in the test case I was using the internal API).\n\nAnyway, if we need to update it at some point, it should not be a problem if the rest of the things work OK.  It could even be simplified if we could rely on having all children available, and it wouldn't be too complicated:\n\n1. find a child (that implements XAccessibleText) that is VISIBLE but not SHOWING\n2. call scrollSubstringTo() on it (using ATSPI)\n3. check it became SHOWING\n\nand that's all there is to it.  If we don't have to worry about children disappearing then, it should be fairly trivial.", "timestamp": "2023-07-19 15:22:22.000000000"}, {"message": "OK, thanks for looking into it and the explanation!", "timestamp": "2023-07-19 17:03:29.000000000"}]}
{"thread_id": "9ad4649a_d19a5e1b", "url": "https://gerrit.libreoffice.org/#/c/core/+/155165/1/framework/source/services/autorecovery.cxx@2900", "comments": [{"message": "Better to just use existing bAllowUserIdle.", "timestamp": "2023-08-02 16:28:48.000000000"}]}
{"thread_id": "5298ddb4_f70a65c6", "url": "https://gerrit.libreoffice.org/#/c/core/+/155218/1/sw/source/core/unocore/unoobj2.cxx@136", "comments": [{"message": "note that the DynCast* calls are considerably cheaper than dynamic_cast, but that probably doesn't matter here :-)", "timestamp": "2023-08-02 10:24:25.000000000"}, {"message": "Aha, we can move DynCastFlyAtContentFrame() to SwFrame if it would show up on a perf profile, that would avoid dynamic_cast and still allow simpler code in lcl_CollectFrameAtNodeWithLayout().", "timestamp": "2023-08-02 11:14:34.000000000"}, {"message": "That sounds like a good idea", "timestamp": "2023-08-02 11:17:18.000000000"}]}
{"thread_id": "9a3f5f15_144e3548", "url": "https://gerrit.libreoffice.org/#/c/core/+/155081/2/sw/source/core/unocore/unoobj2.cxx@131", "comments": [{"message": "Is there a need for two DynCasts? i.e. just use DynCastFlyAtContentFrame alone?", "timestamp": "2023-08-02 09:44:24.000000000"}, {"message": "See https://gerrit.libreoffice.org/c/core/+/155218, DynCastFlyAtContentFrame() can only be called on an SwFlyFrame, as it's not really a dynamic cast, rather it checks if m_bAtCnt is set on the fly frame. But a single dynamic cast results in simpler code, I did just that.", "timestamp": "2023-08-02 10:01:32.000000000"}]}
{"thread_id": "6ba18677_9ada2cdd", "url": "https://gerrit.libreoffice.org/#/c/core/+/154144/6/sw/qa/uitest/writer_tests/tdf156165.py@28", "comments": [{"message": "I've located the checkbox corresponding to Replace Custom Styles, but I don't know how to toggle it. The only way I can think of is use checkbox.executeAction(\"CLICK\", tuple()), which indeed changes the status, but it gets stuck and outputs:\nwarn:vcl.schedule:211122:211383:vcl/source/app/svapp.cxx:386: ProcessEventsToIdle: 1000\n\nAny idea on how to toggle it?", "timestamp": "2023-07-27 02:18:00.000000000"}, {"message": "Works here on Windows, if I switch to the correct tab before clicking on the checkbox:\n\n# -*- tab-width: 4; indent-tabs-mode: nil; py-indent-offset: 4 -*-\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n\nfrom uitest.framework import UITestCase\nfrom uitest.uihelper.common import get_state_as_dict, get_url_for_data_file\nfrom uitest.uihelper.common import select_pos\nfrom libreoffice.uno.propertyvalue import mkPropertyValues\n\nclass tdf156165(UITestCase):\n\n   def test_tdf156165(self):\n        with self.ui_test.load_file(get_url_for_data_file(\"tdf156165.odt\")):\n            xMainWindow = self.xUITest.getTopFocusWindow()\n            writer_edit = xMainWindow.getChild(\"writer_edit\")\n\n            with self.ui_test.execute_dialog_through_command(\".uno:AutoCorrectDlg\") as xDialog:\n                xTabs = xDialog.getChild(\"tabcontrol\")\n                select_pos(xTabs, \"2\") # 'Options' tab\n\n                options=xDialog.getChild(\"list\")\n                checkbox=options.getChild(\"16\")\n\n                # set Replace Custom Styles to True\n                if get_state_as_dict(checkbox)[\"IsChecked\"]==\"false\":\n                    checkbox.executeAction(\"CLICK\", tuple())\n                self.assertEqual(\"true\", get_state_as_dict(checkbox)[\"IsChecked\"])\n\n            writer_edit.executeAction(\"SELECT\", mkPropertyValues({\"END_POS\": \"0\", \"START_POS\": \"12\"}))\n            self.xUITest.executeCommand(\".uno:AutoFormatApply\")\n            writer_edit.executeAction(\"SELECT\", mkPropertyValues({\"END_POS\": \"12\", \"START_POS\": \"12\"}))\n            writer_edit.executeAction(\"TYPE\", mkPropertyValues({\"KEYCODE\": \"RETURN\"}))\n\n            with self.ui_test.execute_dialog_through_command(\".uno:AutoCorrectDlg\") as xDialog:\n                xTabs = xDialog.getChild(\"tabcontrol\")\n                select_pos(xTabs, \"2\") # 'Options' tab\n\n                options=xDialog.getChild('list')\n                checkbox=options.getChild(\"16\")\n\n                # set Replace Custom Styles to False\n                checkbox.executeAction(\"CLICK\", tuple())\n                self.assertEqual(\"false\", get_state_as_dict(checkbox)[\"IsChecked\"])\n\n            writer_edit.executeAction(\"SELECT\", mkPropertyValues({\"END_POS\": \"0\", \"START_POS\": \"12\"}))\n            self.xUITest.executeCommand(\".uno:AutoFormatApply\")\n            writer_edit.executeAction(\"SELECT\", mkPropertyValues({\"END_POS\": \"12\", \"START_POS\": \"12\"}))\n            writer_edit.executeAction(\"TYPE\", mkPropertyValues({\"KEYCODE\": \"RETURN\"}))\n\n\n# vim: set shiftwidth=4 softtabstop=4 expandtab:", "timestamp": "2023-07-27 04:38:43.000000000"}, {"message": "I'm aware of switching tabs, but with those two lines added, the warning is still there and the uitest gets stuck. May I know what command you are using to run the uitest? I'm using this in linux: https://wiki.documentfoundation.org/Development/UITests#Running_the_test", "timestamp": "2023-07-27 05:00:42.000000000"}, {"message": "I simply run\n\n  make UITest_writer_tests UITEST_TEST_NAME=tdf156165.tdf156165.test_tdf156165", "timestamp": "2023-07-27 05:39:54.000000000"}, {"message": "Baole: are you sure it gets stuck in the dialog? Do you see it interactively?\n\nI didn't think about it initially, but now I think I need to mention that the test crashes (fails an assertion) for me in the last part, after it first selected the text in the first paragraph, applied autocorrect, then appended a new paragraph; then the cursor is there in the new empty paragraph, and you open the dialog, click the checkbox, and then try to select from 0 to 12 (or from 12 to 0, which is strange) - but there's no \"12\" in this paragraph.", "timestamp": "2023-07-27 05:51:11.000000000"}, {"message": "I haven't experimented with the AutoCorrect part yet, so that part could be wrong. Are you using PYTHON_TEST_NAME=\"tdf134734\" make UITest_writer_tests to run the tests?", "timestamp": "2023-07-27 12:21:04.000000000"}, {"message": "No, I don't - I already posted you the whole command line I use.", "timestamp": "2023-07-27 12:39:13.000000000"}, {"message": "damn, it seems the test is able to run with the make command. The warning seems to be a problem with https://wiki.documentfoundation.org/Development/UITests#Running_the_test.\n\nPlus, switching tabs is unnecessary for the test.", "timestamp": "2023-07-27 13:23:52.000000000"}, {"message": "> Plus, switching tabs is unnecessary for the test.\n\nBut is necessary for me, to see what happens - which is important when things break. Please avoid such \"simplifications\".", "timestamp": "2023-07-27 13:27:40.000000000"}, {"message": "The test is completed now", "timestamp": "2023-07-27 14:52:26.000000000"}, {"message": "can you review this?", "timestamp": "2023-07-28 16:31:36.000000000"}]}
{"thread_id": "f433a0b5_bbc278d0", "url": "https://gerrit.libreoffice.org/#/c/core/+/154144/7/sw/qa/uitest/writer_tests/tdf156165.py@51", "comments": [{"message": "Is there some property (control text?) that you can check/assert to make sure it's the correct checkbox?", "timestamp": "2023-07-28 17:28:57.000000000"}, {"message": "sure, I've checked its text", "timestamp": "2023-07-28 18:32:26.000000000"}]}
{"thread_id": "a0925ccf_387a37e9", "url": "https://gerrit.libreoffice.org/#/c/core/+/154144/7/sw/qa/uitest/writer_tests/tdf156165.py@69", "comments": [{"message": "Here you put sleep(), but not above. I suggest to make it consistent, and use a sleep() before each test.", "timestamp": "2023-07-28 17:28:57.000000000"}, {"message": "it is now added", "timestamp": "2023-07-28 18:32:26.000000000"}]}
{"thread_id": "8cd5fde0_21f8211d", "url": "https://gerrit.libreoffice.org/#/c/core/+/154144/4/sw/source/core/edit/autofmt.cxx@2410", "comments": [{"message": "This is an unrelated formatting change. If you didn't add this line, this file wouldn't appear in the commit at all. Please revert.", "timestamp": "2023-07-10 20:09:56.000000000"}, {"message": "Done", "timestamp": "2023-07-10 20:50:06.000000000"}]}
{"thread_id": "2650345a_e7a83f77", "url": "https://gerrit.libreoffice.org/#/c/core/+/154909/4/desktop/source/app/app.cxx@530", "comments": [{"message": "Printing a hard-coded English string (incl. a hard-coded \"LibreOffice\" product name) to stderr is not ideal.  See functions like `FatalError` and `Desktop::HandleBootstrapErrors` in this file for ways LO tries to get as good a message across to the user as it can at a given state of the bootstrap cycle.", "timestamp": "2023-08-01 07:45:13.000000000"}, {"message": "Done", "timestamp": "2023-08-01 23:50:45.000000000"}]}
{"thread_id": "54ba7330_714c34ad", "url": "https://gerrit.libreoffice.org/#/c/core/+/155060/4/vcl/qa/cppunit/complextext.cxx@572", "comments": [{"message": "Nit: the order of the arguments is meant to be the opposite, and then the failure message will be what you expect, not this swapped one. :-)", "timestamp": "2023-08-01 11:39:23.000000000"}, {"message": "Thanks, I always mix this up for some reason.", "timestamp": "2023-08-01 11:47:47.000000000"}]}
{"thread_id": "48457043_2a03f676", "url": "https://gerrit.libreoffice.org/#/c/core/+/154964/4/editeng/source/editeng/impedit2.cxx@1745", "comments": [{"message": "this one should also be nPos = nPrevPos", "timestamp": "2023-07-28 08:43:12.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/155036", "timestamp": "2023-07-30 07:49:43.000000000"}]}
{"thread_id": "f91c0436_a5450a68", "url": "https://gerrit.libreoffice.org/#/c/core/+/154964/4/editeng/source/editeng/impedit2.cxx@1746", "comments": [{"message": "not sure what this is, also an index?", "timestamp": "2023-07-28 08:43:12.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/155036", "timestamp": "2023-07-30 07:49:43.000000000"}]}
{"thread_id": "c9a00b3e_ad21c03d", "url": "https://gerrit.libreoffice.org/#/c/core/+/154964/4/sw/source/core/text/porlay.cxx@1470", "comments": [{"message": "same here", "timestamp": "2023-07-28 08:43:12.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/155036", "timestamp": "2023-07-30 07:49:43.000000000"}]}
{"thread_id": "f5bdbf4e_2fd68bab", "url": "https://gerrit.libreoffice.org/#/c/core/+/154405/2/sc/source/ui/app/inputwin.cxx@405", "comments": [{"message": "It would be nice for a follow-up, if you use ScInputWindow::AutoSum for this to deduplicate. Thanks!", "timestamp": "2023-07-14 04:49:20.000000000"}, {"message": "That fix is now tracked in https://gerrit.libreoffice.org/c/core/+/155058", "timestamp": "2023-07-30 01:15:48.000000000"}]}
{"thread_id": "e92b8638_7b6d54c5", "url": "https://gerrit.libreoffice.org/#/c/core/+/150954/12/editeng/source/misc/acorrcfg.cxx@341", "comments": [{"message": "Why is this out of order? \ud83d\ude0a", "timestamp": "2023-07-27 07:39:27.000000000"}, {"message": "\ud83d\ude1c", "timestamp": "2023-07-29 19:33:26.000000000"}]}
{"thread_id": "0e6c929f_f44d6c72", "url": "https://gerrit.libreoffice.org/#/c/core/+/154415/2/sfx2/source/doc/sfxbasemodel.cxx@3110", "comments": [{"message": "Its likely that changing 0 to static_cast<sal_Int32>(0) here solves the \"no matching function for call to 'cppu_detail_getUnoType'\" error", "timestamp": "2023-07-27 10:24:19.000000000"}]}
{"thread_id": "838c5282_d400f9e2", "url": "https://gerrit.libreoffice.org/#/c/core/+/154938/1/framework/source/uielement/menubarmanager.cxx@729", "comments": [{"message": "I believe any Activate call needs to be paired with Deactivate, as otherwise m_bActive will remain true, making the next Activate call do nothing.", "timestamp": "2023-07-26 16:41:47.000000000"}, {"message": "Thanks for the notice, Maxim. :)", "timestamp": "2023-07-26 18:34:22.000000000"}, {"message": "Done", "timestamp": "2023-07-27 08:56:11.000000000"}]}
{"thread_id": "1f0293a3_d90f81b0", "url": "https://gerrit.libreoffice.org/#/c/core/+/154947/1/accessibility/source/standard/accessiblemenubasecomponent.cxx@305", "comments": [{"message": "Any reason to provide the new value, but not the old one?\nThe only other emitter of `ROLE_CHANGED` seems to be `SwAccessibleParagraph`, and it doesn't give *any* value, neither for old nor new.\n\nI just wonder what this *should* do.  In practice, it's not used so anything would work fine.", "timestamp": "2023-07-27 08:34:54.000000000"}, {"message": "The documentation didn't say anything, but indeed, the value isn't needed. I've dropped it and submitted a change to make the documentation more specific: \nhttps://gerrit.libreoffice.org/c/core/+/154987", "timestamp": "2023-07-27 10:51:58.000000000"}]}
{"thread_id": "b3d77b7f_6d75d8ef", "url": "https://gerrit.libreoffice.org/#/c/core/+/154947/2/accessibility/source/standard/accessiblemenubasecomponent.cxx@297", "comments": [{"message": "This is not needed anymore", "timestamp": "2023-07-27 12:08:10.000000000"}, {"message": "Indeed; dropped in PS3", "timestamp": "2023-07-27 12:28:04.000000000"}]}
{"thread_id": "4aca21df_864bc7be", "url": "https://gerrit.libreoffice.org/#/c/core/+/154947/1/vcl/source/window/menu.cxx@687", "comments": [{"message": "what about moving this next to the `nOldRoleBits`?  Given how it is computed it feels odd being down here.\n\nAlso, I'd have the bits in only one place to make things easier, like `const MenuItemBits nRoleMask = (MenuItemBits::CHECKABLE | MenuItemBits::RADIOCHECK);`.\nBut that's all purely style considerations \ud83d\ude0a", "timestamp": "2023-07-27 08:34:54.000000000"}, {"message": "Thanks, that's indeed better. I've changed it in PS 2.", "timestamp": "2023-07-27 10:51:58.000000000"}]}
{"thread_id": "1e7e7634_2c1fbcf2", "url": "https://gerrit.libreoffice.org/#/c/core/+/116767/2/sc/source/ui/miscdlgs/linkarea.cxx@257", "comments": [{"message": "Caveat, theoretically there can be empty index slots if a ScRangeData was erased from the map and the index wasn't reused, as findByIndex() finds the ScRangeData index, not a positional index. So it should be checked if findByIndex(i) returned nullptr. \n\nAlso, pRangeName->size() does not have to equal the maximum index used if ScRangeData was erased. However, this may work here because during import ScRangeData are only added and a comment should state that circumstance. It would be cleaner though to obtain the highest possible index as ScRangeName::maIndexToData.size()+1 (would need a new getter function as maIndexToData can't be accessed).", "timestamp": "2021-07-14 08:28:40.000000000"}]}
{"thread_id": "f86669df_8ad3b36d", "url": "https://gerrit.libreoffice.org/#/c/core/+/154977/2/sc/qa/uitest/calc_tests9/tdf156268.py@19", "comments": [{"message": "Hmm...?\nThe whole test does not really explain what it tests - specifically, what constellation created the crashing condition (cell width? data length? formula? zoom?)\nAnd this comment seems to confuse even more ;)", "timestamp": "2023-07-27 09:09:24.000000000"}, {"message": "This is a leftover, and I should have added something similar to the commit message.", "timestamp": "2023-07-27 11:54:31.000000000"}]}
{"thread_id": "c94b58e2_c63edda5", "url": "https://gerrit.libreoffice.org/#/c/core/+/154836/1/svx/source/dialog/ThemeDialog.cxx@89", "comments": [{"message": "Wouldn't it be better to derive from std::enable_shared_from_this and use shared_from_this() here?", "timestamp": "2023-07-24 09:01:23.000000000"}, {"message": "Done. ThemeDialog already extends  std::enable_shared_from_this", "timestamp": "2023-07-24 09:07:17.000000000"}, {"message": "Ah, I thought so, but wasn't sure. Great.", "timestamp": "2023-07-24 10:44:36.000000000"}]}
{"thread_id": "074a2bcb_15cbcdd3", "url": "https://gerrit.libreoffice.org/#/c/core/+/154836/3/svx/source/dialog/ThemeDialog.cxx@90", "comments": [{"message": "A syntactic sugar could be this one line:\n\n    weld::DialogController::runAsync(pDialog, [this, xKeepAlive=shared_from_this(), pDialog](sal_uInt32 nResult) {", "timestamp": "2023-07-24 15:19:13.000000000"}]}
{"thread_id": "19f5da8c_6a2245c7", "url": "https://gerrit.libreoffice.org/#/c/core/+/154581/1/sw/source/core/txtnode/txtedt.cxx@2139", "comments": [{"message": "Remains zero, and is likely totally wrong.", "timestamp": "2023-07-18 13:04:40.000000000"}, {"message": "Done", "timestamp": "2023-07-20 12:07:29.000000000"}]}
{"thread_id": "70cd47b7_6110887b", "url": "https://gerrit.libreoffice.org/#/c/core/+/152591/2/sc/source/ui/dbgui/textimportoptions.cxx@117", "comments": [{"message": "Let's not introduce new OSL_ENSURE() calls. If it is a condition that should not happen and indicates a programming error then use assert(), if it is meant to be a warning then use SAL_WARN().", "timestamp": "2023-07-24 18:42:00.000000000"}, {"message": "Done", "timestamp": "2023-07-24 20:22:44.000000000"}]}
{"thread_id": "4d2bc0fc_bba0370a", "url": "https://gerrit.libreoffice.org/#/c/core/+/154429/1/sw/source/core/docnode/ndtbl.cxx@1922", "comments": [{"message": "coverity claims a use of a pointer to local outside scope here. https://gerrit.libreoffice.org/c/core/+/154767 was my quick fix for that in trunk, maybe that should be included in this backport?", "timestamp": "2023-07-23 20:45:18.000000000"}, {"message": "thanks good catch; squashed", "timestamp": "2023-07-24 08:33:26.000000000"}]}
{"thread_id": "1a7ae37a_4557ca58", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/85/cppcanvas/source/mtfrenderer/transparencygroupaction.cxx@239", "comments": [{"message": "Looks like I accidentally deleted the following line. I will add that back in the next patch set:\n\naVDev->SetMapMode();", "timestamp": "2023-06-24 13:51:57.000000000"}, {"message": "Done", "timestamp": "2023-06-24 19:50:01.000000000"}]}
{"thread_id": "468d4425_307cfede", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/87/cppcanvas/source/mtfrenderer/transparencygroupaction.cxx@236", "comments": [{"message": "Clearing a VirtualDevice with a transparent color should not be necessary. So this should be removed once clearing with a transparent color is removed.\n\nSee my comment about VirtualDevice's AlphaMask changes in vcl/source/gdi/virdev.cxx.", "timestamp": "2023-06-25 12:32:55.000000000"}, {"message": "Done", "timestamp": "2023-06-25 15:14:44.000000000"}]}
{"thread_id": "68fb15f9_def67838", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/89/cppcanvas/source/mtfrenderer/transparencygroupaction.cxx@235", "comments": [{"message": "Although the following code fixes a Skia rendering bug, it seems strange that this fix is needed for only Skia. Maybe something is missing in the Skia code or is this a bug only on macOS?", "timestamp": "2023-06-26 15:23:05.000000000"}, {"message": "This appears to be necessary on windows too, to make the first attachment (https://bugs.documentfoundation.org/attachment.cgi?id=187972) work", "timestamp": "2023-06-27 12:15:21.000000000"}]}
{"thread_id": "2283e8b7_abfb5d5c", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/66/sd/qa/unit/PNGExportTests.cxx@45", "comments": [{"message": "Possibly add the details like failure text and the line?", "timestamp": "2023-03-13 11:42:26.000000000"}, {"message": "I think that this is now resolved since patch set 79 no longer skips macOS for this test.", "timestamp": "2023-06-13 13:21:38.000000000"}]}
{"thread_id": "c8a2ed0d_605c5372", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/12/vcl/skia/gdiimpl.cxx@1707", "comments": [{"message": "There are more kDstOut cases in Skia than these two, did you check it's only these two that need altering? The Skia backend has a fairly good unittest coverage, so \"SAL_SKIA=raster SAL_ENABLESKIA=1 SAL_USE_VCLPLUGIN=gen omake vcl.unitcheck\" should help.", "timestamp": "2021-04-27 10:58:46.000000000"}, {"message": "I replaced SkBlendMode::kDstIn with SkBlendMode::kDstATop when drawing bitmaps as SkBlendMode::kDstATop does not blend the alpha values of the underlying source pixels. SkBlendMode::kDstIn's \"alpha source blending\" causes transparent gradients to blend with the white background of an empty VirtualDevice.\n\nYou can see this behavior by running the following file in a slideshow with either Skia/Metal or Skia/Raster on macOS:\n\nhttps://bugs.documentfoundation.org/attachment.cgi?id=188073\n\nIn contrast, SkBlendMode::kDstATop ignores the alpha of the underlying VirtualDevice when drawing which matches the blending used when Skia is disabled.", "timestamp": "2023-06-25 12:32:55.000000000"}]}
{"thread_id": "463a3328_6cf2b354", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/99/vcl/skia/gdiimpl.cxx@1322", "comments": [{"message": "This was the only case that I could not switch back to SkBlendMode:kDstIn in patch set 99.\n\nI am not sure where the \"mask\" alpha mask is getting double blended. But only blending with the \"alpha\" alpha mask (i.e. mpAlphaVDev's current mask) fixes the transparency growth problem but it feels hacky to me.", "timestamp": "2023-07-04 22:06:35.000000000"}, {"message": "I will likely need revert this change as I found that while it fixes the overlapping transparency problem, it causes the following document with an .svg to draw white areas:\n\nhttps://bugs.documentfoundation.org/attachment.cgi?id=188131\n\nI now think both problems are caused by the following call in vcl/source/outdev/bitmap.cxx:349 which is only called when Skia is enabled:\n\nmpAlphaVDev->BlendBitmap(aTR, rAlpha);", "timestamp": "2023-07-14 13:41:52.000000000"}, {"message": "This particular is now resolved by removing the call to mpGraphics->BlendBitmap() in vcl/source/outdev/bitmap.cxx:349.", "timestamp": "2023-07-18 16:02:59.000000000"}]}
{"thread_id": "19ec2766_879d9aa8", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/101/vcl/skia/gdiimpl.cxx@1359", "comments": [{"message": "I have stared at this code for quite some time and the only way this hack makes sense to me is if some other code is inverting the alpha channel of the surface the mask is drawn to. skiaBitmap.GetAlphaSkShader returns white for drawn areas of the bitmap and black for transparent areas of the bitmap. But what gets drawn without this hack is the transparent areas of the bitmqp are filled with the mask color and the drawn areas are transparent. Is drawShader()'s default SkBlendMode::kSrcOver to blame for inverting the alpha mask or is it happening later?", "timestamp": "2023-07-05 16:51:04.000000000"}, {"message": "This still works in patch set 116 so marking as resolved.", "timestamp": "2023-07-20 15:19:57.000000000"}]}
{"thread_id": "87730f01_6b89652f", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/115/vcl/skia/gdiimpl.cxx@1287", "comments": [{"message": "I'm not entirely convinced this is the right choice here. kSrcATop might be more likely.", "timestamp": "2023-07-19 14:06:33.000000000"}, {"message": "I remember testing nearly every SkBlendMode here and none worked. The closest was kLighten or kDarken (can't remember which) but that broken other slideshow and printing cases.\n\nI really think that this is due to the same cause as https://bugs.documentfoundation.org/show_bug.cgi?id=156361 on master and libreoffice-7-6. My feeling is that this \"blending of alpha masks\" never actually worked for cases where we are drawing to a VirtualDevice with transparent pixels. It works find if the existing VirtualDevice is filled.\n\nWhile I get the simplicity of just drawing a grayscale bitmap, I believe that the result in the alpha mask doesn't actually match the resulting alpha channel in the VirtualDevice after calling mpGraphics->BlendAlphaBitmap().\n\nPersonally, I think we will probably need to just construct a new AlphaMask for the VirtualDevice by extracting the VirtualDevice's alpha channel after calling mpGraphics->BlendAlphaBitmap(). Not sure how to do that yet.", "timestamp": "2023-07-19 14:39:29.000000000"}, {"message": "I realized that in this case, two opaque grayscale alpha masks are being blended so blend mode is only blending grayscale colors, not alpha. So, I have posted what I think the blending algorithm should do in the following comment:\n\nhttps://bugs.documentfoundation.org/show_bug.cgi?id=156361#c5", "timestamp": "2023-07-19 18:03:32.000000000"}, {"message": "Resolved by backporting the following Gerrit change from master:\n\nhttps://gerrit.libreoffice.org/c/core/+/154678", "timestamp": "2023-07-20 15:19:57.000000000"}]}
{"thread_id": "ecd48ca2_885e30d9", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/85/vcl/skia/salbmp.cxx@230", "comments": [{"message": "This assert has been downgraded to a warning because if you create a VirtualDevice with alpha and then call the following, it will trigger the assert:\n\nVirtualDevice::SetBackground(Wallpaper(COL_TRANSPARENT));\nVirtualDevice::Erase();", "timestamp": "2023-06-24 13:51:57.000000000"}, {"message": "Changing to unresolved as clearing a VirtualDevice with a transparent color should not be necessary. So this should be reverted once clearing with a transparent color is removed.\n\nSee my comment about VirtualDevice's AlphaMask changes in vcl/source/gdi/virdev.cxx.", "timestamp": "2023-06-25 12:32:55.000000000"}, {"message": "Done", "timestamp": "2023-06-25 15:14:44.000000000"}]}
{"thread_id": "d5404775_cddd4d14", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/107/vcl/skia/salbmp.cxx@646", "comments": [{"message": "This works on macOS and is actually pretty fast. With Skia/Metal, Nearly all calls to this inverting block of code were only a few milliseconds each.\n\nDoes this fix work on Windows and Linux?", "timestamp": "2023-07-08 17:20:23.000000000"}, {"message": "I can't test on Linux (dont have a supported graphics card there), but on my Windows box it does", "timestamp": "2023-07-08 18:31:26.000000000"}]}
{"thread_id": "235fe5bc_bd11de36", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/108/vcl/skia/salbmp.cxx@646", "comments": [{"message": "I have isolated the CppunitTest_sw_htmlexport unit test failure to SkiaSalBitmap::Invert(). Either with or without the Skia changes I made here, that test will fail.\n\nPreviously, non-Skia code was used and that worked so I need to investigate what is happening in the CppunitTest_sw_htmlexport unit test.", "timestamp": "2023-07-14 13:41:52.000000000"}, {"message": "The failure in CppunitTest_sw_htmlexport was because mxSalBmp was nullptr in SalBitmap::Invert, fixed now", "timestamp": "2023-07-14 20:15:47.000000000"}, {"message": "Thanks Noel! This fixes the unit test failure in my local build.", "timestamp": "2023-07-15 12:08:39.000000000"}]}
{"thread_id": "05068065_25aa1bc7", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/12/vcl/source/bitmap/BitmapEx.cxx@388", "comments": [{"message": "Code like this could really benefit from some kind of COL_ALPHA_OPAQUE or whatever, so it'd be obvious what the meaning is.", "timestamp": "2021-04-27 10:58:46.000000000"}]}
{"thread_id": "66372fba_df9f0818", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/110/vcl/source/bitmap/BitmapTools.cxx@280", "comments": [{"message": "Opening the following .odg file would hit the assert in vcl/skia/salbmp.cxx:232:\n\nhttps://bugs.documentfoundation.org/attachment.cgi?id=188395", "timestamp": "2023-07-16 13:59:27.000000000"}, {"message": "Hmmm, this is working fine on Windows.", "timestamp": "2023-07-17 13:07:00.000000000"}, {"message": "> Hmmm, this is working fine on Windows.\n\nOn macOS, I hit this assert with Skia/Metal or Skia/Raster but I don't hit the assert with Skia disabled.", "timestamp": "2023-07-17 13:42:16.000000000"}, {"message": "Weird, I cannot trigger this on my mac (but I can't test Skia/Metal on this mac). Could you email me the backtrace?", "timestamp": "2023-07-17 19:20:20.000000000"}, {"message": "https://bug-attachments.documentfoundation.org/attachment.cgi?id=188419\n\nNote: the assert is only added when I build with --enable-dbgutil and it occurs with Skia/Raster as well as Skia/Metal.", "timestamp": "2023-07-17 21:32:45.000000000"}, {"message": "Thanks, fixed with patchset 112", "timestamp": "2023-07-18 05:28:06.000000000"}]}
{"thread_id": "fe38c45d_1a7d28f6", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/91/vcl/source/bitmap/alpha.cxx@125", "comments": [{"message": "Adding this reset is necessary to prevent an assert firing where it complains about simultaneous readers/writers to a bitmap", "timestamp": "2023-06-27 13:57:23.000000000"}]}
{"thread_id": "32559daf_f41f82a8", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/103/vcl/source/bitmap/bitmappaint.cxx@63", "comments": [{"message": "This kills performance for alpha masks with Skia/Metal. We extract a pixmap from the GPU to merely ignore it.", "timestamp": "2023-07-07 17:05:47.000000000"}, {"message": "My apologies, I noticed this and fixed it on my local branch, and then forgot about it. Updated this change a new patchset.", "timestamp": "2023-07-07 19:37:05.000000000"}, {"message": "> My apologies, I noticed this and fixed it on my local branch, and then forgot about it. Updated this change a new patchset.\n\nIt is good to see that we are seeing the same behavior on more than one platform.\n\nI'll see if I can get SkiaSalBitmap::Invert() to work with a color matrix ((own color * -1) + 255) or with shaders this weekend. Changing the SkBlendMode affects all rendering so I think kDifference does something, just not what we want.\n\nSide note: it is interesting that drawing the .svg when exporting to PDF works fine so maybe that path is not inverting any alpha masks? Or we are inverting some alpha masks twice in Skia somewhere when running a slideshow or printing?", "timestamp": "2023-07-07 20:04:09.000000000"}, {"message": "See the Skia discussion here for ideas on inverting: https://groups.google.com/g/skia-discuss/c/Ujz7trgNdFc\n\nI would imagine the skia PDF export forces CPU/raster mode, because it extracts the bitmap data to write it to the PDF file.\n\nI am also currently working on updating us to the latest skia release (from m111 ro m116), release notes here: https://skia.googlesource.com/skia/+/refs/heads/main/RELEASE_NOTES.md, which hopefuly has some metal and vulkan fixes", "timestamp": "2023-07-07 20:44:30.000000000"}]}
{"thread_id": "58c72cf0_cdee1ea2", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/104/vcl/source/bitmap/bitmappaint.cxx@65", "comments": [{"message": "mxSalBmp->Invert() was always returning false for at least Skia/Metal alpha masks since ScopedReadAccess pReadAcc(*this); fetched pixels from the GPU and SkiaSalBitmap::Invert() returns false if the SkiaSalBitmap has cached a copy of pixel buffer.\n\nMarking as unresolved because, with this change. it appears that SkiaSalBitmap::Invert() does not actually invert the bitmap and rendering of the transparent .svg image in the following document and in the About dialog are now broken:\n\nhttps://bugs.documentfoundation.org/attachment.cgi?id=188131", "timestamp": "2023-07-07 17:05:47.000000000"}, {"message": "A fix for SkiaSalBitmap::Invert() is in patch set 107.", "timestamp": "2023-07-08 17:20:23.000000000"}]}
{"thread_id": "93b6db04_83c154a6", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/108/vcl/source/gdi/pdfwriter_impl2.cxx@515", "comments": [{"message": "Inverting this alpha mask a second time caused the gradient's transparent background to be filled with white which partially obscures the underlying text when exporting the following document to PDF:\n\nhttps://bugs.documentfoundation.org/attachment.cgi?id=188268", "timestamp": "2023-07-08 18:24:46.000000000"}]}
{"thread_id": "6bbcf9ac_0b01ae91", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/87/vcl/source/gdi/virdev.cxx@371", "comments": [{"message": "I believe that this is the cause of many of the transparent gradient problems that we have seen in https://bugs.documentfoundation.org/show_bug.cgi?id=155912.\n\nBefore this change, mpAlphaVDev would start out filled with black (i.e. a rectangular transparent mask) and then subsequent drawing operations would remove parts of the mask.\n\nAfter this change, mpAlphaVDev starts out filled with white (i.e. no transparent mask) so subsequent drawing operations don't add back the areas that need to be masked. That is why we had to fill some VirtualDevice's with the transparent color in order to draw the transparent gradients in the above bug.", "timestamp": "2023-06-25 12:32:55.000000000"}, {"message": "Done", "timestamp": "2023-06-25 15:14:44.000000000"}]}
{"thread_id": "fbe4df97_22199bd6", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/92/vcl/source/gdi/virdev.cxx@371", "comments": [{"message": "Images with transparent pixels with a transparency percent (e.g. 50%) applied still need COL_ALPHA_OPAQUE so the caller now must explicitly specify if COL_ALPHA_TRANSPARENT is needed.", "timestamp": "2023-06-29 15:24:26.000000000"}, {"message": "Done", "timestamp": "2023-07-15 12:08:39.000000000"}]}
{"thread_id": "bd365fcd_98e1ea0a", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/114/vcl/source/outdev/bitmap.cxx@349", "comments": [{"message": "I will need to go back through all of my GDIMetaFile hacks. The white background on Skia only is likely from my erase hack in cppcanvas/source/mtfrenderer/transparencygroupaction.cxx:243. Removing that hack somehow causes the entire virtual device to have a transparent alpha mask so I suspect that SkiaSalGraphicsImpl::blendBitmap()'s use of SkBlendMode::kModulate is shrinking the opaque area of the alpha mask instead of expanding it like is done on master.\n\nIn other words, we are back to the same problem that I found a couple of months ago:  mpAlphaVDev in OutputDevice is supposed to start as completely transparent (black) and then each draw to the OutputDevice adds equivalent gray or white for any pixels drawn.", "timestamp": "2023-07-18 16:02:59.000000000"}, {"message": "Note: SkiaSalBitmap::AlphaBlendWith() also uses SkBlendMode::kModulate to reduce the opaque area of an alpha mask instead of increasing so I need to look at the AlphaMask::BlendWith() calls in vcl/source/outdev/transparent.cxx that I added.", "timestamp": "2023-07-18 16:54:37.000000000"}, {"message": "Resolved by backporting the following Gerrit change from master:\n\nhttps://gerrit.libreoffice.org/c/core/+/154678", "timestamp": "2023-07-20 15:19:57.000000000"}]}
{"thread_id": "4d8051c0_67e150a3", "url": "https://gerrit.libreoffice.org/#/c/core/+/114168/90/vcl/source/outdev/bitmapex.cxx@556", "comments": [{"message": "This is another case of needing to invert an AlphaMask like in vcl/source/outdev/transparent.cxx, but in this case it occurs with both Skia enabled or disabled and only when exporting to PDF. Is this needed on platforms other than macOS?\n\nI used the following PNG image that contains a transparent background to test this:\n\nhttps://bugs.documentfoundation.org/attachment.cgi?id=188092", "timestamp": "2023-06-27 12:39:34.000000000"}, {"message": "I moved this AlphaMask::Invert() call to all to each of the MetaActionType::FLOATTRANSPARENT and MetaActionType::BMPEX* cases in vcl/source/gdi/pdfwriter_impl2.cxx.", "timestamp": "2023-06-29 15:24:26.000000000"}]}
{"thread_id": "4c28a8d1_d10e4d88", "url": "https://gerrit.libreoffice.org/#/c/core/+/153256/1/sc/source/core/data/attarray.cxx@b1990", "comments": [{"message": "Simply Dropping this is not a good idea, it's there for a purpose: people tend to attribute lots of rows even if there is no data and don't want to get umpteen coloured sheets of paper printed. Also, this may lead to looping through all formatted rows during export, which easily happens and is especially nasty if an entire column is formatted.\n\nSee commit 00afb44987ccd10bce740aef53861ec53c75c95f\ntdf#104434 tdf#104451 Revert \"tdf#46738 Fix exporting .xlsx of coloured em\"...", "timestamp": "2023-06-19 09:56:52.000000000"}, {"message": "Thanks for the comment, I will refine it further.", "timestamp": "2023-06-19 13:12:13.000000000"}, {"message": "I changed the patch as you requested, so nothing changes in the default setting. If the \"Suppress output of empty pages\" in the Preferences is not checked, it will include cells with no data in the printout, regardless of the number of rows. By default, this leaves the older, page-saving mode, and the \"Suppress output of empty pages\" checkbox doesn't seem to be used for any other purpose here in Calc.", "timestamp": "2023-06-26 16:01:22.000000000"}]}
{"thread_id": "f94608f0_179314ff", "url": "https://gerrit.libreoffice.org/#/c/core/+/153256/6/sc/source/core/data/attarray.cxx@2003", "comments": [{"message": "This needs a check if nPos>0.", "timestamp": "2023-06-27 15:54:29.000000000"}, {"message": "Done", "timestamp": "2023-06-28 07:59:56.000000000"}]}
{"thread_id": "2896650d_5ab02ee9", "url": "https://gerrit.libreoffice.org/#/c/core/+/150703/6/sc/source/ui/view/output2.cxx@602", "comments": [{"message": "Please use a boolean return value instead of adding the new parameter. This simplifies the code.", "timestamp": "2023-05-12 07:25:18.000000000"}, {"message": "Ack", "timestamp": "2023-05-18 09:49:18.000000000"}]}
{"thread_id": "afd3bb25_e8b8da2c", "url": "https://gerrit.libreoffice.org/#/c/core/+/150703/6/sc/source/ui/view/output2.cxx@1889", "comments": [{"message": "Please avoid explicit casts, unless really required. Such a cast would hide any overflow from analyzers like ubsan.", "timestamp": "2023-05-12 07:25:57.000000000"}, {"message": "Done", "timestamp": "2023-06-27 15:38:05.000000000"}]}
{"thread_id": "7f51ae0b_9bc54c40", "url": "https://gerrit.libreoffice.org/#/c/core/+/150703/6/sc/source/ui/view/output2.cxx@1912", "comments": [{"message": "Please avoid trailing whitespace. I wonder why isn't it marked red here...", "timestamp": "2023-05-12 07:25:57.000000000"}, {"message": "Ack", "timestamp": "2023-05-18 09:49:18.000000000"}]}
{"thread_id": "e9d8e527_d456cea0", "url": "https://gerrit.libreoffice.org/#/c/core/+/150703/6/sc/source/ui/view/output2.cxx@1912", "comments": [{"message": "Please remove additional space after the start of line here.", "timestamp": "2023-05-12 07:25:18.000000000"}, {"message": "Ack", "timestamp": "2023-05-18 09:49:18.000000000"}, {"message": "Still not removed.", "timestamp": "2023-06-04 05:12:47.000000000"}, {"message": "Done", "timestamp": "2023-06-04 13:31:26.000000000"}]}
{"thread_id": "8554df9b_ecf4bde7", "url": "https://gerrit.libreoffice.org/#/c/core/+/150703/6/sc/source/ui/view/output2.cxx@3221", "comments": [{"message": "In new code, please try to fit into 100 character line limit. Much longer lines are hard to read.", "timestamp": "2023-05-12 07:25:57.000000000"}, {"message": "Ack", "timestamp": "2023-05-18 09:49:18.000000000"}]}
{"thread_id": "2e326e34_4c242d7d", "url": "https://gerrit.libreoffice.org/#/c/core/+/150703/6/sc/source/ui/view/output2.cxx@3226", "comments": [{"message": "Another unneeded cast", "timestamp": "2023-05-12 07:25:57.000000000"}, {"message": "Similar casts have been used all over this file, hence I have still kept it. However, the code works fine without it. So, should I remove it or keep it as it is.", "timestamp": "2023-05-17 04:14:32.000000000"}, {"message": "Done", "timestamp": "2023-06-27 15:38:05.000000000"}]}
{"thread_id": "a76e3345_8870ddbe", "url": "https://gerrit.libreoffice.org/#/c/core/+/150703/6/sc/source/ui/view/output2.cxx@3246", "comments": [{"message": "Here you use a style without spaces separating brackets from content. Basically, this is the syntax that we have in the project currently, which is defined in the project's clang-format rules. These rules do not apply to the files that were created before that ruleset was set; and in such files, you have flexibility. You may try to follow the rules that surrounding code uses; or you may use the newer set.\n\nBut please be consistent.", "timestamp": "2023-05-12 07:25:57.000000000"}, {"message": "Ack", "timestamp": "2023-05-18 09:49:18.000000000"}]}
{"thread_id": "49074dad_5c83310c", "url": "https://gerrit.libreoffice.org/#/c/core/+/154752/3/include/vcl/svapp.hxx@1261", "comments": [{"message": "When reading \"application or system preferences\", I thought at first that \"application preferences\" would refer to LO settings and this method would already take into account `officecfg::Office::Common::VCL::AnimationsEnabled` in `Application::UseReducedAnimation` and `ScOverlayDashedBorder::ScOverlayDashedBorder` would then only do\n\n    mbAllowsAnimation = !Application::UseReducedAnimation();\n    \nwhich might be an alternative to do it. Either way seems fine for me. Maybe using \"system/desktop environment/toolkit\" here instead of \"application or system\" would be a bit clearer when sticking to the curent implementation?", "timestamp": "2023-07-24 12:59:46.000000000"}, {"message": "Good point. Let me see how we are handling the dark mode system vs. LO preferences.", "timestamp": "2023-07-24 13:23:41.000000000"}, {"message": "> Good point. Let me see how we are handling the dark mode system vs. LO preferences.\n\nIt's a bit roundabout, but dark mode has the following separate static methods for fetching the LO and native dark mode preferences:\n\nMiscSettings::GetDarkMode(); // returns LO preference only\nMiscSettings::GetUseDarkMode(); // returns system preference only\n\nSo I will keep the sc code change as is, but I will move Application::UseReducedAnimation() to MiscSettings::GetUseReducedAnimation() for consistency and remove \"application or\" from the comment.\n\nDoes that sound reasonable?", "timestamp": "2023-07-24 14:00:09.000000000"}, {"message": "Sounds good to me.", "timestamp": "2023-07-24 14:10:53.000000000"}, {"message": "Done", "timestamp": "2023-07-24 16:10:28.000000000"}]}
{"thread_id": "c4f09795_c8af37cc", "url": "https://gerrit.libreoffice.org/#/c/core/+/149687/4/basic/source/classes/image.cxx@b713", "comments": [{"message": "I'm afraid I lost track, and this seems wrong to me.\nWe have *two* different things to consider:\n\n1. images that require image format 12 (i.e., not possible to store in format 11);\n2. images that require image format 13 (i.e., not possible to store in format 12).\n\nThe first case requires OOo 2.2 and later (i.e., any LO and AOO would do); the second requires LO 5.0.3 and later.\n\nYour change removes the check for the first case? Then why there is still a code to store in the legacy 11 version (IIUC)?", "timestamp": "2023-03-30 07:52:28.000000000"}, {"message": "Should we warn about format 12 or should we warn just about format 13. My change is wrong because we still need the function ExceedsLegacyLimits() and another functions which checks if we exceed format 12.", "timestamp": "2023-03-30 08:09:51.000000000"}, {"message": "Done", "timestamp": "2023-07-20 06:47:02.000000000"}]}
{"thread_id": "0d3fc0c5_97d36eac", "url": "https://gerrit.libreoffice.org/#/c/core/+/149687/14/basic/source/classes/image.cxx@685", "comments": [{"message": "Is this still used?", "timestamp": "2023-07-20 06:47:02.000000000"}, {"message": "In https://opengrok.libreoffice.org/xref/core/basic/source/classes/sbxmod.cxx?r=8da305ac#1634", "timestamp": "2023-07-20 07:10:22.000000000"}, {"message": "Done", "timestamp": "2023-07-24 11:55:36.000000000"}]}
{"thread_id": "3056f76a_50bfb75d", "url": "https://gerrit.libreoffice.org/#/c/core/+/149687/4/basic/source/classes/sbxmod.cxx@1789", "comments": [{"message": "Should we change this version indication as well using the proper constants for the different version in a follow-up commit?", "timestamp": "2023-03-30 07:44:22.000000000"}, {"message": "Sorry, context is missing. Is this code wrong?", "timestamp": "2023-03-30 07:52:28.000000000"}, {"message": "No, just hard to read. Version 2 seems format 13 and version 1 revers to format 12.", "timestamp": "2023-03-30 08:09:51.000000000"}, {"message": "If these constants duplicate our existing version constants, please change them, here is OK, because it makes the scope clearer, and easier to see where which of the possible versions is handled.", "timestamp": "2023-07-20 06:47:02.000000000"}, {"message": "There are just two usages with either version 2 and version 1 where imho the scope is clearer. So we should not change them.", "timestamp": "2023-07-20 07:10:22.000000000"}]}
{"thread_id": "3d8aaada_dca18208", "url": "https://gerrit.libreoffice.org/#/c/core/+/154698/1/sd/source/ui/func/futext.cxx@722", "comments": [{"message": "coverity points out that mpView is dereferenced above, but that there is a check for it against null here which is inconsistent: https://gerrit.libreoffice.org/c/core/+/154792/1 for that", "timestamp": "2023-07-22 20:39:54.000000000"}]}
{"thread_id": "5b7d73de_e5ee358b", "url": "https://gerrit.libreoffice.org/#/c/core/+/143475/7/editeng/source/items/svxfont.cxx@444", "comments": [{"message": "I was reviewing the uses of KernArray.m_nSubUnitFactor, and this one of the two places that passes it the constructor, but I\u2019m not sure if it is intentional here or you meant to set the size of the aDXArray? (KernArray constructor takes one parameter which is nSubUnitFactor).", "timestamp": "2023-07-18 14:43:07.000000000"}, {"message": "Strange I converted that one differently to the rest. I can't see why I did that. Clearly wrong and I don't think I had something special in mind so I think\n\nKernArray aDXArray;\n\nshould be used there, I guess I can assume you will take care of that?", "timestamp": "2023-07-22 18:46:59.000000000"}, {"message": "> I guess I can assume you will take care of that?\n\nhttps://gerrit.libreoffice.org/c/core/+/154799", "timestamp": "2023-07-23 06:20:28.000000000"}]}
{"thread_id": "80d3ea24_782392b1", "url": "https://gerrit.libreoffice.org/#/c/core/+/154508/2/sw/source/uibase/dochdl/swdtflvr.cxx@1728", "comments": [{"message": "Reminder to self: Please add a code comment about the purpose of this condition that prevents a selection from being cleared by the default case of the switch below.", "timestamp": "2023-07-20 18:25:40.000000000"}, {"message": "Done", "timestamp": "2023-07-22 21:27:17.000000000"}]}
{"thread_id": "de042274_e4069517", "url": "https://gerrit.libreoffice.org/#/c/core/+/154590/3/accessibility/source/extended/AccessibleBrowseBoxBase.cxx@425", "comments": [{"message": "Order of old and new value need to be the other way around in this ctor:\nhttps://gerrit.libreoffice.org/c/core/+/154719", "timestamp": "2023-07-21 13:13:19.000000000"}]}
{"thread_id": "ab5702fb_9346234e", "url": "https://gerrit.libreoffice.org/#/c/core/+/153815/1/sal/rtl/strtmpl.hxx@1474", "comments": [{"message": "Here is a confusing place to check this, it should rather go into the `switch (eFormat)` below, where nDecPlaces is adjusted also for other format cases.", "timestamp": "2023-07-18 15:20:58.000000000"}, {"message": "Done", "timestamp": "2023-07-20 10:48:21.000000000"}]}
{"thread_id": "9fa752df_44b1ee5e", "url": "https://gerrit.libreoffice.org/#/c/core/+/153815/1/sal/rtl/strtmpl.hxx@1496", "comments": [{"message": "Same, should be moved into the `switch (eFormat)` below.", "timestamp": "2023-07-18 15:20:58.000000000"}, {"message": "Done", "timestamp": "2023-07-20 10:48:21.000000000"}]}
{"thread_id": "bb2d3678_246287ba", "url": "https://gerrit.libreoffice.org/#/c/core/+/153815/1/sal/rtl/strtmpl.hxx@1551", "comments": [{"message": "This comment belonged to the clamp statement that was moved. The comment should be moved along as it doesn't make sense at this place here now.", "timestamp": "2023-07-18 15:20:58.000000000"}, {"message": "Done", "timestamp": "2023-07-20 10:48:21.000000000"}]}
{"thread_id": "5cbc5818_752d9c17", "url": "https://gerrit.libreoffice.org/#/c/core/+/153815/3/sal/rtl/strtmpl.hxx@b1542", "comments": [{"message": "Do not remove this comment, it is still valid even with the new limits.", "timestamp": "2023-07-20 10:20:44.000000000"}, {"message": "Canceled this deletion", "timestamp": "2023-07-20 10:48:21.000000000"}]}
{"thread_id": "81784e7b_60cb821c", "url": "https://gerrit.libreoffice.org/#/c/core/+/154402/5/svx/qa/unit/customshapes.cxx@98", "comments": [{"message": "Please avoid spaces in a blank line. Please fix this and and other instances.", "timestamp": "2023-07-14 20:05:56.000000000"}, {"message": "Done", "timestamp": "2023-07-14 23:58:30.000000000"}]}
{"thread_id": "43b9d4ca_e9ad7f23", "url": "https://gerrit.libreoffice.org/#/c/core/+/154402/5/svx/qa/unit/customshapes.cxx@113", "comments": [{"message": "You are redefining `xShape` here. This is not OK.", "timestamp": "2023-07-14 20:05:56.000000000"}, {"message": "Done", "timestamp": "2023-07-14 23:58:30.000000000"}]}
{"thread_id": "8adb0695_e1f75e77", "url": "https://gerrit.libreoffice.org/#/c/core/+/154402/5/svx/qa/unit/customshapes.cxx@114", "comments": [{"message": "Also for `pSdrCustomShape` here.", "timestamp": "2023-07-14 20:05:56.000000000"}, {"message": "Done", "timestamp": "2023-07-14 23:58:30.000000000"}]}
{"thread_id": "794b7fde_3291f12f", "url": "https://gerrit.libreoffice.org/#/c/core/+/154402/7/svx/qa/unit/customshapes.cxx@100", "comments": [{"message": "`xShape`, `xShape1`, `xShape2` and `xShape3` are the same. You don't need to call `getShape(0)` each time there is a change in the properties. Use only `xShape`.\nYou can check for yourself:\n assert(xShape == xShape1);", "timestamp": "2023-07-16 16:36:57.000000000"}, {"message": "Done", "timestamp": "2023-07-17 21:48:24.000000000"}]}
{"thread_id": "ad816503_6e22b943", "url": "https://gerrit.libreoffice.org/#/c/core/+/154402/7/svx/qa/unit/customshapes.cxx@101", "comments": [{"message": "Also, `pSdrCustomShape`, `pSdrCustomShape1`, `pSdrCustomShape2` and `pSdrCustomShape` are the same. Use only `pSdrCustomShape`.\nYou can check for yourself:\n assert(pSdrCustomShape == pSdrCustomShape1);", "timestamp": "2023-07-16 16:36:57.000000000"}, {"message": "Done", "timestamp": "2023-07-17 21:48:24.000000000"}]}
{"thread_id": "b14025c4_e23da83b", "url": "https://gerrit.libreoffice.org/#/c/core/+/154402/7/svx/qa/unit/customshapes.cxx@104", "comments": [{"message": "Please re-use `GetMergedItem` instead of defining new variables.", "timestamp": "2023-07-16 16:36:57.000000000"}, {"message": "Done", "timestamp": "2023-07-17 21:48:24.000000000"}]}
{"thread_id": "25736503_3ae615f0", "url": "https://gerrit.libreoffice.org/#/c/core/+/154402/7/svx/qa/unit/customshapes.cxx@105", "comments": [{"message": "Please also reuse `pAny` pointer instead of defining new variables.", "timestamp": "2023-07-16 16:36:57.000000000"}, {"message": "Done", "timestamp": "2023-07-17 21:48:24.000000000"}]}
{"thread_id": "fe58f899_ff5a2886", "url": "https://gerrit.libreoffice.org/#/c/core/+/154664/1/cui/source/options/optsave.cxx@b304", "comments": [{"message": "This is the last use of bRequestRestart, but having the option in the code is nice, so I didn't remove all the extra bits. (More than likely some bot process will trigger a removal, but I'd prefer to keep it available. If I knew offhand of a config that it would be useful for, I would add it, but I don't know any example.)", "timestamp": "2023-07-20 09:48:33.000000000"}, {"message": "> More than likely some bot process will trigger a removal\n\nI bet you are right; so if you want the code to stay available, rather make it a comment - but please make it look in a way to not ignite \"drop commented out code\", something like \"// If some option would need a reboot, then this code could be introduced: // ...\"", "timestamp": "2023-07-20 09:55:14.000000000"}]}
{"thread_id": "7586f953_a8dbea93", "url": "https://gerrit.libreoffice.org/#/c/core/+/154505/3/framework/source/services/autorecovery.cxx@2843", "comments": [{"message": ":grin:\nI think you wanted officecfg::Office::Recovery::AutoSave::TimeIntervall", "timestamp": "2023-07-19 20:35:13.000000000"}, {"message": "Sure, you are correct! - see https://gerrit.libreoffice.org/c/core/+/154619 :-)\n\nIt was a problematic rebase.", "timestamp": "2023-07-19 20:36:48.000000000"}]}
{"thread_id": "fe9e4edd_a6a29c86", "url": "https://gerrit.libreoffice.org/#/c/core/+/154643/2/sw/source/core/layout/flowfrm.cxx@1842", "comments": [{"message": "I suggest moving this near the front of the list (say, before IsInFly). Tables are very common, and this is a cheap thing to check - cheaper than some of the other tests, so best to do the simple checks first. Plus, this \"groups\" it with similar kinds of checks in the programmer's mind.", "timestamp": "2023-07-19 11:52:34.000000000"}]}
{"thread_id": "9a627e78_338e5cb1", "url": "https://gerrit.libreoffice.org/#/c/core/+/154574/1/sw/source/core/tox/tox.cxx@381", "comments": [{"message": "I believe that, while at this, you could replace this second check with a boolean like \"needsLinkEnd\", which would be set above in the first check for opening - that way, in the future, this part will stay unchanged.", "timestamp": "2023-07-18 07:28:06.000000000"}, {"message": "Done", "timestamp": "2023-07-19 08:09:21.000000000"}]}
{"thread_id": "9842c15c_0834c6e8", "url": "https://gerrit.libreoffice.org/#/c/core/+/154139/3/sw/source/core/access/AccessibilityCheck.cxx@1197", "comments": [{"message": "Sorry, noticed one small thing: This is the same on both branches, so can be moved out of the if clause.", "timestamp": "2023-07-10 06:08:45.000000000"}, {"message": "Done", "timestamp": "2023-07-12 18:17:17.000000000"}, {"message": "Thanks for the notice. \ud83d\ude0a", "timestamp": "2023-07-12 18:17:53.000000000"}]}
{"thread_id": "6a030ca3_16fe7c62", "url": "https://gerrit.libreoffice.org/#/c/core/+/154480/1/sc/source/ui/docshell/docsh.cxx@b1865", "comments": [{"message": "You mention it, but didn't check it - even in your patchset 1. I'm confused why not?", "timestamp": "2023-07-15 17:08:42.000000000"}, {"message": "Ack", "timestamp": "2023-07-18 20:54:50.000000000"}]}
{"thread_id": "e5d0f7d3_4650b02b", "url": "https://gerrit.libreoffice.org/#/c/core/+/154480/1/sc/source/ui/docshell/docsh.cxx@1866", "comments": [{"message": "I would expect that no matter what the filter name might be, we want to avoid the password dialog in any theoretical case. Since we only care about avoiding the password dialog - I moved the whole thing so it shares the same if clause.", "timestamp": "2023-07-15 17:08:42.000000000"}]}
{"thread_id": "61c1c436_2aecdf8c", "url": "https://gerrit.libreoffice.org/#/c/core/+/154489/4/sfx2/source/doc/docfile.cxx@2657", "comments": [{"message": "This might require additional processing, e.g. in case of remote files: things line CMIS/WebDAV could allow modifying a file, but not create backups there, so we might want to use backup directory still. Possibly have some failure fallback in case of problem with BackupIntoDocumentFolder URL?", "timestamp": "2023-07-18 06:24:27.000000000"}, {"message": "I had wondered about remote saves, but I figured that if the user can modify a file (and presumably get a lock) that they could also create a backup. But as Mike mentioned in IRC, some CMIS are setup to prevent creating new files.\n\nHaving no good reason not to also apply the same logic to any kind of failure (in case the USB disk or partition is full for example), try the backup folder as a second resort regardless of the error or URL scheme.", "timestamp": "2023-07-18 17:10:57.000000000"}]}
{"thread_id": "5c183cb8_57c7d52e", "url": "https://gerrit.libreoffice.org/#/c/core/+/29428/5/sal/rtl/math.cxx@161", "comments": [{"message": "Can this happen? 0x1p53 - 1 is representable in double; <= is strictly defined in IEEE 754; a double that is no greater than this can't convert to an integer larger than this?", "timestamp": "2023-07-12 05:33:20.000000000"}, {"message": "Not sure what I was thinking back then.. maybe along the lines of (2^53-1)+x could be <= (2^53-1), the same as (2^54)+x could be <= (2^54) for x<=1.", "timestamp": "2023-07-18 17:18:21.000000000"}]}
{"thread_id": "af2a5bcb_2748fa5e", "url": "https://gerrit.libreoffice.org/#/c/core/+/29428/5/sal/rtl/math.cxx@1099", "comments": [{"message": "Why this comparison against e44, when the final result will be against e48?", "timestamp": "2023-07-12 05:16:38.000000000"}, {"message": "Spares the checks for isRepresentableInteger(), difference is too large anyway.", "timestamp": "2023-07-18 17:18:21.000000000"}]}
{"thread_id": "092c1232_874e5f39", "url": "https://gerrit.libreoffice.org/#/c/core/+/154528/1/sc/source/ui/view/cellsh4.cxx@126", "comments": [{"message": "1. Could you please put the opening brace to a next line, as e.g. in line 108?\n2. Instead of the changes in files sc/inc/inputopt.hxx and sc/source/core/tool/inputopt.cxx, which may be reverted, please use the direct read from the configuration here, using\n\n    if (officecfg::Office::Calc::Input::UseScrollLock::get())\n    {\n        ...\n    }\n\nThis is easier, and allows to avoid all the problems with configuration synchronization. Recently we tend to replace such intermediate configurations with direct config access.", "timestamp": "2023-07-17 15:31:55.000000000"}, {"message": "Done", "timestamp": "2023-07-18 07:22:45.000000000"}]}
{"thread_id": "df8bf9e2_8f2d7f6c", "url": "https://gerrit.libreoffice.org/#/c/core/+/154203/2/sw/source/core/doc/doccomp.cxx@690", "comments": [{"message": "Also use `size_t` here.", "timestamp": "2023-07-17 10:13:53.000000000"}, {"message": "Done", "timestamp": "2023-07-17 23:52:18.000000000"}]}
{"thread_id": "5d8605e6_f40b3364", "url": "https://gerrit.libreoffice.org/#/c/core/+/154407/1/sfx2/source/doc/docfile.cxx@2669", "comments": [{"message": "I could also just use Append here, but setExtension is exactly what I'm trying to do, and if there are any \"crop the name so that the extension fits\" actions going on, I want that to happen here.", "timestamp": "2023-07-14 13:02:27.000000000"}, {"message": "Ack", "timestamp": "2023-07-14 13:03:05.000000000"}]}
{"thread_id": "165bf3cb_015aa651", "url": "https://gerrit.libreoffice.org/#/c/core/+/153375/11/sd/qa/unit/uiimpress.cxx@508", "comments": [{"message": "You really don't need to write this here - especially if you implement something new. This may have some practical use only if there is some \"interesting\" value before the fix.. but even then it is of limited use (IMHO it belongs into the commit message, not code). More importantly is to describe the use case better - the expected behavior of the unit. Also I would consider to name the test case with what it tests and not with a bug number.", "timestamp": "2023-07-17 08:51:17.000000000"}, {"message": "Ack", "timestamp": "2023-07-17 10:09:43.000000000"}]}
{"thread_id": "feb56829_93abaae7", "url": "https://gerrit.libreoffice.org/#/c/core/+/154451/1/sw/source/core/draw/dcontact.cxx@2065", "comments": [{"message": "This is fine, because FindPageFrameOfAnchor() uses GetAnchorFrameContainingAnchPos(), which uses FindAnchorCharFrame(), which explicitly handles split flys. I.e. in case the anchor text frame is split, then you work with the actual anchor not with the nominal \"we want all anchors to be in the master\" anchor.", "timestamp": "2023-07-17 06:07:00.000000000"}]}
{"thread_id": "157565fd_ecc9fc47", "url": "https://gerrit.libreoffice.org/#/c/core/+/154452/1/framework/source/services/autorecovery.cxx@3097", "comments": [{"message": "Maybe this faster method?\n\n  File::remove( rInfo.NewTempURL )", "timestamp": "2023-07-15 04:43:42.000000000"}]}
{"thread_id": "ad3da82c_4169aa4a", "url": "https://gerrit.libreoffice.org/#/c/core/+/154276/5/sc/source/ui/vba/vbainterior.cxx@103", "comments": [{"message": "Likely at() is a better alternative for const map?", "timestamp": "2023-07-13 09:15:19.000000000"}, {"message": "In view of https://github.com/serge-sans-paille/frozen/issues/156 - please ignore me.", "timestamp": "2023-07-13 09:51:45.000000000"}]}
{"thread_id": "331685a1_3de6d0d8", "url": "https://gerrit.libreoffice.org/#/c/core/+/154276/5/sc/source/ui/vba/vbainterior.cxx@103", "comments": [{"message": "This looks broken, cf. <https://ci.libreoffice.org/job/lo_ubsan/2846/>\n\n  =================================================================\n  ==27441==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7feaccd42aa8 at pc 0x7feacc86a5e7 bp 0x7ffc3e6e9390 sp 0x7ffc3e6e9388\n  READ of size 4 at 0x7feaccd42aa8 thread T0\n      #0 0x7feacc86a5e6 in ScVbaInterior::SetMixedColor() /sc/source/ui/vba/vbainterior.cxx:103:58\n      #1 0x7feacc868c75 in ScVbaInterior::setColor(com::sun::star::uno::Any const&) /sc/source/ui/vba/vbainterior.cxx:90:9\n      #2 0x7feacc86ccc8 in ScVbaInterior::setColorIndex(com::sun::star::uno::Any const&) /sc/source/ui/vba/vbainterior.cxx:150:9\n      #3 0x7feb713c587c in gcc3::callVirtualMethod(void*, unsigned int, void*, _typelib_TypeDescriptionReference*, bool, unsigned long*, unsigned int, unsigned long*, double*) /bridges/source/cpp_uno/gcc3_linux_x86-64/callvirtualmethod.cxx:75:5\n      #4 0x7feb713bfc62 in cpp_call(bridges::cpp_uno::shared::UnoInterfaceProxy*, bridges::cpp_uno::shared::VtableSlot, _typelib_TypeDescriptionReference*, int, _typelib_MethodParameter*, void*, void**, _uno_Any**) /bridges/source/cpp_uno/gcc3_linux_x86-64/uno2cpp.cxx:233:13\n      #5 0x7feb713bb727 in unoInterfaceProxyDispatch /bridges/source/cpp_uno/gcc3_linux_x86-64/uno2cpp.cxx:352:13\n      #6 0x7fead912ceb9 in stoc_corefl::(anonymous namespace)::IdlAttributeFieldImpl::set(com::sun::star::uno::Any&, com::sun::star::uno::Any const&) /stoc/source/corereflection/criface.cxx:225:13\n      #7 0x7fead95e406b in (anonymous namespace)::IntrospectionAccessStatic_Impl::setPropertyValueByIndex(com::sun::star::uno::Any const&, int, com::sun::star::uno::Any const&) const /stoc/source/inspect/introspection.cxx:457:26\n      #8 0x7fead95e0fd1 in (anonymous namespace)::IntrospectionAccessStatic_Impl::setPropertyValue(com::sun::star::uno::Any const&, rtl::OUString const&, com::sun::star::uno::Any const&) const /stoc/source/inspect/introspection.cxx:356:5\n      #9 0x7fead95d5e06 in (anonymous namespace)::ImplIntrospectionAccess::setPropertyValue(rtl::OUString const&, com::sun::star::uno::Any const&) /stoc/source/inspect/introspection.cxx:1009:19\n      #10 0x7feb3858d3c7 in SbUnoObject::Notify(SfxBroadcaster&, SfxHint const&) /basic/source/classes/sbunoobj.cxx:2130:31\n      #11 0x7feb595a39e3 in SfxBroadcaster::Broadcast(SfxHint const&) /svl/source/notify/SfxBroadcaster.cxx:40:24\n      #12 0x7feb38dd6f2a in SbxVariable::Broadcast(SfxHintId) /basic/source/sbx/sbxvar.cxx:155:12\n      #13 0x7feb38dae211 in SbxValue::Put(SbxValues const&) /basic/source/sbx/sbxvalue.cxx:484:20\n      #14 0x7feb38da4f6a in SbxValue::operator=(SbxValue const&) /basic/source/sbx/sbxvalue.cxx:133:17\n      #15 0x7feb38ddba3c in SbxVariable::operator=(SbxVariable const&) /basic/source/sbx/sbxvar.cxx:299:19\n      #16 0x7feb38aaa55c in SbiRuntime::StepPUT() /basic/source/runtime/runtime.cxx:1741:17\n      #17 0x7feb38adcc9c in SbiRuntime::Step() /basic/source/runtime/runtime.cxx:795:13\n      #18 0x7feb386ef859 in (anonymous namespace)::RunInitGuard::run() /basic/source/classes/sbxmod.cxx:1017:27\n      #19 0x7feb386e95bd in SbModule::Run(SbMethod*) /basic/source/classes/sbxmod.cxx:1177:31\n      #20 0x7feb386e55a8 in SbModule::Notify(SfxBroadcaster&, SfxHint const&) /basic/source/classes/sbxmod.cxx:775:17\n      #21 0x7feb595a39e3 in SfxBroadcaster::Broadcast(SfxHint const&) /svl/source/notify/SfxBroadcaster.cxx:40:24\n      #22 0x7feb387124fa in SbMethod::Broadcast(SfxHintId) /basic/source/classes/sbxmod.cxx:2121:20\n      #23 0x7feb38da07d0 in SbxValue::SbxValue(SbxValue const&) /basic/source/sbx/sbxvalue.cxx:67:36\n      #24 0x7feb38dd0d19 in SbxVariable::SbxVariable(SbxVariable const&) /basic/source/sbx/sbxvar.cxx:49:7\n      #25 0x7feb38d6b7e2 in SbxMethod::SbxMethod(SbxMethod const&) /basic/source/sbx/sbxobj.cxx:844:7\n      #26 0x7feb38b08623 in SbiRuntime::FindElement(SbxObject*, unsigned int, unsigned int, ErrCode, bool, bool) /basic/source/runtime/runtime.cxx:3702:37\n      #27 0x7feb38b0f8c3 in SbiRuntime::StepFIND_Impl(SbxObject*, unsigned int, unsigned int, ErrCode, bool) /basic/source/runtime/runtime.cxx:4134:14\n      #28 0x7feb38ac37e7 in SbiRuntime::StepFIND(unsigned int, unsigned int) /basic/source/runtime/runtime.cxx:4140:5\n      #29 0x7feb38ade47b in SbiRuntime::Step() /basic/source/runtime/runtime.cxx:807:13\n      #30 0x7feb386ef859 in (anonymous namespace)::RunInitGuard::run() /basic/source/classes/sbxmod.cxx:1017:27\n      #31 0x7feb386e95bd in SbModule::Run(SbMethod*) /basic/source/classes/sbxmod.cxx:1177:31\n      #32 0x7feb386e55a8 in SbModule::Notify(SfxBroadcaster&, SfxHint const&) /basic/source/classes/sbxmod.cxx:775:17\n      #33 0x7feb595a39e3 in SfxBroadcaster::Broadcast(SfxHint const&) /svl/source/notify/SfxBroadcaster.cxx:40:24\n      #34 0x7feb387124fa in SbMethod::Broadcast(SfxHintId) /basic/source/classes/sbxmod.cxx:2121:20\n      #35 0x7feb38da61d6 in SbxValue::Get(SbxValues&) const /basic/source/sbx/sbxvalue.cxx:289:16\n      #36 0x7feb38710b17 in SbMethod::Call(SbxValue*, SbxVariable*) /basic/source/classes/sbxmod.cxx:2077:5\n      #37 0x7feacda7a8d7 in basprov::BasicScriptImpl::invoke(com::sun::star::uno::Sequence<com::sun::star::uno::Any> const&, com::sun::star::uno::Sequence<short>&, com::sun::star::uno::Sequence<com::sun::star::uno::Any>&) /scripting/source/basprov/basscript.cxx:255:35\n      #38 0x7feacda7c50e in non-virtual thunk to basprov::BasicScriptImpl::invoke(com::sun::star::uno::Sequence<com::sun::star::uno::Any> const&, com::sun::star::uno::Sequence<short>&, com::sun::star::uno::Sequence<com::sun::star::uno::Any>&) /scripting/source/basprov/basscript.cxx\n      #39 0x7feb1baf2280 in SfxObjectShell::CallXScript(com::sun::star::uno::Reference<com::sun::star::uno::XInterface> const&, rtl::OUString const&, com::sun::star::uno::Sequence<com::sun::star::uno::Any> const&, com::sun::star::uno::Any&, com::sun::star::uno::Sequence<short>&, com::sun::star::uno::Sequence<com::sun::star::uno::Any>&, bool, com::sun::star::uno::Any const*) /sfx2/source/doc/objmisc.cxx:1439:25\n      #40 0x7feb16d6bcbd in UnoApiTest::executeMacro(rtl::OUString const&, com::sun::star::uno::Sequence<com::sun::star::uno::Any> const&) /test/source/unoapi_test.cxx:138:22\n      #41 0x7feb477e02be in testVba::TestBody() /sc/qa/extras/vba-macro-test.cxx:450:25\n      #42 0x7feb47870167 in void std::__invoke_impl<void, void (testVba::*&)(), testVba*&>(std::__invoke_memfun_deref, void (testVba::*&)(), testVba*&) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/invoke.h:73:14\n      #43 0x7feb4786fdd4 in std::__invoke_result<void (testVba::*&)(), testVba*&>::type std::__invoke<void (testVba::*&)(), testVba*&>(void (testVba::*&)(), testVba*&) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/invoke.h:95:14\n      #44 0x7feb4786fc50 in void std::_Bind<void (testVba::* (testVba*))()>::__call<void, 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/functional:467:11\n      #45 0x7feb4786f924 in void std::_Bind<void (testVba::* (testVba*))()>::operator()<void>() /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/functional:549:17\n      #46 0x7feb4786eb3c in std::_Function_handler<void (), std::_Bind<void (testVba::* (testVba*))()> >::_M_invoke(std::_Any_data const&) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/std_function.h:316:2\n      #47 0x7feb47839b61 in std::function<void ()>::operator()() const /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/std_function.h:706:14\n      #48 0x7feb4786df28 in CppUnit::TestCaller<testVba>::runTest() /workdir/UnpackedTarball/cppunit/include/cppunit/TestCaller.h:175:7\n      #49 0x7feb8b950e8b in CppUnit::TestCaseMethodFunctor::operator()() const (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x296e8b)\n      #50 0x7feb710d58a0 in (anonymous namespace)::Protector::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) /test/source/vclbootstrapprotector.cxx:46:14\n      #51 0x7feb8b92566c in CppUnit::ProtectorChain::ProtectFunctor::operator()() const (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x26b66c)\n      #52 0x7feb7c21e9e0 in (anonymous namespace)::Prot::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) /unotest/source/cpp/unobootstrapprotector/unobootstrapprotector.cxx:78:12\n      #53 0x7feb8b92566c in CppUnit::ProtectorChain::ProtectFunctor::operator()() const (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x26b66c)\n      #54 0x7feb7f6af0fe in (anonymous namespace)::Prot::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) /unotest/source/cpp/unoexceptionprotector/unoexceptionprotector.cxx:62:16\n      #55 0x7feb8b92566c in CppUnit::ProtectorChain::ProtectFunctor::operator()() const (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x26b66c)\n      #56 0x7feb8b8c2172 in CppUnit::DefaultProtector::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x208172)\n      #57 0x7feb8b92566c in CppUnit::ProtectorChain::ProtectFunctor::operator()() const (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x26b66c)\n      #58 0x7feb8b91f958 in CppUnit::ProtectorChain::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x265958)\n      #59 0x7feb8b9b466d in CppUnit::TestResult::protect(CppUnit::Functor const&, CppUnit::Test*, std::string const&) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x2fa66d)\n      #60 0x7feb8b94f2a7 in CppUnit::TestCase::run(CppUnit::TestResult*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x2952a7)\n      #61 0x7feb8b953411 in CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x299411)\n      #62 0x7feb8b952668 in CppUnit::TestComposite::run(CppUnit::TestResult*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x298668)\n      #63 0x7feb8b953411 in CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x299411)\n      #64 0x7feb8b952668 in CppUnit::TestComposite::run(CppUnit::TestResult*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x298668)\n      #65 0x7feb8b9de936 in CppUnit::TestRunner::WrappingSuite::run(CppUnit::TestResult*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x324936)\n      #66 0x7feb8b9b312e in CppUnit::TestResult::runTest(CppUnit::Test*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x2f912e)\n      #67 0x7feb8b9df7f2 in CppUnit::TestRunner::run(CppUnit::TestResult&, std::string const&) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x3257f2)\n      #68 0x50633e in (anonymous namespace)::ProtectedFixtureFunctor::run() const /sal/cppunittester/cppunittester.cxx:332:20\n      #69 0x502da7 in main2() /sal/cppunittester/cppunittester.cxx:490:16\n      #70 0x50120e in sal_main() /sal/cppunittester/cppunittester.cxx:635:14\n      #71 0x50105e in main /sal/cppunittester/cppunittester.cxx:630:1\n      #72 0x7feb89a32554 in __libc_start_main /usr/src/debug/glibc-2.17-c758a686/csu/../csu/libc-start.c:266\n      #73 0x425914 in _start (/workdir/LinkTarget/Executable/cppunittester+0x425914)\n  \n  0x7feaccd42aa8 is located 4 bytes to the right of global variable 'aPatternMap' defined in '/home/tdf/lode/jenkins/workspace/lo_ubsan/sc/source/ui/vba/vbainterior.cxx:45:16' (0x7feaccd42a00) of size 164\n  SUMMARY: AddressSanitizer: global-buffer-overflow /sc/source/ui/vba/vbainterior.cxx:103:58 in ScVbaInterior::SetMixedColor()\n  Shadow bytes around the buggy address:\n    0x0ffdd99a0500: 00 00 00 00 00 00 00 00 00 03 f9 f9 f9 f9 f9 f9\n    0x0ffdd99a0510: 00 06 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00\n    0x0ffdd99a0520: 00 00 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00\n    0x0ffdd99a0530: 04 f9 f9 f9 f9 f9 f9 f9 00 00 00 f9 f9 f9 f9 f9\n    0x0ffdd99a0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  =>0x0ffdd99a0550: 00 00 00 00 04[f9]f9 f9 f9 f9 f9 f9 00 00 00 00\n    0x0ffdd99a0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n    0x0ffdd99a0570: 00 00 00 00 00 00 00 00 00 03 f9 f9 f9 f9 f9 f9\n    0x0ffdd99a0580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n    0x0ffdd99a0590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 f9\n    0x0ffdd99a05a0: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00\n  Shadow byte legend (one shadow byte represents 8 application bytes):\n    Addressable:           00\n    Partially addressable: 01 02 03 04 05 06 07 \n    Heap left redzone:       fa\n    Freed heap region:       fd\n    Stack left redzone:      f1\n    Stack mid redzone:       f2\n    Stack right redzone:     f3\n    Stack after return:      f5\n    Stack use after scope:   f8\n    Global redzone:          f9\n    Global init order:       f6\n    Poisoned by user:        f7\n    Container overflow:      fc\n    Array cookie:            ac\n    Intra object redzone:    bb\n    ASan internal:           fe\n    Left alloca redzone:     ca\n    Right alloca redzone:    cb\n    Shadow gap:              cc\n  ==27441==ABORTING", "timestamp": "2023-07-14 06:29:53.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/154432", "timestamp": "2023-07-14 06:59:50.000000000"}]}
{"thread_id": "ec0a6fff_368cbbb7", "url": "https://gerrit.libreoffice.org/#/c/core/+/154225/6/sc/source/core/data/documen5.cxx@531", "comments": [{"message": "I don't think this will check if pTable is not-nullptr", "timestamp": "2023-07-12 06:29:18.000000000"}, {"message": "Ah yes, I'm dumb. It will assign only - like in for statement.", "timestamp": "2023-07-12 08:23:57.000000000"}, {"message": "Done", "timestamp": "2023-07-13 05:25:48.000000000"}]}
{"thread_id": "a9cb2787_6ba06511", "url": "https://gerrit.libreoffice.org/#/c/core/+/153798/8/cui/source/options/certmgrpath.cxx@48", "comments": [{"message": "I'd expect a file browser like happening for Internet > Email > Browse, filling the edit field on confirmation.", "timestamp": "2023-07-03 13:10:34.000000000"}, {"message": "Changed in latest patch", "timestamp": "2023-07-04 14:10:11.000000000"}]}
{"thread_id": "6660bf07_4fdfb3f7", "url": "https://gerrit.libreoffice.org/#/c/core/+/154344/2/svgio/source/svgreader/svgfilternode.cxx@48", "comments": [{"message": "Hmm, please still use dynamic cast, if it's impossible to have children be of correct type from start. The invalid cast shows that there might be an unexpected node type.", "timestamp": "2023-07-12 07:18:23.000000000"}, {"message": "Done", "timestamp": "2023-07-12 10:24:46.000000000"}]}
{"thread_id": "df32ba0c_c88b9e4c", "url": "https://gerrit.libreoffice.org/#/c/core/+/154148/3/svx/source/tbxctrls/StylesPreviewWindow.cxx@463", "comments": [{"message": "This one is a bit concerning. It\u2019s being stored with a hard reference as SfxStatusListener::m_xDispatchProvider, which will prevent it from destroying. Practically this doesn\u2019t seem to cause any trouble, as the controller is disposed and will behave passively, yet it doesn\u2019t feel right. (And indeed it\u2019s used in SfxStatusListener::ReBind, but fortunately we call it only once in the StyleStatusListener\u2019s ctor, so this isn\u2019t a problem as of now.)\n\nMaybe we can pass the frame *itself* as a dispatch provider at least here?", "timestamp": "2023-07-10 18:33:16.000000000"}, {"message": "Well, there is no change here ultimately. I'd rather have a change to StyleStatusListener as a separate patch. No doubt that would end up being a huge code change. (Oh, actually it isn't all that big. Still, it would be better to do that as a separate commit.)", "timestamp": "2023-07-10 22:44:13.000000000"}, {"message": "Why would it be needed to change StyleStatusListener? My suggestion was to query the frame for XDispatchProvider, which is a single line change here locally, on a line you're changing anyway?", "timestamp": "2023-07-11 07:08:35.000000000"}, {"message": "Sorry - I thought I tested whether \nReference<XDispatchProvider> xProvider(m_xFrame, UNO_QUERY)\nworked and my conclusion was that it didn't. But now when I do it again it compiles and works - so perhaps I just tried to pass m_xFrame to dispatcher directly instead of using a UNO_QUERY. Whatever happened - I was wrong...\n\nSo I changed all instances to get the provider directly from m_xFrame.", "timestamp": "2023-07-11 17:34:45.000000000"}]}
{"thread_id": "68ead53f_27b80f0b", "url": "https://gerrit.libreoffice.org/#/c/core/+/153629/3/svgio/source/svgreader/svgfilternode.cxx@46", "comments": [{"message": "Please re-implement the SvgFe*Node::apply as a (pure) virtual function, overridden in each subclass. This would avoid the need to getType(), dynamic_cast, and tdf#156241.", "timestamp": "2023-07-11 20:12:08.000000000"}]}
{"thread_id": "25253886_8d3d4106", "url": "https://gerrit.libreoffice.org/#/c/core/+/140260/1/sc/qa/unit/jumbosheets-test.cxx@296", "comments": [{"message": "Before this patch, row1's height was 0.53cm - which sounds like an XLS default.\nAfter this patch, row1's height was 0.49cm - which doesn't match XLSX or LO default.\n\nRow 1 is not defined, so it gets a default height, which accounts for the change in Y here. (So do all the other rows fully contained underneath the graph.)\n\nHOWEVER, in MS Excel 2010, the graph ends just after row 15 (so slightly into row 16), which is the same as it looked BEFORE this patch. Is this just auto-height not applying after row 4? (Adding characters in Excel didn't change anything..., so that must not be it.)", "timestamp": "2023-06-10 18:40:48.000000000"}, {"message": "FIXED by setting nStdRowHeight to 300", "timestamp": "2023-06-12 11:55:33.000000000"}]}
{"thread_id": "8025ceef_6387570c", "url": "https://gerrit.libreoffice.org/#/c/core/+/140260/1/sc/qa/unit/subsequent_export_test.cxx@1510", "comments": [{"message": "0.53 cm before, now 4.9cm.\n\nOptimal height test: ODS .45cm, XLS .52cm, XLSX .45cm.\n\nSo where does the 4.9cm come from?", "timestamp": "2023-06-10 18:40:48.000000000"}, {"message": "FIXED by setting nStdRowHeight to 300", "timestamp": "2023-06-12 11:55:33.000000000"}]}
{"thread_id": "1b0d8ca2_66ea8b7a", "url": "https://gerrit.libreoffice.org/#/c/core/+/140260/1/sc/qa/unit/subsequent_export_test2.cxx@365", "comments": [{"message": "The empty (undefined) row becomes defined because optimal height doesn't come from <sheetFormatPr defaultRowHeight=\"15\">. So, since it changed, it gets written out explicitly. This NEEDS TO BE FIXED before this patch is possible. Otherwise documents will balloon in size.", "timestamp": "2023-06-10 18:40:48.000000000"}]}
{"thread_id": "1a0ceb26_c3e6c8b6", "url": "https://gerrit.libreoffice.org/#/c/core/+/140260/3/sc/source/core/data/dociter.cxx@1694", "comments": [{"message": "IIRC, there were three choices here. This one includes \"empty rows at the end\" that are still under charts/images/flies. I somewhat randomly chose this method.", "timestamp": "2023-06-13 02:18:08.000000000"}]}
{"thread_id": "9260c442_8922205e", "url": "https://gerrit.libreoffice.org/#/c/core/+/142259/22/include/test/a11y/accessibletestbase.hxx@168", "comments": [{"message": "looks like one verb too much here, should that be just \"is\"?", "timestamp": "2023-02-24 10:45:31.000000000"}, {"message": "actually that sentence was not really working, I fixed it.", "timestamp": "2023-02-28 20:40:39.000000000"}, {"message": "Thanks!", "timestamp": "2023-03-01 08:06:14.000000000"}]}
{"thread_id": "27c73d4e_6055a2ea", "url": "https://gerrit.libreoffice.org/#/c/core/+/154156/2/sw/source/uibase/utlui/navipi.cxx@409", "comments": [{"message": "Please use a reasonable type. You used sal_Int64 below, because GetPageCnt gives that; and you pass nNewPage to m_xEdit->set_value, that also takes sal_Int64, so please use that.", "timestamp": "2023-07-07 10:10:34.000000000"}, {"message": "Done", "timestamp": "2023-07-07 10:49:47.000000000"}]}
{"thread_id": "ecb9ea53_347abbc9", "url": "https://gerrit.libreoffice.org/#/c/core/+/154156/2/sw/source/uibase/utlui/navipi.cxx@417", "comments": [{"message": "Is this still needed after the handler is implemented? When can the value be outside of the bounds?", "timestamp": "2023-07-07 10:10:34.000000000"}, {"message": "This code was copied from PageModifiedHdl in /core/sw/source/uibase/utlui/gotodlg.cxx.  I think it sets the cursor position in the spincontrol's text box.", "timestamp": "2023-07-07 10:49:47.000000000"}]}
{"thread_id": "c56b297e_1e4014d2", "url": "https://gerrit.libreoffice.org/#/c/core/+/154156/2/sw/source/uibase/utlui/navipi.cxx@519", "comments": [{"message": "Same here.", "timestamp": "2023-07-07 10:10:34.000000000"}, {"message": "Done", "timestamp": "2023-07-07 10:49:47.000000000"}]}
{"thread_id": "c4952767_aac9e58d", "url": "https://gerrit.libreoffice.org/#/c/core/+/154156/2/sw/source/uibase/utlui/navipi.cxx@527", "comments": [{"message": "Maybe avoid this case, and then also avoid the next line when nothing changes?", "timestamp": "2023-07-07 10:10:34.000000000"}, {"message": "This case is a catch-all for anything entered into the spinbox.  It truncates anything entered; e.g. type \".\" after a number like \"3.\" -> this converts to \"3\".  It's necessary to set the value so that the text in the view box doesn't show \"3.\" but instead forces it to \"3\".\n\nAs for the next line, this code was copied from PageModifiedHdl in /core/sw/source/uibase/utlui/gotodlg.cxx.", "timestamp": "2023-07-07 10:49:47.000000000"}]}
{"thread_id": "c8fad298_962595d7", "url": "https://gerrit.libreoffice.org/#/c/core/+/153161/4/sw/source/core/doc/docfmt.cxx@1076", "comments": [{"message": "Clang-format is your friend. The style in C++ files is braces-on-new-line.", "timestamp": "2023-06-23 11:16:35.000000000"}, {"message": "Done", "timestamp": "2023-07-07 18:42:34.000000000"}]}
{"thread_id": "bebeddb7_85a7b50a", "url": "https://gerrit.libreoffice.org/#/c/core/+/153161/4/sw/source/core/doc/docfmt.cxx@1079", "comments": [{"message": "Whether the UI can set a list level or not should be irrelevant to this code. Either it works now, or it doesn't work at all. So I don't think this should be experimental (unless you personally want to make your change experimental).", "timestamp": "2023-06-28 21:39:14.000000000"}, {"message": "Done", "timestamp": "2023-07-07 18:42:34.000000000"}]}
{"thread_id": "06d0a052_a770eea3", "url": "https://gerrit.libreoffice.org/#/c/core/+/153161/4/sw/source/core/doc/docfmt.cxx@1081", "comments": [{"message": "This is not \"resetting the list level\", it is \"copying the style's list level as direct formatting\", right?  I assume instead you just want to\npCNd->ResetAttr( RES_PARATR_LIST_LEVEL );\nin which case it should happen all the time since it also is conditionally done for bChangeOfListStyleAtParagraph", "timestamp": "2023-06-28 21:39:14.000000000"}, {"message": "Ack", "timestamp": "2023-07-07 18:42:34.000000000"}]}
{"thread_id": "bd0d136a_fa34f617", "url": "https://gerrit.libreoffice.org/#/c/core/+/153161/6/sw/source/core/doc/docfmt.cxx@1078", "comments": [{"message": "This is a bit of a hack - to set the style value as direct formatting.\nHowever, simply resetting the ListLevel attribute doesn't \"take\" the first time. The style needs to be applied a second time before SW updates the displayed level inherited from the style.\n\nSo likely there is a LOT fundamentally wrong happening in SW related to numbering - perhaps a hack is warranted, but things should be investigated and fixed properly before taking this whole concept out of experimental.", "timestamp": "2023-07-07 18:40:01.000000000"}]}
{"thread_id": "081f43e3_af6ae32b", "url": "https://gerrit.libreoffice.org/#/c/core/+/116712/3/unotools/source/misc/fontdefs.cxx@438", "comments": [{"message": "see <https://gerrit.libreoffice.org/c/core/+/154200> \"Remove duplicated entry\"", "timestamp": "2023-07-07 19:43:05.000000000"}]}
{"thread_id": "34ef82a6_dc86fa1f", "url": "https://gerrit.libreoffice.org/#/c/core/+/154117/1/sw/source/core/access/AccessibilityCheck.cxx@511", "comments": [{"message": "uhm ... general question (as this is already existing in other places): how long do these \"Issue\" objects live? a text node can be deleted very easily if the user puts the cursor at the start and backspaces to join it with the previous one.\n\nactually an extension could do that via API at any time.", "timestamp": "2023-07-07 09:22:20.000000000"}]}
{"thread_id": "37e70b9b_3f3c5b70", "url": "https://gerrit.libreoffice.org/#/c/core/+/154055/2/svgio/qa/cppunit/SvgImportTest.cxx@470", "comments": [{"message": "Can you please describe the test case. TDF number is just a reference, but a test failure can come form various places, so it is also important to describe the test case (the behavior of the tested unit we expect) itself.", "timestamp": "2023-07-05 13:44:42.000000000"}]}
{"thread_id": "08358b60_61f7555e", "url": "https://gerrit.libreoffice.org/#/c/core/+/154055/2/svgio/source/svgreader/svgtoken.cxx@b226", "comments": [{"message": "In case of bCaseIndependent == true, this needs to be aSearchStringr.toAsciiLowerCase(). Then it should work correctly.", "timestamp": "2023-07-05 13:32:47.000000000"}, {"message": "The problem I see with your implementation is that there might be a risk of a new string added to one list but not to the other, in case the string is case sensitive.\nIn my new patch, I duplicated the whole map and added a static_assert to make sure both maps have the same size. What do you think ?", "timestamp": "2023-07-05 14:03:49.000000000"}, {"message": "Well, that's fine, but as I said maps should separated for css and xml and both aren't supposed to have the same elements. When someone adds a new token they need to think if the element is supposed to be for css, xml or both and add it to the appropriate map(s).", "timestamp": "2023-07-05 15:31:35.000000000"}, {"message": "yep, that would be the most elegant solution, indeed. I'll take a look", "timestamp": "2023-07-05 15:40:08.000000000"}, {"message": "I don't plan to split the map between css and xml elements in this patch, since\nI want to backport it to libreoffice-7-6. I added a TODO comment in the code.", "timestamp": "2023-07-05 16:26:43.000000000"}]}
{"thread_id": "24327a47_d52e16ea", "url": "https://gerrit.libreoffice.org/#/c/core/+/154149/1/sw/source/core/doc/DocumentContentOperationsManager.cxx@4973", "comments": [{"message": "This 'pNumRuleToPropagate' is the \"previous found list\", which should logically be outside of the \"destination is an empty paragraph ... + source contains at least ...\", and should be a common pre-condition for both these *and* your check. Even though the end result is unchanged, please change to fix the logic. Thanks!", "timestamp": "2023-07-07 05:17:06.000000000"}, {"message": "Right, good catch!", "timestamp": "2023-07-07 07:37:34.000000000"}]}
{"thread_id": "e61dcb83_409bba01", "url": "https://gerrit.libreoffice.org/#/c/core/+/154145/2/vcl/source/control/roadmap.cxx@574", "comments": [{"message": "Can these be combined into LogicToLogic maybe, this way avoiding a destructive conversion to pixels, at the same time avoiding the dependency on current PPI?", "timestamp": "2023-07-07 04:59:16.000000000"}, {"message": "good idea: https://gerrit.libreoffice.org/c/core/+/154157", "timestamp": "2023-07-07 07:27:17.000000000"}]}
{"thread_id": "6de16bf4_737e11ba", "url": "https://gerrit.libreoffice.org/#/c/core/+/153862/4/xmlsecurity/source/dialogs/digitalsignaturesdialog.cxx@530", "comments": [{"message": "I will do more simplification here to share this", "timestamp": "2023-07-03 14:47:23.000000000"}]}
{"thread_id": "a97f4f97_beb94b6c", "url": "https://gerrit.libreoffice.org/#/c/core/+/154078/1/sw/source/core/access/AccessibilityCheck.cxx@471", "comments": [{"message": "maybe just return here if xTextRange->getString().isEmpty(), so you don't need the checks below.", "timestamp": "2023-07-06 07:53:17.000000000"}, {"message": "Done", "timestamp": "2023-07-06 08:34:49.000000000"}]}
{"thread_id": "9fcfac5c_cb164373", "url": "https://gerrit.libreoffice.org/#/c/core/+/89215/5/writerfilter/source/dmapper/DomainMapperTableHandler.cxx@1107", "comments": [{"message": "Here we change sPropertyName to \"ParaBackColor\", when eId == PROP_FILL_COLOR ...", "timestamp": "2023-07-05 06:04:03.000000000"}]}
{"thread_id": "3db80a84_3203f54d", "url": "https://gerrit.libreoffice.org/#/c/core/+/89215/5/writerfilter/source/dmapper/DomainMapperTableHandler.cxx@1142", "comments": [{"message": "... and here, in case of eId == PROP_FILL_COLOR, we do not use sPropertyName, but instead, use \"FillColor\" (which was the previous value of sPropertyName) + \"FillStyle\".\n\nIs this just a leftover from several attempts to fix it?", "timestamp": "2023-07-05 06:04:03.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/154016", "timestamp": "2023-07-05 06:15:34.000000000"}, {"message": "> Is this just a leftover from several attempts to fix it?\n\nIt's possible. There were problems with highlighted text spans, not only paragraph background colors, so maybe more, but without unit testing, only opening the test documents attached to the related issues could show. (Justin made some complex test documents.) Thanks for the clean-up!", "timestamp": "2023-07-06 10:45:06.000000000"}]}
{"thread_id": "cc4796aa_39fc6cb3", "url": "https://gerrit.libreoffice.org/#/c/core/+/154067/2/svgio/source/svgreader/svgdocumenthandler.cxx@534", "comments": [{"message": "Now branches are equal.", "timestamp": "2023-07-05 18:38:17.000000000"}, {"message": "Thanks. Done", "timestamp": "2023-07-05 18:41:15.000000000"}, {"message": "Done", "timestamp": "2023-07-05 18:42:57.000000000"}]}
{"thread_id": "5448d881_b3ccdc5d", "url": "https://gerrit.libreoffice.org/#/c/core/+/128418/8/sw/source/uibase/config/usrpref.cxx@393", "comments": [{"message": "This was a typo, right? ;)", "timestamp": "2023-07-05 12:16:41.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/154032", "timestamp": "2023-07-05 12:33:09.000000000"}, {"message": "yikes!", "timestamp": "2023-07-05 13:11:41.000000000"}]}
{"thread_id": "d78b1d80_f2b1d493", "url": "https://gerrit.libreoffice.org/#/c/core/+/153964/1/sc/source/ui/vba/vbaworksheet.cxx@687", "comments": [{"message": "This else looks like it returns the full document and not some sort of subrange that was requested. Might be better off returning nullptr or throwing something instead of returning what I'm guessing is not what was requested.", "timestamp": "2023-07-04 12:20:18.000000000"}, {"message": "Done", "timestamp": "2023-07-04 12:29:07.000000000"}]}
{"thread_id": "15471130_1ae78a58", "url": "https://gerrit.libreoffice.org/#/c/core/+/153571/3/editeng/source/misc/acorrcfg.cxx@527", "comments": [{"message": "Writer.xcs currently has this:\n\n<prop oor:name=\"MaxListLen\" oor:type=\"xs:int\" oor:nillable=\"false\">\n\n, are you sure that this can hold 64 bit ints? There is xs:long for large ints..", "timestamp": "2023-06-27 01:02:08.000000000"}, {"message": "Done", "timestamp": "2023-06-27 02:16:53.000000000"}]}
{"thread_id": "888a9e87_56267531", "url": "https://gerrit.libreoffice.org/#/c/core/+/153571/4/editeng/source/misc/acorrcfg.cxx@527", "comments": [{"message": "I feel that sal_Int32 is good enough here, and no need then to change the .xcs away from xs:int", "timestamp": "2023-06-27 08:15:23.000000000"}, {"message": "It seems true, although nVal may fall into negative numbers when it is bigger than 2^31. Not sure whether it will make the code confusing in the future.", "timestamp": "2023-06-30 02:05:44.000000000"}]}
{"thread_id": "ef658ce4_34eac57f", "url": "https://gerrit.libreoffice.org/#/c/core/+/153826/1/include/svx/constructhelper.hxx@28", "comments": [{"message": "The windows dll inconsistent linkage error is probably because here SVX_DLLPUBLIC is used but the .cxx is put into the svxcore library not svx. So either use SVXCORE_DLLPUBLIC here or put the .cxx into svx/Library_svx.mk instead of svx/Library_svxcore.mk", "timestamp": "2023-07-01 19:20:05.000000000"}, {"message": "Thanks! That seems to have passed a windows build (just a random? mac failure now).  Erm do you want me to squash that change into mine and repush?", "timestamp": "2023-07-03 17:33:47.000000000"}]}
{"thread_id": "11803051_e5238598", "url": "https://gerrit.libreoffice.org/#/c/core/+/153567/3/xmlsecurity/source/dialogs/digitalsignaturesdialog.cxx@554", "comments": [{"message": "As you removed the corresponding always-false check from `DigitalSignaturesDialog::IsThereCertificateMgr`, you might have wanted to remove this always-false check, too?", "timestamp": "2023-06-26 06:53:17.000000000"}, {"message": "seen address in <https://gerrit.libreoffice.org/c/core/+/153862> \"xmlsecurity : removedeadcode and usage of array template\"", "timestamp": "2023-07-03 15:26:31.000000000"}]}
{"thread_id": "c2f6ff6a_1359ce97", "url": "https://gerrit.libreoffice.org/#/c/core/+/121184/2/sw/source/core/inc/frame.hxx@871", "comments": [{"message": "Noel: are you OK if I rename this it GetTextFrame()? SwNode already has a GetTextNode() that does the same \"if the type matches, downcast it & return\", so it's a bit inconsistent to call this DynCastTextFrame() instead. Thanks.", "timestamp": "2023-07-03 09:14:44.000000000"}, {"message": "Hm, sorry, ignore that. I see we have several other DynCastType() functions, so the current naming is also consistent with something. It probably makes sense to not do anything.", "timestamp": "2023-07-03 09:19:39.000000000"}, {"message": "I think I added ~all of the DynCast* style stuff (I copied the naming convention from llvm).\nBut feel free to rename it.", "timestamp": "2023-07-03 09:34:42.000000000"}]}
{"thread_id": "c6d56f09_de998ed1", "url": "https://gerrit.libreoffice.org/#/c/core/+/127517/4/sw/source/core/doc/number.cxx@681", "comments": [{"message": "This means, that you can't use % in prefix/suffix.", "timestamp": "2023-06-30 15:59:09.000000000"}]}
{"thread_id": "6d436ad4_c9b3b3d7", "url": "https://gerrit.libreoffice.org/#/c/core/+/127517/4/sw/source/core/doc/number.cxx@705", "comments": [{"message": "This means, that you can't use e.g. %1% in text of prefix.", "timestamp": "2023-06-30 15:59:09.000000000"}]}
{"thread_id": "c2cf8876_98bc04b3", "url": "https://gerrit.libreoffice.org/#/c/core/+/152842/3/drawinglayer/source/primitive2d/borderlineprimitive2d.cxx@289", "comments": [{"message": "Since `getBorderLines` returns vector we can compare them using vector's `operator==`.", "timestamp": "2023-06-14 07:13:18.000000000"}, {"message": "Done", "timestamp": "2023-06-15 03:37:34.000000000"}]}
{"thread_id": "d042b01a_5e065ee6", "url": "https://gerrit.libreoffice.org/#/c/core/+/152842/3/drawinglayer/source/primitive2d/borderlineprimitive2d.cxx@303", "comments": [{"message": "This function always returns `false`.", "timestamp": "2023-06-14 07:13:18.000000000"}, {"message": "I made a tentative guess of where the `return true` statement should be, it clears all checks.", "timestamp": "2023-06-15 03:37:34.000000000"}, {"message": "Done", "timestamp": "2023-06-15 06:49:53.000000000"}]}
{"thread_id": "865aea6d_1e983d3d", "url": "https://gerrit.libreoffice.org/#/c/core/+/152842/4/drawinglayer/source/primitive2d/borderlineprimitive2d.cxx@283", "comments": [{"message": "Changed from `static_cast` to `dynamic_cast` to downcast as per the [C++ Core Guidelines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Pro-type-downcast).", "timestamp": "2023-06-15 03:41:11.000000000"}, {"message": "Accepted", "timestamp": "2023-06-15 22:14:34.000000000"}, {"message": "Rolled back because in this particular instance `dynamic_cast` is redundant and has runtime cost.", "timestamp": "2023-06-16 15:04:23.000000000"}]}
{"thread_id": "b758ae9f_22590190", "url": "https://gerrit.libreoffice.org/#/c/core/+/152842/4/drawinglayer/source/primitive2d/borderlineprimitive2d.cxx@293", "comments": [{"message": "This loop duplicates vector comparison now. It could be removed.", "timestamp": "2023-06-15 06:49:53.000000000"}, {"message": "Done", "timestamp": "2023-06-15 15:44:42.000000000"}]}
{"thread_id": "80bd615a_402045cd", "url": "https://gerrit.libreoffice.org/#/c/core/+/152842/6/drawinglayer/source/primitive2d/borderlineprimitive2d.cxx@283", "comments": [{"message": "BufferedDecompositionPrimitive2D::operator== already checks the ID of the 2 objects is the same which implies that the type is the same => dynamic_cast here has no benefit (and is slower)", "timestamp": "2023-06-16 09:18:48.000000000"}, {"message": "Done", "timestamp": "2023-06-16 15:04:23.000000000"}]}
{"thread_id": "2c0b90eb_e18ef4d1", "url": "https://gerrit.libreoffice.org/#/c/core/+/152842/3/drawinglayer/source/primitive3d/polygontubeprimitive3d.cxx@488", "comments": [{"message": "Probably `std::transform` is more suitable here.", "timestamp": "2023-06-14 07:13:18.000000000"}, {"message": "Done", "timestamp": "2023-06-15 03:37:34.000000000"}]}
{"thread_id": "6f980283_ed92584f", "url": "https://gerrit.libreoffice.org/#/c/core/+/152842/3/drawinglayer/source/primitive3d/polygontubeprimitive3d.cxx@714", "comments": [{"message": "Probably `std::transform` is more suitable here.", "timestamp": "2023-06-14 07:13:18.000000000"}, {"message": "Done", "timestamp": "2023-06-15 03:37:34.000000000"}]}
{"thread_id": "100c9bca_5760b769", "url": "https://gerrit.libreoffice.org/#/c/core/+/153405/2/sc/source/ui/view/select.cxx@127", "comments": [{"message": "This one needs to be m_pViewData too to clear\n\"sc/source/ui/view/select.cxx(127): error C2065: 'pViewData': undeclared identifier\"", "timestamp": "2023-06-22 16:00:35.000000000"}, {"message": "Thanks for the update", "timestamp": "2023-06-29 17:31:17.000000000"}]}
{"thread_id": "a592365b_d6cf1946", "url": "https://gerrit.libreoffice.org/#/c/core/+/153724/2/sw/source/uibase/sidebar/A11yCheckIssuesPanel.cxx@162", "comments": [{"message": "Please use lowerCamelCase notation (removeOldWidgets)", "timestamp": "2023-06-29 06:32:28.000000000"}, {"message": "Done", "timestamp": "2023-06-29 06:43:00.000000000"}]}
{"thread_id": "95bc72ea_ae048152", "url": "https://gerrit.libreoffice.org/#/c/core/+/153724/2/sw/source/uibase/sidebar/A11yCheckIssuesPanel.cxx@209", "comments": [{"message": "this comment can be removed since the method name speaks for itself.", "timestamp": "2023-06-29 06:32:28.000000000"}, {"message": "Done", "timestamp": "2023-06-29 06:43:00.000000000"}]}
{"thread_id": "81be7460_1347060a", "url": "https://gerrit.libreoffice.org/#/c/core/+/153358/8/editeng/source/uno/unotext.cxx@2120", "comments": [{"message": "Nice. This seems to fix tdf#116676.", "timestamp": "2023-06-28 09:06:01.000000000"}, {"message": "Ohh cool. :) Thanks for the link.", "timestamp": "2023-06-28 09:31:02.000000000"}]}
{"thread_id": "2014c189_c1a30573", "url": "https://gerrit.libreoffice.org/#/c/core/+/153358/6/sc/source/core/data/postit.cxx@804", "comments": [{"message": "(This triggers loplugin:external)", "timestamp": "2023-06-27 08:09:43.000000000"}, {"message": "Done", "timestamp": "2023-06-27 10:09:50.000000000"}]}
{"thread_id": "83064406_542d2c48", "url": "https://gerrit.libreoffice.org/#/c/core/+/153358/6/sc/source/core/data/postit.cxx@806", "comments": [{"message": "Hmm, I wonder if there's no more direct way for this, other than use that UNO indirection?", "timestamp": "2023-06-27 08:09:43.000000000"}, {"message": "After talking a little bit with Armin Le Grand about which way would be better here, we think with this it is more safe since it is thread safe as well. (Also it is not slower with UNO as far as I see.) But probably it can be done more direct way too. (Maybe a TODO for later. :) )", "timestamp": "2023-06-27 10:09:50.000000000"}, {"message": "Done", "timestamp": "2023-06-28 17:41:40.000000000"}]}
{"thread_id": "78bcf8ee_3237f41e", "url": "https://gerrit.libreoffice.org/#/c/core/+/153358/6/sc/source/core/data/postit.cxx@808", "comments": [{"message": "This seems to apply the comment's formatting to the first paragraph as well. e.g. select all the comment's text and make it red.", "timestamp": "2023-06-27 08:09:43.000000000"}, {"message": "Yes, It looks like. Thanks for the detailed checking. :) So I expand the function SvxUnoTextBase::insertTextPortion, which was missing here and with that we insert the text and then remove all the attributes and properties and set only those props, that we want there. (Such as Bold font style)", "timestamp": "2023-06-27 10:09:50.000000000"}]}
{"thread_id": "7d29b9d8_513d974a", "url": "https://gerrit.libreoffice.org/#/c/core/+/153358/6/sc/source/core/data/postit.cxx@861", "comments": [{"message": "Can this ever be true, given the change in gridwin5.cxx? (Same also in other places in this method.)", "timestamp": "2023-06-27 08:09:43.000000000"}, {"message": "Yes, it looks like it cannot be empty anymore since we always add some info now on.", "timestamp": "2023-06-27 10:09:50.000000000"}]}
{"thread_id": "50ad7006_61b73bb5", "url": "https://gerrit.libreoffice.org/#/c/core/+/153358/6/sc/source/core/data/postit.cxx@863", "comments": [{"message": "We also want all this probably, to fully keep the comment formatting.", "timestamp": "2023-06-27 08:09:43.000000000"}, {"message": "Done", "timestamp": "2023-06-27 10:09:50.000000000"}]}
{"thread_id": "fc422a08_1828c6e8", "url": "https://gerrit.libreoffice.org/#/c/core/+/153358/6/sc/source/core/data/postit.cxx@874", "comments": [{"message": "This pNote will be nullptr and crash. To reproduce Edit > Track Changes > Record, type something into a cell, exit edit mode, and hover over the cell. I think this all \"if (!pNoteCaption)\" block can be removed, as we insert aBuffer later on anyway.", "timestamp": "2023-06-27 08:09:43.000000000"}, {"message": "Done", "timestamp": "2023-06-27 10:09:50.000000000"}]}
{"thread_id": "462921dd_9432f6d4", "url": "https://gerrit.libreoffice.org/#/c/core/+/153358/9/sc/source/core/data/postit.cxx@883", "comments": [{"message": "This one is a bit confusing: Does it mean that there is a known case when ScPostIt::GetOrCreateCaption returns nullptr (despite its name)?", "timestamp": "2023-06-28 19:12:18.000000000"}, {"message": "Thank you for the lot of review, Maxim. :) I am very grateful.\nYes, you are right, after more debugging and checking it looks like we never reach now this part of the code: aBuffer.append(pNote->GetText()); Also it is not possible to return nullptr from ScPostIt::GetOrCreateCaption. Thanks for the hint. :) Just removed.", "timestamp": "2023-06-28 21:22:06.000000000"}, {"message": "Done", "timestamp": "2023-06-28 21:22:30.000000000"}]}
{"thread_id": "058c0da6_9556db98", "url": "https://gerrit.libreoffice.org/#/c/core/+/153587/1/sc/source/filter/oox/commentsbuffer.cxx@166", "comments": [{"message": "This would be an unchecked dynamic cast.", "timestamp": "2023-06-28 10:52:47.000000000"}]}
{"thread_id": "42eeb9ff_b1c25af0", "url": "https://gerrit.libreoffice.org/#/c/core/+/153207/1/tools/source/datetime/duration.cxx@171", "comments": [{"message": "Should be past tense because it happened earlier, so `overflowed` (erroneous overflew is past tense of overfly..).", "timestamp": "2023-06-27 15:47:15.000000000"}, {"message": "Thank you for the feedback! I corrected the word accordingly.", "timestamp": "2023-06-27 16:52:17.000000000"}]}
{"thread_id": "5a1b9801_83f6cbd4", "url": "https://gerrit.libreoffice.org/#/c/core/+/150804/3/xmloff/source/style/xmlnumfe.cxx@704", "comments": [{"message": "This can only be written if extensions are enabled or in a future ODF version that would define the <number:embedded-text> element as child element of <number:scientific-number>.", "timestamp": "2023-05-26 16:34:17.000000000"}, {"message": "Done", "timestamp": "2023-05-30 20:40:52.000000000"}]}
{"thread_id": "98fa8c09_1bad813b", "url": "https://gerrit.libreoffice.org/#/c/core/+/150804/3/xmloff/source/style/xmlnumfe.cxx@1393", "comments": [{"message": "Ditto.", "timestamp": "2023-05-26 16:34:17.000000000"}, {"message": "Done", "timestamp": "2023-05-30 20:40:52.000000000"}]}
{"thread_id": "7fcd8dd3_4755051f", "url": "https://gerrit.libreoffice.org/#/c/core/+/145490/2/sw/qa/extras/rtfimport/rtfimport.cxx@1010", "comments": [{"message": "I do not understand what this line asserts. The document imported not exactly same as in Word: the last empty paragraph was also hidden in Word, and also it had all the direct formatting as the rest. Due to a problem that DomainMapper_Impl::RemoveLastParagraph did not keep character formatting of the last remaining paragraph on load, that you mentioned in e521930ea1c855c236efb67793e540d07c201d35, the last paragraph in Writer was unformatted. But is this what should be asserted here? I ask because I try to fix DomainMapper_Impl::RemoveLastParagraph (by manually re-anchoring objects from last to one-before-last para), and this test tells me no :)", "timestamp": "2023-06-22 19:59:45.000000000"}, {"message": "i don't remember exactly, but possibly there is a problem if every paragraph in the document ends up hidden?\n\nin case there is no such problem, i guess this check can be removed.", "timestamp": "2023-06-27 09:40:51.000000000"}]}
{"thread_id": "bea5b1ca_2587a34d", "url": "https://gerrit.libreoffice.org/#/c/core/+/152909/2/sc/source/core/data/column2.cxx@858", "comments": [{"message": "This is the function I needed to return the correct min height. The other places that I replaced ScGlobal::nStdRowHeight were to fill out the implementation.", "timestamp": "2023-06-13 02:13:22.000000000"}]}
{"thread_id": "ef602bb8_29dfcceb", "url": "https://gerrit.libreoffice.org/#/c/core/+/153112/1/basegfx/source/color/bcolormodifier.cxx@192", "comments": [{"message": "Hi Armin,\nI'm trying to implement the hueRotate color modifier since this is used in the svg filters.\nThe documentation is in https://www.w3.org/TR/filter-effects/#attr-valuedef-type-huerotate, however the output is not the same as in other svg viewers.\nDo you have any idea where the problem might be ?\nThanks in advance for your help", "timestamp": "2023-06-15 10:47:24.000000000"}]}
{"thread_id": "8d75663b_0d327279", "url": "https://gerrit.libreoffice.org/#/c/core/+/153112/3/basegfx/source/color/bcolormodifier.cxx@174", "comments": [{"message": "It might be a nonsense, so ignore if you disagree. My personal preference would be to never create APIs taking degrees, only radians (well, except for basegfx::deg2rad \ud83d\ude04 itself - it's OK that it takes degrees). Besides some consistency, this would also move radian calculation outside, so caller would do it once in the call site, instead of doing it twice here (a neglectable optimization, but still \ud83d\ude0a)\n\nI couldn't find any problems in the matrix...", "timestamp": "2023-06-21 21:00:29.000000000"}, {"message": "Hi Mike,\nThanks a lot for your comment. I included your suggestion in the latest patch.\nWith that, I'll submit it once Jenkins gives the green light.\nThank you all for your help!", "timestamp": "2023-06-21 21:13:21.000000000"}]}
{"thread_id": "9eae8e23_b030e73e", "url": "https://gerrit.libreoffice.org/#/c/core/+/153112/3/basegfx/source/color/bcolormodifier.cxx@179", "comments": [{"message": "Hi Tomaz, Mike,\nI'm trying to implement hueRotate according to the documentation -> https://www.w3.org/TR/filter-effects/#attr-valuedef-type-huerotate\nHowever, the result is not the same as in firefox or other svg viewers -> https://imgur.com/a/JQSsT80\nOTOH, the saturate color modifier works as expected -> https://gerrit.libreoffice.org/c/core/+/153048\nDo you have any idea what the problem might be here ?", "timestamp": "2023-06-21 07:20:27.000000000"}, {"message": "On the top of my head .. make sure the matrix row and column indices are correct.\n\nAlso this is great example where a unit test would be great. Pretty much pure algorithm with no dependencies and input / output values are known.", "timestamp": "2023-06-21 08:57:04.000000000"}, {"message": "> On the top of my head .. make sure the matrix row and column indices are correct.\n\nI rechecked it a few times and everything looks fine to my eyes. That's why I added you a Mike, maybe another point of view could help\n\n> Also this is great example where a unit test would be great. Pretty much pure algorithm with no dependencies and input / output values are known.\n\nIndeed. That's something I already have in mind to do after I implement hueRotate and matrixColor", "timestamp": "2023-06-21 10:53:53.000000000"}, {"message": "Ah right, I didn't have the latest code and was also interpreting the svg wrongly.\n\nYou can probably do hue rotation differently... by converting to HSL first. \nbasegfx::BColor aHSLBColor = basegfx::utils::rgb2hsl(getBColor());\n\nthen hue rotation is simply just manipulating the X component (hue) by adding the input value:\n\naHSLBColor.setRed(aHSLBColor.getRed() + fValue)); // and make sure the value is inside 0.0 and 360.0 by looping around (hue is in degrees)\n\nThen converting back:\naBColor = basegfx::utils::hsl2rgb(aBColor);", "timestamp": "2023-06-21 16:05:05.000000000"}, {"message": "Finally I found the issue, the values have to be clamped to the range 0.0..1.0 when creating the color, then it works as expected.\nThanks a lot for your help. Much appreciated", "timestamp": "2023-06-21 20:59:17.000000000"}]}
{"thread_id": "cce270bf_8f518220", "url": "https://gerrit.libreoffice.org/#/c/core/+/153112/3/basegfx/source/color/bcolormodifier.cxx@208", "comments": [{"message": "Shouldn't this be a vector?", "timestamp": "2023-06-21 14:50:35.000000000"}, {"message": "Oh yes.... tried it now and it works - aColorMatrix shouldn't be a matrix. Just do;\n\nbasegfx::B3DVector aColorVector(aSourceColor.getRed(), aSourceColor.getGreen(), aSourceColor.getBlue());\n\naColorVector = maHueMatrix * aColorVector;\n\nreturn ::basegfx::BColor(aColorVector.getX(), aColorVector.getY(), aColorVector.getZ());", "timestamp": "2023-06-21 15:00:21.000000000"}, {"message": "Hi Tomaz,\nNo, it doesn't work for me. I get the same result as if I use a B3DHomMatrix", "timestamp": "2023-06-21 15:07:36.000000000"}, {"message": "In fact, in https://gerrit.libreoffice.org/c/core/+/153390 I changed it to use B3DHomMatrix and it keeps working as before, so I believe the issue might be somewhere else", "timestamp": "2023-06-21 15:13:37.000000000"}]}
{"thread_id": "21abd858_80c22ed7", "url": "https://gerrit.libreoffice.org/#/c/core/+/153177/1/basegfx/source/color/bcolormodifier.cxx@167", "comments": [{"message": "if I read the spec right, this should be\n   aNew = maValue * aNew", "timestamp": "2023-06-16 10:54:29.000000000"}, {"message": "yes, you are right. thanks", "timestamp": "2023-06-16 12:44:00.000000000"}]}
{"thread_id": "2096dd1a_6ee017d9", "url": "https://gerrit.libreoffice.org/#/c/core/+/153177/5/svgio/source/svgreader/svgtools.cxx@862", "comments": [{"message": "coverity sees this too with 1532475 Out-of-bounds access\n\na basegfx::B3DHomMatrix is 4x4 so max column index it can use is 3 and here we use index 4 and boom", "timestamp": "2023-06-25 13:41:02.000000000"}]}
{"thread_id": "9d8d4a91_f6167979", "url": "https://gerrit.libreoffice.org/#/c/core/+/153552/3/svx/source/sidebar/area/AreaPropertyPanelBase.cxx@494", "comments": [{"message": "81daca18b69d31995bcd56f804659318398c02e2 changed this line here at 494", "timestamp": "2023-06-25 16:25:13.000000000"}]}
{"thread_id": "532213b5_51849355", "url": "https://gerrit.libreoffice.org/#/c/core/+/153552/3/svx/source/sidebar/area/AreaPropertyPanelBase.cxx@522", "comments": [{"message": "but there was another one here at 522", "timestamp": "2023-06-25 16:25:13.000000000"}, {"message": "Ah indeed, I have missed that. Thank you for catching that.", "timestamp": "2023-06-25 16:40:55.000000000"}]}
{"thread_id": "4fa5664a_ac5b13fb", "url": "https://gerrit.libreoffice.org/#/c/core/+/151707/11/include/oox/drawingml/color.hxx@172", "comments": [{"message": "see https://gerrit.libreoffice.org/c/core/+/153521 if backporting to co-23.05", "timestamp": "2023-06-25 11:06:31.000000000"}]}
{"thread_id": "71fd0ed0_de3cea13", "url": "https://gerrit.libreoffice.org/#/c/core/+/153555/1/svx/source/sidebar/area/AreaTransparencyGradientPopup.cxx@90", "comments": [{"message": "I presume  maColorStops = aGradient.GetColorStops(); would also work, and without the need for an intermediate BColorStops copy?", "timestamp": "2023-06-24 14:48:36.000000000"}, {"message": "In my local tests the short form works. So let's try.", "timestamp": "2023-06-24 16:51:13.000000000"}]}
{"thread_id": "88c1a0f5_abc6c76c", "url": "https://gerrit.libreoffice.org/#/c/core/+/153367/2/xmlsecurity/source/dialogs/digitalsignaturesdialog.cxx@207", "comments": [{"message": "Thought to disable resp. set_active(false) but hiding is maybe even better in this case.", "timestamp": "2023-06-22 13:25:43.000000000"}]}
{"thread_id": "0e8a1a4a_5870b591", "url": "https://gerrit.libreoffice.org/#/c/core/+/153367/2/xmlsecurity/source/dialogs/digitalsignaturesdialog.cxx@492", "comments": [{"message": "best move this out to file level anon namespace, and share the static array with the CertMgrButtonHdl below. we try to keep LibreOffice DRY ;)", "timestamp": "2023-06-22 08:00:07.000000000"}, {"message": "Done", "timestamp": "2023-06-23 07:31:47.000000000"}]}
{"thread_id": "2e8e3d8c_59c1b52e", "url": "https://gerrit.libreoffice.org/#/c/core/+/153509/2/sw/source/core/edit/autofmt.cxx@2113", "comments": [{"message": "You missed renaming this.", "timestamp": "2023-06-23 17:23:05.000000000"}, {"message": "Sorry I missed.", "timestamp": "2023-06-23 18:39:10.000000000"}]}
{"thread_id": "d38e996b_9f59276d", "url": "https://gerrit.libreoffice.org/#/c/core/+/153509/1/unotools/source/i18n/charclass.cxx@265", "comments": [{"message": "This does not look right. You want the new method to match combining marks in addition to letters and numbers, but this method will match combining marks and numbers only.", "timestamp": "2023-06-23 16:59:22.000000000"}, {"message": "All letters also belong to BaseType", "timestamp": "2023-06-23 17:16:12.000000000"}, {"message": "Right, I missed that. This also apply for `DIGIT`, so checking for `nCharClassNumericType` is redundant here and you can simplify the function to be `isBase()`.", "timestamp": "2023-06-23 17:21:33.000000000"}, {"message": "I wrote the above before seeing you second commit, so yes, we agree.", "timestamp": "2023-06-23 17:22:26.000000000"}, {"message": "Done", "timestamp": "2023-06-23 18:39:56.000000000"}]}
{"thread_id": "5f174a13_e69bd9a5", "url": "https://gerrit.libreoffice.org/#/c/core/+/153509/2/unotools/source/i18n/charclass.cxx@273", "comments": [{"message": "This function is unused. It might be nice for API completeness sake, but lets not add unused code. If there is need for it, someone will figure out how to add it.", "timestamp": "2023-06-23 17:27:57.000000000"}, {"message": "Done", "timestamp": "2023-06-23 18:39:10.000000000"}]}
{"thread_id": "8bd4852d_e9225a04", "url": "https://gerrit.libreoffice.org/#/c/core/+/152899/1/cui/source/options/optjava.cxx@951", "comments": [{"message": "This skipping of \":\" nested in \"${...:...:...}\" should only be done if `sToken` starts with \"$\"?  (And handling of variables used recursively inside \"${...:...:...}\" is still broken, which should at least be mentioned in some TODO comment.)", "timestamp": "2023-06-13 12:08:18.000000000"}, {"message": "Done", "timestamp": "2023-06-15 11:12:42.000000000"}]}
{"thread_id": "224a0671_fc22727b", "url": "https://gerrit.libreoffice.org/#/c/core/+/152899/1/cui/source/options/optjava.cxx@955", "comments": [{"message": "This should rather look for the \"}\" matching the \"${\" at `nBootstrapVarStart`?", "timestamp": "2023-06-13 12:08:18.000000000"}, {"message": "Done", "timestamp": "2023-06-15 11:12:42.000000000"}]}
{"thread_id": "ca9ad0c3_2f074df7", "url": "https://gerrit.libreoffice.org/#/c/core/+/152899/1/cui/source/options/optjava.cxx@968", "comments": [{"message": "Should `sURL` be macro-expanded here, so that the below call to `SvFileInformationManager::GetImageId` will work?", "timestamp": "2023-06-13 12:08:18.000000000"}, {"message": "Done", "timestamp": "2023-06-15 11:12:42.000000000"}]}
{"thread_id": "6b9ca456_f7e2f790", "url": "https://gerrit.libreoffice.org/#/c/core/+/152899/3/cui/source/options/optjava.cxx@946", "comments": [{"message": "why did you hoist `sURL` out of the loop?", "timestamp": "2023-06-15 10:31:36.000000000"}, {"message": "Done", "timestamp": "2023-06-15 11:12:42.000000000"}]}
{"thread_id": "4683b153_9bfd304c", "url": "https://gerrit.libreoffice.org/#/c/core/+/152899/9/cui/source/options/optjava.cxx@945", "comments": [{"message": "Did you forget some '#if HAVE_FEATURE_JAVA' around this function call? Other places in this file do that, needed for the --without-java build.", "timestamp": "2023-06-21 08:56:25.000000000"}, {"message": "Proposed fix at https://gerrit.libreoffice.org/c/core/+/153386", "timestamp": "2023-06-21 10:08:47.000000000"}]}
{"thread_id": "9a177d76_bc9f97e2", "url": "https://gerrit.libreoffice.org/#/c/core/+/152899/1/jvmfwk/source/framework.cxx@195", "comments": [{"message": "You rather need to do something similar to `SvxJavaClassPathDlg::SetClassPath` here, loop over the individual colon-separated class paths, and for those that start with \"$\", macro-expand them and convert them from file URLs to pathnames.", "timestamp": "2023-06-13 12:08:18.000000000"}, {"message": "Done", "timestamp": "2023-06-15 11:12:42.000000000"}]}
{"thread_id": "c118a926_1ca5a18b", "url": "https://gerrit.libreoffice.org/#/c/core/+/152899/3/jvmfwk/source/framework.cxx@226", "comments": [{"message": "this appears to be unused", "timestamp": "2023-06-15 10:31:36.000000000"}, {"message": "Done", "timestamp": "2023-06-15 11:12:42.000000000"}]}
{"thread_id": "9dfef473_230d24c0", "url": "https://gerrit.libreoffice.org/#/c/core/+/152899/4/jvmfwk/source/framework.cxx@150", "comments": [{"message": "* There could be multiple occurrences of ${...:...:...} in `sToken`.\n* As already discussed, there could be nested occurrences of ${...:...:...}, handling of which \"is still broken, which should at least be mentioned in some TODO comment.\"", "timestamp": "2023-06-15 11:42:33.000000000"}, {"message": "Ok, I documented the two limitations and would keep it like that for now.\nIf you see an obvious way to extend the algorithm to support those two cases, feel free :)\nI'm out of ideas/time atm.", "timestamp": "2023-06-19 07:28:51.000000000"}, {"message": "Done", "timestamp": "2023-06-20 22:45:49.000000000"}]}
{"thread_id": "c18416d7_a23c8b86", "url": "https://gerrit.libreoffice.org/#/c/core/+/153371/3/i18nutil/source/utility/unicode.cxx@302", "comments": [{"message": "Maybe it could make sense to move the `default:` label before the other `case`s here, and after it, add an assert or a warning, and a [[fallback]], to catch there wild things in the future? If you provide a useful message \"what to do now\", it would help :)", "timestamp": "2023-06-21 08:58:10.000000000"}, {"message": "The comment and behavior are carried over from the previous code. I didn\u2019t want to make any behavior changes in this commit. This code misses quite a lot of later script additions to ICU, but `ScriptType::COMPLEX` is a safer bet and is the right choice for most of new scripts in Unicode.", "timestamp": "2023-06-21 09:23:45.000000000"}]}
{"thread_id": "40888b68_d57dca08", "url": "https://gerrit.libreoffice.org/#/c/core/+/149066/7/sc/source/filter/oox/condformatbuffer.cxx@1440", "comments": [{"message": "I got some recent crashtesting I bisected to here. I wonder if this pEntry->SetValue should be conditional on type == COLORSCALE_VALUE or type != COLORSCALE_FORMULA or something like that?\n\nI emailed the testcase to you, its: forum-mso-en4-491032.xlsx", "timestamp": "2023-06-19 11:15:04.000000000"}, {"message": "Thanks, I will investigate, can you attach the backtrace log?", "timestamp": "2023-06-19 12:26:56.000000000"}, {"message": "#0  formula::FormulaTokenArray::GetLen() const (this=0x0) at include/formula/tokenarray.hxx:387\n#1  0x00007fffd0df5daa in XclXmlUtils::ToOUString(sc::CompileFormulaContext&, ScAddress const&, ScTokenArray const*, FormulaError)\n    (rCtx=..., rAddress=..., pTokenArray=0x0, nErrCode=FormulaError::NONE) at /home/caolan/LibreOffice/core/sc/source/filter/excel/xestream.cxx:812\n#2  0x00007fffd0c7aaec in XclExpCfvo::SaveXml(XclExpXmlStream&) (this=0x305c5b0, rStrm=...) at /home/caolan/LibreOffice/core/sc/source/filter/excel/xecontent.cxx:1229\n#3  0x00007fffd0c7d07a in XclExpDataBar::SaveXml(XclExpXmlStream&) (this=0x3120bb0, rStrm=...) at /home/caolan/LibreOffice/core/sc/source/filter/excel/xecontent.cxx:1506\n#4  0x00007fffd0c8b2e3 in XclExpRecordList<XclExpRecord>::SaveXml(XclExpXmlStream&) (this=0x305c3c8, rStrm=...) at sc/source/filter/inc/xerecord.hxx:386\n#5  0x00007fffd0c7c4cf in XclExpCondfmt::SaveXml(XclExpXmlStream&) (this=0x305c390, rStrm=...) at /home/caolan/LibreOffice/core/sc/source/filter/excel/xecontent.cxx:1436\n#6  0x00007fffd0c8cad3 in XclExpRecordList<XclExpCondfmt>::SaveXml(XclExpXmlStream&) (this=0x305c338, rStrm=...) at sc/source/filter/inc/xerecord.hxx:386\n#7  0x00007fffd0c7dbf1 in XclExpCondFormatBuffer::SaveXml(XclExpXmlStream&) (this=0x305c310, rStrm=...)\n    at /home/caolan/LibreOffice/core/sc/source/filter/excel/xecontent.cxx:1586\n#8  0x00007fffd0b772c3 in XclExpRecordList<XclExpRecordBase>::SaveXml(XclExpXmlStream&) (this=0x2e51bb8, rStrm=...) at sc/source/filter/inc/xerecord.hxx:386\n#9  0x00007fffd0b737cb in ExcTable::WriteXml(XclExpXmlStream&) (this=0x2e51b90, rStrm=...) at /home/caolan/LibreOffice/core/sc/source/filter/excel/excdoc.cxx:705\n#10 0x00007fffd0b74cc7 in ExcDocument::WriteXml(XclExpXmlStream&) (this=0x7fffffff41e8, rStrm=...) at /home/caolan/LibreOffice/core/sc/source/filter/excel/excdoc.cxx:869\n#11 0x00007fffd0df836a in XclExpXmlStream::exportDocument() (this=0x29e5500) at /home/caolan/LibreOffice/core/sc/source/filter/excel/xestream.cxx:1126\n#12 0x00007fffd26b6ba9 in oox::core::FilterBase::filter(com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&)\n    (this=0x29e5500, rMediaDescSeq=uno::Sequence of length 15 = {...}) at /home/caolan/LibreOffice/core/oox/source/core/filterbase.cxx:495\n#13 0x00007fffd11bb736 in oox::xls::ExcelFilter::filter(com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&)\n    (this=0x29e0610, rDescriptor=uno::Sequence of length 15 = {...}) at /home/caolan/LibreOffice/core/sc/source/filter/oox/excelfilter.cxx:191", "timestamp": "2023-06-19 12:28:54.000000000"}, {"message": "Resolved  https://gerrit.libreoffice.org/c/core/+/153293", "timestamp": "2023-06-19 15:50:56.000000000"}]}
{"thread_id": "b3330078_ae89e161", "url": "https://gerrit.libreoffice.org/#/c/core/+/153007/2/vcl/source/gdi/embeddedfontshelper.cxx@314", "comments": [{"message": "This part should probably be refactored to a small helper function, so that we make sure we always build the file names the same way.", "timestamp": "2023-06-19 05:58:30.000000000"}, {"message": "Done", "timestamp": "2023-06-19 15:34:48.000000000"}]}
{"thread_id": "de866e1e_8b22801c", "url": "https://gerrit.libreoffice.org/#/c/core/+/153254/1/tools/source/datetime/duration.cxx@190", "comments": [{"message": "This should still cause the same UB, no?", "timestamp": "2023-06-19 08:46:47.000000000"}, {"message": "Is this should be better for negative case?\nstatic_cast<sal_uInt64>(-(static_cast<sal_Int64>(mnDays)))", "timestamp": "2023-06-19 08:52:39.000000000"}, {"message": "yes", "timestamp": "2023-06-19 08:59:29.000000000"}, {"message": "Done", "timestamp": "2023-06-19 09:02:13.000000000"}]}
{"thread_id": "fdae2dec_432ea7ae", "url": "https://gerrit.libreoffice.org/#/c/core/+/152179/9/cui/qa/uitest/dialogs/macroselectordlg.py@14", "comments": [{"message": "I've already modified the test here", "timestamp": "2023-06-06 15:28:10.000000000"}, {"message": "What is there not at position 1?", "timestamp": "2023-06-12 10:03:44.000000000"}, {"message": "Sorry that I've made a mistake before. In Patchset 9, I forgot to check bEventMode, so \"All commands\" is added to RunMacro. Now, it is fixed.", "timestamp": "2023-06-17 14:15:55.000000000"}]}
{"thread_id": "fe356f04_544a9c80", "url": "https://gerrit.libreoffice.org/#/c/core/+/152179/3/cui/source/customize/cfgutil.cxx@661", "comments": [{"message": "I believe that thawing should still be at the end - or does it prevent sorting? If so, we need to freeze again after sorting, and thaw at the end.", "timestamp": "2023-06-03 08:00:43.000000000"}, {"message": "It prevents sorting. However, I do not agree that we need to freeze again. Originally, there is no freeze after the thaw. Why should we freeze now?", "timestamp": "2023-06-03 16:27:52.000000000"}, {"message": "Originally, thaw happened after all the items added, in the very end. Indeed, there was no freeze after that. Here you thaw before adding more elements.\n\nFreeze/thaw prevents flicker and other overhead when doing batch UI operations, like adding many items. Here you will add many items after the thaw. All styles, all macros, all sidebar decks.", "timestamp": "2023-06-03 19:08:08.000000000"}, {"message": "Done", "timestamp": "2023-06-04 17:22:45.000000000"}]}
{"thread_id": "c57c4fa1_09cf9227", "url": "https://gerrit.libreoffice.org/#/c/core/+/152179/3/cui/source/customize/cfgutil.cxx@678", "comments": [{"message": "I see where these lines come from (old code lines 507-510); yet, since this is a new code, please format them to have the braces aligned with the 'catch' - line in old code lines 655-659.", "timestamp": "2023-06-03 08:00:43.000000000"}, {"message": "Done", "timestamp": "2023-06-03 16:32:26.000000000"}]}
{"thread_id": "4b0ae659_c98d6dbb", "url": "https://gerrit.libreoffice.org/#/c/core/+/152179/7/cui/source/customize/cfgutil.cxx@659", "comments": [{"message": "Is this piece not related to macros? You have split it to be separate - why?", "timestamp": "2023-06-04 18:11:34.000000000"}, {"message": "This is due to the uitest. I've modified that, so it will pass.", "timestamp": "2023-06-06 04:25:26.000000000"}, {"message": "Hmm, could you please tell which Jinkins build failed because of this? I need to check what made the test fail. My feeling is that this should be fixed on the test side, not here.", "timestamp": "2023-06-06 05:55:59.000000000"}, {"message": "I've already modified the test.", "timestamp": "2023-06-06 15:28:10.000000000"}, {"message": "Can you take a look?", "timestamp": "2023-06-09 14:50:19.000000000"}, {"message": "Done", "timestamp": "2023-06-17 14:15:55.000000000"}]}
{"thread_id": "739ac80f_2a02e67f", "url": "https://gerrit.libreoffice.org/#/c/core/+/152179/7/cui/source/customize/cfgutil.cxx@685", "comments": [{"message": "Here you had to repeat all the code to obtain dispatch provider, get supported command groups, handle exceptipons, just to find out if there are elements. This information was already obtained above; better have a boolean, that you set above, and check here.", "timestamp": "2023-06-04 18:11:34.000000000"}, {"message": "Done", "timestamp": "2023-06-06 04:25:26.000000000"}]}
{"thread_id": "7ae01f66_86c11806", "url": "https://gerrit.libreoffice.org/#/c/core/+/152179/11/cui/source/customize/cfgutil.cxx@632", "comments": [{"message": "Still, the name is not clear. What does \"c1\" mean?\nPlease rename it to, say, \"nAddedGroups\", or something like that. But actually, it is not \"number of added groups\", but rather \"number of groups that we tried to add\" - throwing 'NoSuchElementException' in the addition, or empty group name, would skip it. I'd change CuiConfigGroupListBox::InitModule to have a variable to actually count added, and return *that*; and add a comment in cui/source/inc/cfgutil.hxx, explaining what InitModule returns.", "timestamp": "2023-06-18 06:39:51.000000000"}]}
{"thread_id": "24c23e7d_8ac675fd", "url": "https://gerrit.libreoffice.org/#/c/core/+/152835/1/sw/source/filter/ww8/docxattributeoutput.cxx@9510", "comments": [{"message": "I would expect OString::number(rTransform.mnValue, 16);", "timestamp": "2023-06-10 16:33:38.000000000"}, {"message": "Done", "timestamp": "2023-06-18 11:32:16.000000000"}]}
{"thread_id": "2fa92f5c_d977a98a", "url": "https://gerrit.libreoffice.org/#/c/core/+/152835/1/sw/source/filter/ww8/docxattributeoutput.cxx@9512", "comments": [{"message": "And here the same OString::number(rTransform.mnValue, 16);", "timestamp": "2023-06-10 16:33:38.000000000"}, {"message": "Done", "timestamp": "2023-06-18 11:32:16.000000000"}]}
{"thread_id": "e198050c_7c3aba77", "url": "https://gerrit.libreoffice.org/#/c/core/+/153098/3/sc/source/core/tool/interpr1.cxx@2350", "comments": [{"message": "Typically we use the variable name 'eConv' to store the address convention value.  Using the same variable name would make it less confusing.", "timestamp": "2023-06-15 23:12:26.000000000"}, {"message": "Done", "timestamp": "2023-06-16 06:52:14.000000000"}]}
{"thread_id": "ddf19ea8_b0c887a9", "url": "https://gerrit.libreoffice.org/#/c/core/+/153098/3/sc/source/core/tool/interpr1.cxx@2543", "comments": [{"message": "eConven->eConv to make it less unfamiliar.", "timestamp": "2023-06-15 23:12:26.000000000"}, {"message": "Done", "timestamp": "2023-06-16 06:52:14.000000000"}]}
{"thread_id": "7befceb2_d1418057", "url": "https://gerrit.libreoffice.org/#/c/core/+/153052/3/writerfilter/source/dmapper/DomainMapper_Impl.cxx@8136", "comments": [{"message": "This cannot be correct. if m_bStartTOC is set to true, then obviously something has started the TOC, and it hasn't finished yet.  By Setting it to be false here, you will never have it be turned on again when the header/footer is finished.\n\nInstead, I think you will need to change the function IsInTOC.\n  if IsInHeaderFooter\n    return m_bStartTOCHeaderFooter\n  else\n    return m_bStartTOC\n  \nand then replace if (m_bStartTOC) with if (IsInTOC()).\n\nObviously this is a somewhat dangerous move - because you need to be sure that every use of IsInTOC works better after your change. One way to do this is to find documents that will CHANGE.\n\n  if (IsINHeaderFooter)\n  {\n  assert( m_bStartTOC == m_bStartTOCHeaderFooter) // make sw.check to find examples\n    return m_bStartTOCHeaderFooter\n  }", "timestamp": "2023-06-14 14:20:16.000000000"}, {"message": "m_bStartTOC is true if either doc content having the TOC or if header/footer having the TOC.\nm_bStartTOCHeaderFooter is true only if the header/footer having the TOC (doesn't matter if the content having the TOC or not).\n\nso the above condition effects only if(IsInHeaderFooter()) is true otherwise it should behave as before.\n  if(IsInHeaderFooter()) is true and one of them below can happen\n  1. header/footer having TOC then it will return true and earlier also it returns \n     true in this case as m_bStartTOC true for header/footer TOC also.\n  2. header/footer doesn't have TOC it will return false as \n     m_bStartTOCHeaderFooter is false. This is the effective case for this bug.\n     \n logically, this makes sense. I verifed few documents with different combinations of TOC in content and in header/footer.", "timestamp": "2023-06-15 05:35:23.000000000"}, {"message": "Done", "timestamp": "2023-06-15 05:40:22.000000000"}]}
{"thread_id": "e749e79b_95a00f3a", "url": "https://gerrit.libreoffice.org/#/c/core/+/153052/7/writerfilter/source/dmapper/DomainMapper_Impl.cxx@3011", "comments": [{"message": "this one is not safe. There is a following clause that asks if isinheaderfooter and not m_bStartTOCHeader.\n\nAt first I said it was \"not correct\". However, that is not necessarily true, because there are multiple ways to enter into the loop. So actually in fact it probably IS correct, but we don't really know that. So the SAFEST is to just leave this one alone. There is already a special clause that catches our specific situation, so there is really no concern leaving it alone.\n\nThe \"else\" clause has the same payload (more or less) - which also points to your change actually being correct. Perhaps do a follow-up commit and add it separately - that way it is easily reverted, or if it fixes anything then it is really confirmed.", "timestamp": "2023-06-15 12:28:56.000000000"}, {"message": "can we have a call to discuss this ?", "timestamp": "2023-06-15 12:49:18.000000000"}, {"message": "Done", "timestamp": "2023-06-15 16:16:43.000000000"}]}
{"thread_id": "d3b69508_b1e06372", "url": "https://gerrit.libreoffice.org/#/c/core/+/153052/7/writerfilter/source/dmapper/DomainMapper_Impl.cxx@8138", "comments": [{"message": "nitpick: There is an ongoing effort to force a \"common formatting\" style. So my practice is on any line that I have to change anyway, I attempt to format it \"properly\". Since you made a \"formatting change\" here, you might as well make it a \"proper formatting change\" instead.\n\nIn this case, you want \"if (xToInsert.is() && ...)\"\n\nLook at .git-hooks/pre-commit for Linux commands to install the auto-formatter. (This pops up automatically if you make changes to an auto-formatted file.)\n\nOn Linux, the entire file can be autoformatted with: \n/opt/lo/bin/clang-format -i writerfilter/source/dmapper/DomainMapper_Impl.cxx\n(but make sure you have all your changes committed first, because you will want to \"git stash\" the results in this particular case - we would just run it to see what the recommended formatting would be...)", "timestamp": "2023-06-15 12:28:56.000000000"}, {"message": "previous formatting was my mistake , I reverted this formatting change.", "timestamp": "2023-06-15 16:13:36.000000000"}]}
{"thread_id": "cff3d0c1_176acaed", "url": "https://gerrit.libreoffice.org/#/c/core/+/153052/7/writerfilter/source/dmapper/DomainMapper_Impl.hxx@861", "comments": [{"message": "nitpick: Personally, I would move this into the .cxx file since it has gotten more complex. The benefit of being in the CXX file is that only one file needs to be re-compiled in order for any additional/future changes to be made. In here, pretty much every file will need to be re-compiled since they all #include the hxx header.", "timestamp": "2023-06-15 12:28:56.000000000"}, {"message": "I felt same too, I moved to cxx file.", "timestamp": "2023-06-15 16:13:36.000000000"}]}
{"thread_id": "9820ab25_f4f15799", "url": "https://gerrit.libreoffice.org/#/c/core/+/153100/2/vcl/source/gdi/pdfwriter_impl.cxx@2759", "comments": [{"message": "A nitpick: this 'auto' is now suspicious (even though it is OK in the current situation, when createObject returns a sal_Int32, and -1 is an int). But I'd still think that using an explicit type here is better, now that we can't infer the correct type from the call.", "timestamp": "2023-06-15 11:34:46.000000000"}, {"message": "Makes sense, I though I replaced auto with `sal_Int32` here, but apparently I didn\u2019t.", "timestamp": "2023-06-15 11:36:45.000000000"}]}
{"thread_id": "c6dffcdf_b189997a", "url": "https://gerrit.libreoffice.org/#/c/core/+/153059/2/i18npool/source/localedata/LocaleNode.cxx@1508", "comments": [{"message": "The nice feature of C/C++ is that they allow to have trailing comma after the last array element, designed *specifically* to simplify auto-generation of code. So this change looks unnecessary. Or doesn't it work with the rtl::OUStringConstExpr ctor?", "timestamp": "2023-06-15 10:43:14.000000000"}, {"message": "https://stackoverflow.com/a/33213830/1397376", "timestamp": "2023-06-15 10:46:03.000000000"}]}
{"thread_id": "bbeec7b9_91180bea", "url": "https://gerrit.libreoffice.org/#/c/core/+/152996/1/sd/source/ui/view/ViewShellBase.cxx@1082", "comments": [{"message": "This is fine, it's new code, your only caller conforms to this contract.", "timestamp": "2023-06-14 06:43:23.000000000"}]}
{"thread_id": "29b8b3fe_610a6d78", "url": "https://gerrit.libreoffice.org/#/c/core/+/152996/1/sw/source/uibase/uiview/viewprt.cxx@313", "comments": [{"message": "Copy paste error? No dynamic_cast, wrong SAL_WARN() area, no DrawViewShell here. :-)", "timestamp": "2023-06-14 06:43:23.000000000"}, {"message": "Done", "timestamp": "2023-06-14 15:56:44.000000000"}]}
{"thread_id": "2d3f2ab1_d165ab34", "url": "https://gerrit.libreoffice.org/#/c/core/+/152968/3/sc/source/filter/oox/condformatbuffer.cxx@267", "comments": [{"message": "sizeof return num of bytes not num of elements: https://gerrit.libreoffice.org/c/core/+/153064 for that", "timestamp": "2023-06-14 14:38:56.000000000"}, {"message": "Ohhppps, Thanks", "timestamp": "2023-06-14 14:43:03.000000000"}]}
{"thread_id": "2b1f23fe_1cf17322", "url": "https://gerrit.libreoffice.org/#/c/core/+/151754/1/include/rtl/xmlencode.hxx@21", "comments": [{"message": "It might be useful to specify the initial buffer capacity - as 'len', maybe plus some space for possible entities:\n\n    OUStringBuffer buf(len + 16); // Hoping that len is not close to INT32MAX", "timestamp": "2023-05-15 06:51:27.000000000"}, {"message": "Done", "timestamp": "2023-06-14 11:27:13.000000000"}]}
{"thread_id": "f1fb8181_09cd37f4", "url": "https://gerrit.libreoffice.org/#/c/core/+/151754/1/include/rtl/xmlencode.hxx@40", "comments": [{"message": "Note that generally, there are *two* XML encoding methods: one for XNL string content (the text inside XML elements, like <t>text here</t>) - this only needs to encode &, <, and >; and encoding of attribute text - that *also* needs to encode \" *or* ' - depending on which of the characters is used to frame the attribute text. So, if your attribute is like\n\n    <t att='a text with \"quotes\"'>\n\nyou don't even need to encode \"; conversely, if you use quotes to delimit attributes, you may not escape ampersand:\n\n    <t att=\"a text with 'ampersands'\">\n\nso possibly this is something to consider for a future optimization, allowing to slightly decrease generated string length.", "timestamp": "2023-05-15 06:51:27.000000000"}, {"message": "oh sorry, I need my morning coffee, before I start to write; where I wrote \"ampersand\", I meant to write \"apostrophe\", because I obviously was talking about character '.", "timestamp": "2023-05-15 07:00:41.000000000"}, {"message": "Compare Python's 'escape' [1] and 'quoteattr' [2].\n\n[1] https://docs.python.org/3/library/xml.sax.utils.html#xml.sax.saxutils.escape\n[2] https://docs.python.org/3/library/xml.sax.utils.html#xml.sax.saxutils.quoteattr", "timestamp": "2023-05-15 07:03:18.000000000"}, {"message": "left as a todo", "timestamp": "2023-06-14 11:27:13.000000000"}]}
{"thread_id": "8177ab42_3989aec4", "url": "https://gerrit.libreoffice.org/#/c/core/+/153035/1/writerfilter/source/dmapper/DomainMapper.cxx@3467", "comments": [{"message": ":) Nice reason to pass context all the way down to the function - just for debugging purpose :)", "timestamp": "2023-06-14 08:18:17.000000000"}]}
{"thread_id": "4d9f6e76_2b309eab", "url": "https://gerrit.libreoffice.org/#/c/core/+/152781/3/docmodel/source/color/ComplexColorJSON.cxx@63", "comments": [{"message": "FWIW I think we previously found that boost::property_tree is quite slow to create JSON and that's why we have an own tools::JsonWriter instead. Using that here in the long run would be nice, instead of the boost stuff.", "timestamp": "2023-06-14 06:32:32.000000000"}]}
{"thread_id": "62581c7a_1e7d555f", "url": "https://gerrit.libreoffice.org/#/c/core/+/140089/4/vcl/source/filter/GraphicFormatDetector.cxx@959", "comments": [{"message": "Surely the APNG and PNG detection have a lot in common.", "timestamp": "2022-09-20 12:38:35.000000000"}, {"message": "Done", "timestamp": "2023-02-06 16:06:47.000000000"}]}
{"thread_id": "df05a820_fade6107", "url": "https://gerrit.libreoffice.org/#/c/core/+/140089/15/vcl/source/filter/png/PngImageReader.cxx@173", "comments": [{"message": "there is OSL_SWAPDWORD and OSL_SWAPWORD for this swapping", "timestamp": "2023-02-17 05:22:31.000000000"}, {"message": "Done", "timestamp": "2023-02-25 01:03:51.000000000"}]}
{"thread_id": "faee5f63_ddc27860", "url": "https://gerrit.libreoffice.org/#/c/core/+/140089/15/vcl/source/filter/png/PngImageReader.cxx@223", "comments": [{"message": "what's this?", "timestamp": "2023-02-17 05:22:31.000000000"}, {"message": "Done", "timestamp": "2023-02-25 01:03:51.000000000"}]}
{"thread_id": "7304f191_799bfa66", "url": "https://gerrit.libreoffice.org/#/c/core/+/140089/15/vcl/source/filter/png/PngImageReader.cxx@224", "comments": [{"message": "and this?", "timestamp": "2023-02-17 05:22:31.000000000"}, {"message": "Done", "timestamp": "2023-02-25 01:03:51.000000000"}]}
{"thread_id": "fa5b4bb5_4f86cf8a", "url": "https://gerrit.libreoffice.org/#/c/core/+/140089/15/vcl/source/filter/png/PngImageReader.cxx@267", "comments": [{"message": "you can just do std::vector<uint8_t> aData(nChunkSize + 8 + 4); - no need to resizes in a separate call", "timestamp": "2023-02-17 05:22:31.000000000"}, {"message": "Done", "timestamp": "2023-02-25 01:03:51.000000000"}]}
{"thread_id": "93f898fb_4e3eeac0", "url": "https://gerrit.libreoffice.org/#/c/core/+/140089/20/vcl/source/filter/png/PngImageReader.cxx@165", "comments": [{"message": "I wonder if this could be replaced by a struct ... maybe look into it for a follow-up patch", "timestamp": "2023-06-10 14:10:10.000000000"}, {"message": "It could if I make the fcTLChunk struct tightly packed using pragma or __attribute__((packed)) although I don't know if people would be happy with that. But if you want we can do it that way.", "timestamp": "2023-06-11 00:10:39.000000000"}, {"message": "skip it then... it's not important", "timestamp": "2023-06-11 06:22:35.000000000"}, {"message": "Done", "timestamp": "2023-06-11 21:23:16.000000000"}]}
{"thread_id": "8e0bc3c8_35f40cea", "url": "https://gerrit.libreoffice.org/#/c/core/+/152978/1/sw/source/uibase/docvw/AnnotationWin2.cxx@1275", "comments": [{"message": "Because this is a cache of the label height it might make sense to add a SwAnnotationWin::DataChanged override, or connect_style_updated to one of the labels, to clear it if some settings change happens that change what font or fontsize is used.\n\nI used \"if ((rDCEvt.GetType() == DataChangedEventType::SETTINGS) && (rDCEvt.GetFlags() & AllSettingsFlags::STYLE))\" as the trigger in VclDrawingArea for similar. Not sure I got that right of course.", "timestamp": "2023-06-13 10:02:05.000000000"}, {"message": "Thanks for the suggestion, implemeneted", "timestamp": "2023-06-13 10:50:57.000000000"}]}
{"thread_id": "3c9727a6_59991c62", "url": "https://gerrit.libreoffice.org/#/c/core/+/152838/1/emfio/qa/cppunit/emf/EmfImportTest.cxx@954", "comments": [{"message": "1. really #ifdef? Didn't you want to disable the tests?\n\n2. I am not sure about ARM anyway:\n\nrene@frodo:~/LibreOffice/git/master/solenv$ grep -r ARM *\ngbuild/platform/WNT_AARCH64_MSC.mk:gb_CPUDEFS := -D_ARM64_=1\ngbuild/platform/ANDROID_ARM_GCC.mk:gb_CPUDEFS += -DARM32\ngbuild/platform/com_MSC_class.mk:    \"$(CC)\" -nologo -EP -D_M_ARM64 $(SOLARINC) $(3) > $(subst .o,.asm,$(1)) && \\\ngbuild/platform/LINUX_ARM_GCC.mk:gb_CPUDEFS += -DARM32\ngbuild/platform/ANDROID_AARCH64_GCC.mk:gb_CPUDEFS += -DARM32\ngbuild/platform/windows.mk:\t$(if $(filter AARCH64,$(CPUNAME)),ARM64) \\\ngbuild/platform/iOS_AARCH64_GCC.mk:gb_CPUDEFS := -DARM64", "timestamp": "2023-06-10 17:12:08.000000000"}, {"message": "and note that LINUX_AARCH64_GCC (a.k.a aarch64 a.k.a arm64) is not mentioned here either anywyay, from my buildlog I see -DAARCH64 being set", "timestamp": "2023-06-10 17:13:33.000000000"}, {"message": "Done", "timestamp": "2023-06-13 10:21:56.000000000"}]}
{"thread_id": "ea21d290_52e364a7", "url": "https://gerrit.libreoffice.org/#/c/core/+/152688/1/sd/source/ui/unoidl/unomodel.cxx@2352", "comments": [{"message": "It's not clear why `IsVisible` is incorrect here, and checking if it's excluded the correct. A comment in such cases really helps future readers understand the change and avoid reverting it to fix another issue (and end up breaking this fix).", "timestamp": "2023-06-07 13:08:39.000000000"}, {"message": "Done", "timestamp": "2023-06-09 08:56:05.000000000"}]}
{"thread_id": "a7d97810_9d2d016a", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/4/basegfx/source/polygon/b2dpolygonclipper.cxx@168", "comments": [{"message": "It's B2DPolygon, not PolyPolygon. Could you rename aPolyPolygon accordingly? E.g. rB2DPolygon, rPolygon or similar.", "timestamp": "2023-03-13 22:04:47.000000000"}, {"message": "Done", "timestamp": "2023-03-14 00:55:08.000000000"}, {"message": "It's not. `rB2DPolyPolygon` is confusing since it's actually `B2DPolygon`. Could you rename it to `rB2DPolygon`?", "timestamp": "2023-03-28 18:35:18.000000000"}, {"message": "Done", "timestamp": "2023-03-28 21:13:52.000000000"}]}
{"thread_id": "89bf2dcd_4fd775a9", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/4/basegfx/source/polygon/b2dpolygonclipper.cxx@312", "comments": [{"message": "Also here.", "timestamp": "2023-03-13 22:04:47.000000000"}, {"message": "Done", "timestamp": "2023-03-14 00:55:08.000000000"}, {"message": "Done", "timestamp": "2023-03-26 10:06:02.000000000"}]}
{"thread_id": "4d3c76a9_84f1ce21", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/4/basegfx/source/polygon/b2dpolygonclipper.cxx@348", "comments": [{"message": "And here.", "timestamp": "2023-03-13 22:04:47.000000000"}, {"message": "Done", "timestamp": "2023-03-14 00:55:08.000000000"}, {"message": "Done", "timestamp": "2023-03-26 10:06:02.000000000"}]}
{"thread_id": "c7c3c71c_8cdba4ab", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/19/basegfx/source/polygon/b2dpolygonclipper.cxx@167", "comments": [{"message": "Unnecessary blank line", "timestamp": "2023-04-25 13:26:28.000000000"}, {"message": "deleted", "timestamp": "2023-05-09 20:21:08.000000000"}, {"message": "Done", "timestamp": "2023-05-10 19:22:56.000000000"}]}
{"thread_id": "1d67894a_80cb7e9c", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/1/basegfx/source/polygon/b2dpolygoncutandtouch.cxx@184", "comments": [{"message": "`!rPointVector.empty()` is more readable.", "timestamp": "2023-03-04 13:27:03.000000000"}, {"message": "corrected - done.", "timestamp": "2023-03-04 14:20:20.000000000"}, {"message": "Done", "timestamp": "2023-03-04 14:21:07.000000000"}]}
{"thread_id": "c1e924c6_3bed1479", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/2/basegfx/source/polygon/b2dpolygoncutandtouch.cxx@184", "comments": [{"message": "Missed `!`.", "timestamp": "2023-03-04 14:22:01.000000000"}, {"message": "done.", "timestamp": "2023-03-04 19:33:21.000000000"}, {"message": "Done", "timestamp": "2023-03-04 19:37:31.000000000"}]}
{"thread_id": "56d69029_ff0859b7", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/4/basegfx/source/polygon/b2dpolypolygoncutter.cxx@437", "comments": [{"message": "Please move it to next loop.", "timestamp": "2023-03-13 22:04:47.000000000"}, {"message": "Done", "timestamp": "2023-03-14 00:55:08.000000000"}, {"message": "Done", "timestamp": "2023-03-26 10:06:02.000000000"}]}
{"thread_id": "dd43d03a_51e18b10", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/4/basegfx/source/polygon/b2dpolypolygoncutter.cxx@444", "comments": [{"message": "Added one extra loop iteration but I guess that's ok.", "timestamp": "2023-03-13 22:04:47.000000000"}]}
{"thread_id": "cee85764_30bf683d", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/4/basegfx/source/polygon/b2dpolypolygoncutter.cxx@537", "comments": [{"message": "Please move it to next loop.", "timestamp": "2023-03-13 22:04:47.000000000"}, {"message": "Done", "timestamp": "2023-03-14 00:55:08.000000000"}, {"message": "Done", "timestamp": "2023-03-26 10:06:02.000000000"}]}
{"thread_id": "641d9c40_99894c94", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/4/basegfx/source/polygon/b2dpolypolygoncutter.cxx@540", "comments": [{"message": "Could be replaced with std::accumulate.", "timestamp": "2023-03-13 22:04:47.000000000"}, {"message": "Done", "timestamp": "2023-03-26 22:44:22.000000000"}]}
{"thread_id": "c2764861_7c58d0da", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/13/basegfx/source/polygon/b2dpolypolygoncutter.cxx@445", "comments": [{"message": "`amaSNV` is confusing. V in SNV stands for vector, amaSNV is actually reference to SN so it should start with `r`. Could you rename it to `rSN`?", "timestamp": "2023-03-28 18:35:18.000000000"}, {"message": "Done", "timestamp": "2023-03-28 21:21:04.000000000"}]}
{"thread_id": "c7958ae9_70ba767d", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/13/basegfx/source/polygon/b2dpolypolygoncutter.cxx@556", "comments": [{"message": "It should be `aCandidate`. Also `const sal_uInt32 nCandCount(aCandidate.count());` should be restored probably.", "timestamp": "2023-03-28 18:35:18.000000000"}, {"message": "Done", "timestamp": "2023-03-28 21:21:04.000000000"}, {"message": "Done", "timestamp": "2023-04-02 10:47:29.000000000"}]}
{"thread_id": "9adee522_7a25da83", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/14/basegfx/source/polygon/b2dpolypolygoncutter.cxx@560", "comments": [{"message": "Typo.", "timestamp": "2023-04-02 10:47:29.000000000"}, {"message": "done.", "timestamp": "2023-04-03 21:40:51.000000000"}, {"message": "Done", "timestamp": "2023-04-04 04:48:10.000000000"}]}
{"thread_id": "fccaa2b4_c4eda58e", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/4/basegfx/source/polygon/b2dsvgpolypolygon.cxx@723", "comments": [{"message": "Could be replaced with std::accumulate.", "timestamp": "2023-03-13 22:04:47.000000000"}, {"message": "Done.", "timestamp": "2023-03-16 00:25:50.000000000"}, {"message": "Done", "timestamp": "2023-03-26 10:06:02.000000000"}]}
{"thread_id": "76fd05fc_b40af232", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/4/basegfx/source/polygon/b2dsvgpolypolygon.cxx@733", "comments": [{"message": "Don't comment out code, simply remove it.", "timestamp": "2023-03-13 22:04:47.000000000"}, {"message": "Done", "timestamp": "2023-03-14 00:55:08.000000000"}, {"message": "Done", "timestamp": "2023-03-26 10:06:02.000000000"}]}
{"thread_id": "75cdcc8c_4370dd1a", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/9/basegfx/source/polygon/b2dsvgpolypolygon.cxx@724", "comments": [{"message": "Redundant initialization.", "timestamp": "2023-03-26 10:06:02.000000000"}, {"message": "Done", "timestamp": "2023-03-26 22:44:28.000000000"}]}
{"thread_id": "564af866_53220839", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/9/basegfx/source/polygon/b2dsvgpolypolygon.cxx@727", "comments": [{"message": "First argument is `sal_uInt32`. Second is const reference to avoid copy.", "timestamp": "2023-03-26 10:06:02.000000000"}, {"message": "Done", "timestamp": "2023-03-26 22:44:22.000000000"}]}
{"thread_id": "00ae4cce_513fcb50", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/17/basegfx/source/polygon/b2dsvgpolypolygon.cxx@b65", "comments": [{"message": "What are you changing here? Please revert the changes to this file, which happened in patch set 15.\nYou can keep the change to use `std::accumulate`.", "timestamp": "2023-04-22 00:17:20.000000000"}, {"message": "Done", "timestamp": "2023-05-10 19:22:56.000000000"}]}
{"thread_id": "fa789b13_e64c8583", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/13/basegfx/source/polygon/b3dpolypolygontools.cxx@390", "comments": [{"message": "Please rename it to `rB3DPolygon`.", "timestamp": "2023-03-28 18:35:18.000000000"}, {"message": "Done", "timestamp": "2023-03-28 21:13:52.000000000"}, {"message": "Done", "timestamp": "2023-04-02 10:47:29.000000000"}]}
{"thread_id": "f414d09d_67166e21", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/13/basegfx/source/polygon/b3dpolypolygontools.cxx@402", "comments": [{"message": "Please rename it to `rB3DPolygon`.", "timestamp": "2023-03-28 18:35:18.000000000"}, {"message": "Done", "timestamp": "2023-03-28 21:21:04.000000000"}, {"message": "Done", "timestamp": "2023-04-02 10:47:29.000000000"}]}
{"thread_id": "33f974cf_91ede41d", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/13/basegfx/source/polygon/b3dpolypolygontools.cxx@414", "comments": [{"message": "Please rename it to `rB3DPolygon`.", "timestamp": "2023-03-28 18:35:18.000000000"}, {"message": "Done", "timestamp": "2023-03-28 21:21:04.000000000"}, {"message": "Done", "timestamp": "2023-04-02 10:47:29.000000000"}]}
{"thread_id": "f8188c6f_9821142c", "url": "https://gerrit.libreoffice.org/#/c/core/+/148204/13/basegfx/source/polygon/b3dpolypolygontools.cxx@426", "comments": [{"message": "Please rename it to `rB3DPolygon`.", "timestamp": "2023-03-28 18:35:18.000000000"}, {"message": "Done", "timestamp": "2023-03-28 21:21:04.000000000"}, {"message": "Done", "timestamp": "2023-04-02 10:47:29.000000000"}]}
{"thread_id": "77dd1d90_d9d152cd", "url": "https://gerrit.libreoffice.org/#/c/core/+/152811/1/sw/qa/extras/uiwriter/uiwriter2.cxx@193", "comments": [{"message": "pView->GetViewFrame() gives us a pointer on this branch, let me fix.", "timestamp": "2023-06-09 13:55:19.000000000"}, {"message": "Done", "timestamp": "2023-06-09 13:57:30.000000000"}]}
{"thread_id": "887fb605_50c428b3", "url": "https://gerrit.libreoffice.org/#/c/core/+/148481/15/sw/source/uibase/app/apphdl.cxx@b973", "comments": [{"message": "It confused me first that you don't work with SwViewOption::GetCurrentViewOptions() here, but I now see that a few lines later you update all windows instead.", "timestamp": "2023-03-16 08:41:32.000000000"}]}
{"thread_id": "43dde6ff_d2dc80d5", "url": "https://gerrit.libreoffice.org/#/c/core/+/148481/16/sw/source/uibase/app/apphdl.cxx@983", "comments": [{"message": "This dereferences pSwView when it's not nullptr, *but also* when it's nullptr but the two other dynamic_casts succeed", "timestamp": "2023-05-08 15:16:43.000000000"}, {"message": "Done, https://gerrit.libreoffice.org/c/core/+/152866", "timestamp": "2023-06-11 21:54:00.000000000"}]}
{"thread_id": "aecc958f_6a5f49c2", "url": "https://gerrit.libreoffice.org/#/c/core/+/152719/3/sw/source/core/text/inftxt.cxx@702", "comments": [{"message": "Possibly the !m_bOnWin check already takes care of things like printing and PDF export, but the extra \"is recording\" check at the end can't hurt, sure.\n\nLooks reasonable to me, and thanks for fixing this, it was my fault in commit bf540873f5e258452fed5006f65a403c95e7872a (sw: add rendering for semi-transparent text, 2020-01-06).", "timestamp": "2023-06-09 09:15:28.000000000"}]}
{"thread_id": "6db00569_139c1347", "url": "https://gerrit.libreoffice.org/#/c/core/+/151651/1/sfx2/source/dialog/dinfdlg.cxx@797", "comments": [{"message": "Couldn't we use LOK_CALLBACK_DOCUMENT_PASSWORD in this case too? Do we really need a new callback event for changing the password?", "timestamp": "2023-05-16 00:04:18.000000000"}, {"message": "As it exists now, when LOK_CALLBACK_DOCUMENT_PASSWORD and LOK_CALLBACK_DOCUMENT_PASSWORD_TO_MODIFY are used, LOK expects a response (the password provided by the user) while in this use case the event is simply to inform. \nI thought it would make more sense to have different events with different behavior, but I could use LOK_CALLBACK_DOCUMENT_PASSWORD and use the payload to differentiate between the use cases if that is better.", "timestamp": "2023-05-16 10:36:15.000000000"}, {"message": "Yes, quite unfortunate design, really. (We should have passed the password to LOKit at load time, and stored it until the `LOKInteractionHandler::handlePasswordRequest` is called and simply set it right there, no need to have this callback to trigger a call into LOKit.)\n\nOk, so LOK_CALLBACK_DOCUMENT_PASSWORD and LOK_CALLBACK_DOCUMENT_PASSWORD_TO_MODIFY are actually *requests* to set the password, and we need notification that the password has changed. The new event type should be fine (given the current design), but we should support both view and modification cases. This can be done either by an argument, or by also having two event types (but we shouldn't have the ultra long LOK_CALLBACK_DOCUMENT_PASSWORD_TO_MODIFY_RESET!)", "timestamp": "2023-05-16 12:03:35.000000000"}, {"message": "Ack", "timestamp": "2023-06-09 07:50:15.000000000"}]}
{"thread_id": "36b29210_989e7aae", "url": "https://gerrit.libreoffice.org/#/c/core/+/152748/1/sw/source/core/access/accpara.cxx@1615", "comments": [{"message": "So the crash comes from here, as this \"leaks\" outside the method scope, leading to a garbage value (and likely a crash if you try and do anything with it).", "timestamp": "2023-06-08 15:58:51.000000000"}]}
{"thread_id": "23f40b16_ef502c05", "url": "https://gerrit.libreoffice.org/#/c/core/+/152692/1/sc/source/filter/oox/stylesbuffer.cxx@2141", "comments": [{"message": "if we have a cached pattern, we should not need to call Put() here", "timestamp": "2023-06-07 16:06:56.000000000"}, {"message": "We need to add reference count. If found in pool, Put() would increment the ref count and return the same pattern. https://opengrok.libreoffice.org/xref/core/svl/source/items/itempool.cxx?r=fc6aa9e4#671", "timestamp": "2023-06-07 17:20:50.000000000"}, {"message": "Given that ScAttrEntry is never calling Remove() on the SfxItemPool, I don't think that SfxPoolItem ref-counting comes into play.\n\nAs far as I can tell that ref counting stuff in SfxItemPool is mostly bogus - see the places where we call\n    ReleaseRef(*rItemPtr, rItemPtr->GetRefCount())\n!!!!\n\nBut anyhow, this still looks like a very good solution :-)", "timestamp": "2023-06-07 19:03:25.000000000"}, {"message": "Ack", "timestamp": "2023-06-08 19:58:11.000000000"}]}
{"thread_id": "3a2297b2_06cf0100", "url": "https://gerrit.libreoffice.org/#/c/core/+/152549/1/sd/inc/Annotation.hxx@138", "comments": [{"message": "`const` member.", "timestamp": "2023-06-07 13:16:33.000000000"}, {"message": "Fixed this in the next patch.", "timestamp": "2023-06-07 15:50:32.000000000"}, {"message": "Ack", "timestamp": "2023-06-08 19:53:25.000000000"}]}
{"thread_id": "17f8108b_ac626b6b", "url": "https://gerrit.libreoffice.org/#/c/core/+/152549/1/sd/source/filter/pdf/sdpdffilter.cxx@194", "comments": [{"message": "No need to check for `nullptr`?", "timestamp": "2023-06-07 13:16:33.000000000"}, {"message": "xAnnotation is created as an sd::Annoatation earlier in the same code, so it should never fail to cast.", "timestamp": "2023-06-07 15:50:32.000000000"}, {"message": "Ack", "timestamp": "2023-06-08 19:53:25.000000000"}]}
{"thread_id": "35d1df52_1c7e3c8b", "url": "https://gerrit.libreoffice.org/#/c/core/+/152549/1/sd/source/ui/annotations/annotationtag.cxx@541", "comments": [{"message": "Prefer character literals to single-character string literals.\n\n\" \" -> ' '", "timestamp": "2023-06-07 13:16:33.000000000"}, {"message": "OUString has no + char operator.", "timestamp": "2023-06-07 15:50:32.000000000"}, {"message": "Ack", "timestamp": "2023-06-08 19:53:25.000000000"}]}
{"thread_id": "8a96e928_3d5b215d", "url": "https://gerrit.libreoffice.org/#/c/core/+/152722/1/svx/source/tbxctrls/PaletteManager.cxx@431", "comments": [{"message": "Please remove this in a follow-up change.", "timestamp": "2023-06-08 09:52:28.000000000"}]}
{"thread_id": "5276d78e_93dd0783", "url": "https://gerrit.libreoffice.org/#/c/core/+/152693/1/vcl/source/filter/itiff/itiff.cxx@324", "comments": [{"message": "This is not needed now as you handle animated and non-animated case", "timestamp": "2023-06-07 06:32:56.000000000"}, {"message": "Done", "timestamp": "2023-06-07 06:59:06.000000000"}]}
{"thread_id": "40c0f712_c97e931b", "url": "https://gerrit.libreoffice.org/#/c/core/+/152136/2/sfx2/source/control/recentdocsviewitem.cxx@316", "comments": [{"message": "Should the push pin drawn in any case or just in the case the document is hovered?", "timestamp": "2023-05-22 21:00:28.000000000"}, {"message": "Done", "timestamp": "2023-06-06 05:08:16.000000000"}]}
{"thread_id": "9e195a89_a98ae879", "url": "https://gerrit.libreoffice.org/#/c/core/+/152136/2/sfx2/source/control/thumbnailviewitem.cxx@197", "comments": [{"message": "Should the icon of a pinned document shown without hovering it or should it be shown in any case? Where should it be drawn?", "timestamp": "2023-05-22 21:00:28.000000000"}, {"message": "Done", "timestamp": "2023-06-06 05:08:16.000000000"}]}
{"thread_id": "c62ee890_c2e3065b", "url": "https://gerrit.libreoffice.org/#/c/core/+/152136/2/unotools/source/config/historyoptions.cxx@383", "comments": [{"message": "Here, I am not sure what is expected. Should an item moved to the beginning of the list which does not allow to preserve the previous position of the item in the list when it was not pinned, or should the item be moved to the start of the non favourited positions?", "timestamp": "2023-05-22 21:00:28.000000000"}, {"message": "Done", "timestamp": "2023-06-06 05:08:16.000000000"}]}
{"thread_id": "461de136_8eea7084", "url": "https://gerrit.libreoffice.org/#/c/core/+/152356/2/sc/source/ui/view/tabvwsha.cxx@643", "comments": [{"message": "I'd move the new code above this line, because the string is only used when it's not a text cell.", "timestamp": "2023-06-02 08:28:33.000000000"}, {"message": "Done", "timestamp": "2023-06-02 14:13:03.000000000"}]}
{"thread_id": "f07dd454_f519ebfc", "url": "https://gerrit.libreoffice.org/#/c/core/+/143173/35/basctl/source/basicide/baside2b.cxx@814", "comments": [{"message": "I never know between changing this into \"sal_Int32\" or use a static_cast.\nIndeed, I suppose \"GetText\" some lines below takes a \"sal_uInt32\" as arg some again some other changes...", "timestamp": "2022-12-15 08:26:10.000000000"}, {"message": "Done", "timestamp": "2022-12-15 09:10:47.000000000"}]}
{"thread_id": "e06d4a0e_2ddc0e86", "url": "https://gerrit.libreoffice.org/#/c/core/+/143173/24/sfx2/source/control/thumbnailviewitem.cxx@b230", "comments": [{"message": "Please use `sal_Int32` for `nLineStart`.", "timestamp": "2022-12-10 06:46:02.000000000"}, {"message": "ok", "timestamp": "2022-12-10 06:47:34.000000000"}, {"message": "Done", "timestamp": "2022-12-10 16:50:51.000000000"}]}
{"thread_id": "4e894aeb_284be01e", "url": "https://gerrit.libreoffice.org/#/c/core/+/143173/8/sw/source/core/access/accdoc.cxx@b595", "comments": [{"message": "Can you change the return type of `GetThisLines()` to `sal_uInt32`? Also, please do the same for `GetAllLines()`. You will have to look at the usages of these two functions.", "timestamp": "2022-11-29 08:38:08.000000000"}, {"message": "Done", "timestamp": "2022-11-30 20:36:03.000000000"}]}
{"thread_id": "dd39e8ac_8054cf8f", "url": "https://gerrit.libreoffice.org/#/c/core/+/143173/17/sw/source/core/text/txtfrm.cxx@3813", "comments": [{"message": "This looks wrong. Even though a given frame is *unlikely* to contain more than 64K lines, that is not impossible (increase page size; note that our Web view uses 10 meter high pages).", "timestamp": "2022-12-09 07:19:36.000000000"}, {"message": "Done", "timestamp": "2022-12-09 15:42:14.000000000"}]}
{"thread_id": "cf52a58b_b41d142b", "url": "https://gerrit.libreoffice.org/#/c/core/+/143173/24/sw/source/core/text/widorp.cxx@b506", "comments": [{"message": "Please use `sal_Int32` for `nNeed`.", "timestamp": "2022-12-10 06:46:02.000000000"}, {"message": "ok", "timestamp": "2022-12-10 06:47:34.000000000"}, {"message": "Done", "timestamp": "2022-12-10 16:50:51.000000000"}]}
{"thread_id": "c2ea0650_3ec0f079", "url": "https://gerrit.libreoffice.org/#/c/core/+/143173/24/sw/source/core/text/widorp.cxx@b535", "comments": [{"message": "If you look closer to all the files that you have edited, there are still places that line numbers are stored in 16 bit unsigned integers of type `sal_uInt16`. Look at this example: `GetLineNr()`, which returns data of type: `sal_uInt16`.\nYou can take a look at the `core/sw/source/core/text/itrtxt.hxx` to see this function, and also `m_nRegDiff` and `m_nLineNr` member variables.\nPlease also fix these variables, functions and also the usage of the functions.", "timestamp": "2022-12-10 06:46:02.000000000"}, {"message": "ok", "timestamp": "2022-12-10 06:47:34.000000000"}, {"message": "Done", "timestamp": "2022-12-10 16:50:51.000000000"}]}
{"thread_id": "fdbe30ac_62a5bff6", "url": "https://gerrit.libreoffice.org/#/c/core/+/143173/29/sw/source/core/text/widorp.cxx@b538", "comments": [{"message": "I think you should also take a look at `nMinLines`, `GetOrphansLines()` and `GetDropLines`.\nYou can also search for `sal_uInt16` and `line` in the whole `sw` module:\n git grep sal_uInt16 sw|grep -i line\n\nAnd this if for `sal_uInt16` and `Ln`:\n git grep sal_uInt16 sw|grep Ln\n\nSome of the results might be relevant, so please take a look.", "timestamp": "2022-12-12 11:11:28.000000000"}, {"message": "I have done some of them, but I want to stop with this commit. It's a bit to much for me. I want to test until now, and someone to continue with another occurrences remaining here.", "timestamp": "2022-12-12 14:07:02.000000000"}, {"message": "Your work is good; just don't give up! I will try to help you. \ud83d\ude0a", "timestamp": "2022-12-12 22:23:30.000000000"}, {"message": "Ok, I will continue, but you have to remember that I have 1 month from my first commit in my whole life.", "timestamp": "2022-12-13 06:21:24.000000000"}]}
{"thread_id": "364422e1_a60bbd2c", "url": "https://gerrit.libreoffice.org/#/c/core/+/152586/1/sc/inc/userlist.hxx@51", "comments": [{"message": "Nice!\n\nBut to make this work well, we probably want a full suite of copy/move constructor/operator= here?\n\nOr we could drop the existing destructor and copy-constructor and let the compiler generate the whole set (the existing copy-constructor looks unnecessary to me, I don't see why the compiler-generated one would not be fine)", "timestamp": "2023-06-04 10:37:32.000000000"}, {"message": "Thanks - let me look into the copy-ctor, I didn't yet.", "timestamp": "2023-06-04 10:40:15.000000000"}, {"message": "Aha, it re-initializes the tokens. And this seems reasonable to avoid, but I hesitate it:\n\nthere is ScUserList::operator==\nwhich checks both the string, and number of substrings. And I just do not know when the strings can be same, but the sub-count differ, unless the InitTokens can produce different results at different times (maybe ScGlobal::cListDelimiter changes?)\n\nSo let me see how to keep it.", "timestamp": "2023-06-04 10:44:03.000000000"}]}
{"thread_id": "d7a0d9fe_45ebaed9", "url": "https://gerrit.libreoffice.org/#/c/core/+/152556/2/svx/source/tbxctrls/StylesPreviewWindow.cxx@468", "comments": [{"message": "Looks great; I suppose we need some way to clean the cache line as/when/if the style content itself changes ? =)", "timestamp": "2023-06-02 13:09:23.000000000"}]}
{"thread_id": "b6757338_7e6b05e2", "url": "https://gerrit.libreoffice.org/#/c/core/+/152422/3/sal/qa/rtl/textenc/rtl_textcvt.cxx@3198", "comments": [{"message": "If you change the braces here, please also change in the 'else' branch. The 'else' needs an own line, and the brace after it too, as well as the brace after 'if (bReverse)'.", "timestamp": "2023-06-01 17:38:37.000000000"}, {"message": "Ah OK, I think I've fixed those (and one in test_URIHelper.cxx)", "timestamp": "2023-06-01 21:13:53.000000000"}]}
{"thread_id": "2067215a_205b0627", "url": "https://gerrit.libreoffice.org/#/c/core/+/152422/3/sal/qa/rtl/uri/rtl_testuri.cxx@329", "comments": [{"message": "In some places you use 'auto const&' for structured binding, in other - 'auto const'. This doesn't relate to the complexity of the elements (sal/qa/rtl/textenc/rtl_textcvt.cxx line 3366 uses references for trivial integers). Is there a system in this usage?", "timestamp": "2023-06-01 17:38:37.000000000"}, {"message": "I'd looked at the struct definition and gone with a reference if it wasn't an obvious basic type (int/sal_int../char*/pointer or something I spotted was an enum) - I hadn't followed it back to the definition of rtl_TextEncoding to see it was an int.  I'll fix those up.\n\nI'll change the text encoding ones to be nEncoding I guess ?\n\nI think the only ones left are ones where I don't use structured bindings, and ones that have OUString's rather than raw char*'s", "timestamp": "2023-06-01 21:13:53.000000000"}]}
{"thread_id": "366c7f3c_3a98521d", "url": "https://gerrit.libreoffice.org/#/c/core/+/152422/4/sal/qa/rtl/uri/rtl_testuri.cxx@331", "comments": [{"message": "Why the rename?", "timestamp": "2023-06-02 06:56:10.000000000"}, {"message": "Because it had aAbs as the value returned from the test, where as with the destructure we end up with the close sAbs - it seemed too close to have aAbs and sAbs.", "timestamp": "2023-06-02 13:31:28.000000000"}]}
{"thread_id": "1efd9c69_2ca79586", "url": "https://gerrit.libreoffice.org/#/c/core/+/152422/3/sc/qa/unit/subsequent_export_test.cxx@2182", "comments": [{"message": "Why 'a' in 'aStyle'? It is an enum, so 'eStyle'", "timestamp": "2023-06-01 17:38:37.000000000"}, {"message": "Done", "timestamp": "2023-06-01 21:14:28.000000000"}]}
{"thread_id": "d0c8717e_28c3251e", "url": "https://gerrit.libreoffice.org/#/c/core/+/152422/4/svl/qa/unit/svl.cxx@282", "comments": [{"message": "These two seem odd after the structured match. Why not just name respective matches nStart and nEnd?", "timestamp": "2023-06-02 06:56:10.000000000"}, {"message": "That's what I tried at first, but it can't figure out sensible types:\n/discs/fast/core/svl/qa/unit/svl.cxx: In member function \u2018void {anonymous}::Test::testNumberFormat()\u2019:\n/discs/fast/core/workdir/UnpackedTarball/cppunit/include/cppunit/TestAssert.h:357:29: error: no matching function for call to \u2018assertEquals(const size_t&, int, CppUnit::SourceLine, std::string)\u2019\n  357 |   ( CPPUNIT_NS::assertEquals( (expected),              \\\n/discs/fast/core/svl/qa/unit/svl.cxx:281:9: note: in expansion of macro \u2018CPPUNIT_ASSERT_EQUAL_MESSAGE\u2019\n  281 |         CPPUNIT_ASSERT_EQUAL_MESSAGE(\"Unexpected number of formats for this category.\", nSize,\n      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/discs/fast/core/workdir/UnpackedTarball/cppunit/include/cppunit/TestAssert.h:161:6: note: candidate: \u2018template<class T> void CppUnit::assertEquals(const T&, const T&, SourceLine, const std::string&)\u2019\n  161 | void assertEquals( const T& expected,\n      |      ^~~~~~~~~~~~\n/discs/fast/core/workdir/UnpackedTarball/cppunit/include/cppunit/TestAssert.h:161:6: note:   template argument deduction/substitution failed:\n/discs/fast/core/workdir/UnpackedTarball/cppunit/include/cppunit/TestAssert.h:357:29: note:   deduced conflicting types for parameter \u2018const T\u2019 (\u2018long unsigned int\u2019 and \u2018int\u2019)\n  357 |   ( CPPUNIT_NS::assertEquals( (expected),              \\\n/discs/fast/core/svl/qa/unit/svl.cxx:281:9: note: in expansion of macro \u2018CPPUNIT_ASSERT_EQUAL_MESSAGE\u2019\n  281 |         CPPUNIT_ASSERT_EQUAL_MESSAGE(\"Unexpected number of formats for this category.\", nSize,\n      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~", "timestamp": "2023-06-02 13:31:28.000000000"}]}
{"thread_id": "66034b1f_071acf75", "url": "https://gerrit.libreoffice.org/#/c/core/+/152422/4/svl/qa/unit/svl.cxx@1149", "comments": [{"message": "I generally do not understand why all the pStr are renamed to sStr. The 's' prefix is rarely used in our code for strings; and IMO, it much better fits O(U)String objects than char* pointers.\n\nIf 'p' are kept everywhere, then the diff would be much neater, and the comparisons of such strings to nullptr (where exist) were more obvious.", "timestamp": "2023-06-02 06:56:10.000000000"}, {"message": "Oh OK, I hadn't realised s was rare; I'll flip all my changes back to p.", "timestamp": "2023-06-02 13:31:28.000000000"}]}
{"thread_id": "0052da2f_0dfef910", "url": "https://gerrit.libreoffice.org/#/c/core/+/152422/4/svl/qa/unit/test_URIHelper.cxx@b253", "comments": [{"message": "And in such cases, where the members weren't prefixed, I'd keep the unprefixed structured matches. Again, to minimize the diff.", "timestamp": "2023-06-02 06:56:10.000000000"}, {"message": "Ok, I've fixed some of these up - but not all; the later cases in this file tend to use the same unprefixed names within the loop for results, so we need something; which is kind of the opposite of the first comment.  It makes me wonder if it's easiest just not to destructure there.", "timestamp": "2023-06-02 13:31:28.000000000"}]}
{"thread_id": "94f967d7_250a202e", "url": "https://gerrit.libreoffice.org/#/c/core/+/152348/1/sc/source/ui/view/viewfunc.cxx@448", "comments": [{"message": "The block 411-443 will run unconditionally, and then its result will be discarded after this. IMO, the check of text should go first, and then the formula check should go when text length is greater than 1 AND not text.\n\nAdditionally, the line 434 *maybe* gets the same number format - then it could use already known format; and you can check which method of getting format is more efficient (I'm not at my computer right now).", "timestamp": "2023-05-28 08:01:51.000000000"}, {"message": "nFormat is now used to determine whether it is a text format.", "timestamp": "2023-05-28 16:52:22.000000000"}]}
{"thread_id": "b84e8926_b551c3dc", "url": "https://gerrit.libreoffice.org/#/c/core/+/152348/4/sc/source/ui/view/viewfunc.cxx@414", "comments": [{"message": "IMO, the old test, where you used rDoc.GetFormatTable() and its GetType() to compare to SvNumFormatType::TEXT, is more robust. Text format may be not only the pre-defined NF_STANDARD_FORMAT_TEXT, but also user-defined, so getting the category would be useful. And the rDoc.GetFormatTable result (assigned to a variable named pFormatter) could be also used below :)", "timestamp": "2023-05-28 18:10:43.000000000"}, {"message": "True, I've checked pFormatter->IsNumberFormat, and I don't think it can be replaced by GetType(). If I use the old one, nFormat still needs to be run.", "timestamp": "2023-05-28 18:58:34.000000000"}, {"message": "> I've checked pFormatter->IsNumberFormat, and I don't think it can be replaced by GetType().\n\nI am not sure I understand you. You now get a sal_uInt32 (using rDoc.GetAttr(GetViewData().GetCurPos(), ATTR_VALUE_FORMAT )), and pass it to the result of rDoc.GetFormatTable() (its GetType, so here is the first unclear point: there is no idea to replace GetType with anything). But note how the code below also used the same rDoc.GetFormatTable, and obtained the sal_uInt32 using rDoc.GetNumberFormat( nCol, nRow, nTab ). So the two calls - rDoc.GetAttr(GetViewData().GetCurPos(), ATTR_VALUE_FORMAT )) and rDoc.GetNumberFormat( nCol, nRow, nTab ) - are expected to return the same value. Hence, the second unclear point is - why did you reverted from a single use of rDoc.GetNumberFormat to rDoc.GetAttr+rDoc.GetNumberFormat.", "timestamp": "2023-05-29 05:36:53.000000000"}, {"message": "I get it now. Sorry that I was confused before.", "timestamp": "2023-05-29 14:14:07.000000000"}]}
{"thread_id": "5fd1cc2f_82c555bb", "url": "https://gerrit.libreoffice.org/#/c/core/+/152348/4/sc/source/ui/view/viewfunc.cxx@438", "comments": [{"message": "If you named the variable nFormat, this line would stay unchanged.", "timestamp": "2023-05-28 18:10:43.000000000"}, {"message": "Ah - I see, that nFormat would conflict with a different variable below. Please ignore this bit.", "timestamp": "2023-05-28 18:12:12.000000000"}, {"message": "Done", "timestamp": "2023-05-29 15:03:44.000000000"}]}
{"thread_id": "bc493e70_b8df162e", "url": "https://gerrit.libreoffice.org/#/c/core/+/152488/4/sfx2/source/view/viewsh.cxx@366", "comments": [{"message": "Noel: this is a workaround to please an loplugin warning. If I use aPayload.c_str() directly as a parameter, then a loplugin will want me to drop the c_str(), but that won't build. Do you see this on your end?\n\nIt may be useful to fix the loplugin for this, a number of \"pPayload = ...c_str()\" lines in this change could be simplified if the workaround is not needed. Thanks!", "timestamp": "2023-06-02 06:38:01.000000000"}, {"message": "sure! fix is here: https://gerrit.libreoffice.org/c/core/+/152526", "timestamp": "2023-06-02 06:57:48.000000000"}]}
{"thread_id": "d62051e4_7c133279", "url": "https://gerrit.libreoffice.org/#/c/core/+/150675/6/sw/source/core/layout/sectfrm.cxx@525", "comments": [{"message": "got a hit from crashtesting on this with \n\n./instdir/program/soffice --headless --convert-to pdf ~/novell688091-3.html\n\nbut I don't think that bugtracker is publically available anymore so I've emailed that to you FWIW", "timestamp": "2023-04-25 08:51:13.000000000"}, {"message": "while the above issue is fixed, unfortunately I have bisected another relatively recent crash to this commit too. To reproduce:\n\nwget https://bugs.launchpad.net/ubuntu/+source/openoffice.org/+bug/302046/+attachment/421179/+files/mails%20contacto.odt -O ~/lp302046-1.odt\n\n./instdir/program/soffice --headless --convert-to pdf ~/lp302046-1.odt", "timestamp": "2023-05-31 11:00:20.000000000"}, {"message": "Filed tdf#155611; have a fix. Thank you!", "timestamp": "2023-05-31 14:34:12.000000000"}]}
{"thread_id": "2db41c9c_6ad25eb5", "url": "https://gerrit.libreoffice.org/#/c/core/+/151857/2/vcl/source/window/window.cxx@569", "comments": [{"message": "This very likely should get the same treatment then..", "timestamp": "2023-05-30 10:42:53.000000000"}, {"message": "Indeed, https://gerrit.libreoffice.org/c/core/+/152429 is meant to fix this, thanks.", "timestamp": "2023-05-31 13:28:44.000000000"}]}
{"thread_id": "9172ac31_8625ac51", "url": "https://gerrit.libreoffice.org/#/c/core/+/152395/1/xmloff/source/style/GradientStyle.cxx@226", "comments": [{"message": "I think, has to be &&.", "timestamp": "2023-05-30 22:14:14.000000000"}, {"message": "Correct, changed. Thanks!", "timestamp": "2023-05-31 07:58:14.000000000"}, {"message": "Done", "timestamp": "2023-05-31 09:03:30.000000000"}]}
{"thread_id": "c813d93f_22c35dd0", "url": "https://gerrit.libreoffice.org/#/c/core/+/152395/1/xmloff/source/style/GradientStyle.cxx@232", "comments": [{"message": "'ColorStops' or in normal language 'gradient stops'", "timestamp": "2023-05-30 22:14:14.000000000"}, {"message": "Okay, changed.", "timestamp": "2023-05-31 07:58:14.000000000"}, {"message": "Done", "timestamp": "2023-05-31 09:03:30.000000000"}]}
{"thread_id": "88655ebf_2ff258b1", "url": "https://gerrit.libreoffice.org/#/c/core/+/151914/1/vcl/source/window/window.cxx@569", "comments": [{"message": "This very likely should get the same treatment then..", "timestamp": "2023-05-30 10:42:34.000000000"}]}
{"thread_id": "fd93e36a_b141907a", "url": "https://gerrit.libreoffice.org/#/c/core/+/152363/1/desktop/source/lib/init.cxx@b6990", "comments": [{"message": "is that intended?", "timestamp": "2023-05-30 07:59:34.000000000"}, {"message": "yep, SetLastExceptionMsg is already invoked in getDocumentType(pThis)", "timestamp": "2023-05-30 08:26:55.000000000"}]}
{"thread_id": "962e60c4_8d2136bd", "url": "https://gerrit.libreoffice.org/#/c/core/+/152251/2/sw/source/ui/dbui/mmaddressblockpage.cxx@498", "comments": [{"message": "Also possible to use std::transform with back_inserter. But easily readable either way, so this is also fine.", "timestamp": "2023-05-26 15:08:49.000000000"}, {"message": "Thanks, I think I prefer to keep this one (if transform would take a range without having to do the .begin/.end it might work out nicer)", "timestamp": "2023-05-26 17:18:45.000000000"}]}
{"thread_id": "33cb8580_73935f6c", "url": "https://gerrit.libreoffice.org/#/c/core/+/152251/2/sw/source/uibase/dbui/mmconfigitem.cxx@215", "comments": [{"message": "In this case, using structured binding could improve it further.", "timestamp": "2023-05-26 15:08:49.000000000"}, {"message": "Oh OK, fixed in the version just pushed.", "timestamp": "2023-05-26 17:18:45.000000000"}]}
{"thread_id": "85a10ef5_586b5b31", "url": "https://gerrit.libreoffice.org/#/c/core/+/152251/2/sw/source/uibase/sidebar/PageFormatPanel.cxx@65", "comments": [{"message": "Structured binding?", "timestamp": "2023-05-26 15:08:49.000000000"}, {"message": "Done", "timestamp": "2023-05-26 17:18:45.000000000"}]}
{"thread_id": "7c627af0_8fd56a1b", "url": "https://gerrit.libreoffice.org/#/c/core/+/152251/2/sw/source/uibase/sidebar/PageFormatPanel.cxx@74", "comments": [{"message": "And here", "timestamp": "2023-05-26 15:08:49.000000000"}, {"message": "Done", "timestamp": "2023-05-26 17:18:45.000000000"}]}
{"thread_id": "1786970a_5fde12a4", "url": "https://gerrit.libreoffice.org/#/c/core/+/152000/1/sc/source/core/data/dociter.cxx@1042", "comments": [{"message": "Rather use\n\n    const ScTable* pTab = rDoc.FetchTable(mnTab);\n    if (!pTab)\n        return;", "timestamp": "2023-05-26 22:14:30.000000000"}, {"message": "Done", "timestamp": "2023-05-29 08:44:00.000000000"}]}
{"thread_id": "93291b0f_eea79c45", "url": "https://gerrit.libreoffice.org/#/c/core/+/152000/1/sc/source/core/data/dociter.cxx@1044", "comments": [{"message": "... and here\n\n    nEndCol = pTab->ClampToAllocatedColumns(nEndCol);", "timestamp": "2023-05-26 22:14:30.000000000"}, {"message": "Done", "timestamp": "2023-05-29 08:44:00.000000000"}]}
{"thread_id": "963edca9_146d651e", "url": "https://gerrit.libreoffice.org/#/c/core/+/151913/2/vcl/source/window/window.cxx@569", "comments": [{"message": "This very likely should get the same treatment then..", "timestamp": "2023-05-30 10:42:45.000000000"}]}
{"thread_id": "e843f035_505569ce", "url": "https://gerrit.libreoffice.org/#/c/core/+/152201/1/svx/source/dialog/langbox.cxx@187", "comments": [{"message": "Is `=` capture necessary? It looks like `&aNewEntry` is enough here.", "timestamp": "2023-05-24 19:59:04.000000000"}, {"message": "I think you're right; changed.\n(Although IMHO that's a separate type of change from this patch)", "timestamp": "2023-05-25 01:53:03.000000000"}]}
{"thread_id": "220f7467_6ddc6941", "url": "https://gerrit.libreoffice.org/#/c/core/+/151455/3/cui/source/options/optsave.cxx@452", "comments": [{"message": "IMO, all this mapping looks wrong.\nWe have org.openoffice.Office.UI/FilterClassification/GlobalFilters/Classes, which has a display name for each category (indexed exactly using the document service string like \"com.sun.star.text.GlobalDocument\").", "timestamp": "2023-05-08 05:53:34.000000000"}, {"message": "Would you mind pointing it out to me? I can find them in officecfg/registry/data/org/openoffice/Office/UI.xcu. However, its index is not the same as here. There, the order is TextDocument, SpreadsheetDocument, ..., WebDocument, GlobalDocument, ...\nShould I just use this mapping?", "timestamp": "2023-05-08 13:52:36.000000000"}, {"message": "I am sorry that I posted it in a wrong place. Please see my next message, in cui/uiconfig/ui/optsavepage.ui, where I explained that my comment related to those strings.", "timestamp": "2023-05-08 14:25:03.000000000"}, {"message": "Done", "timestamp": "2023-05-26 07:38:35.000000000"}]}
{"thread_id": "0661012d_a3ca76e8", "url": "https://gerrit.libreoffice.org/#/c/core/+/151455/4/cui/source/options/optsave.cxx@b109", "comments": [{"message": "This block should be merged with the newly inserted list population block; and the loop of the new block looks over-engineered. Here we have a simple sequence of calls; the change should simply replace the set_id calls with 'append' calls, adding both ids and text in one call. No loops; no error control. The display names could be obtained using\n\n  aFilterClassesNode.openNode(\"com.sun.star.text.TextDocument\").getNodeValue(\"DisplayName\").get<OUString>()\n\nThis would also drop hardcoding the *positions* of the items, which would naturally establish themselves from the 'append' sequence; and would also allow (if needed) to make *some* appends conditional.", "timestamp": "2023-05-26 07:38:35.000000000"}, {"message": "> The display names could be obtained using\n> \n>   aFilterClassesNode.openNode(\"com.sun.star.text.TextDocument\").getNodeValue(\"DisplayName\").get<OUString>()\n\nOr even easier, without an intermediate openNode:\n\naFilterClassesNode.getNodeValue(\"com.sun.star.text.TextDocument/DisplayName\").get<OUString>();", "timestamp": "2023-05-26 07:51:47.000000000"}, {"message": "> would also allow (if needed) to make *some* appends conditional\n\n... and looking at the code below, it is indeed needed: it all is about *removal* of not installed modules from the list; so the natural next step would be to make *addition* of the items conditional (including the m_xSaveAsLB), instead of the conditional removal.", "timestamp": "2023-05-26 08:01:34.000000000"}, {"message": "The loop is removed, but I will keep all set_id as it is because the string ID is used later. Also, I won't change conditional removal into conditional append in this patch because it isn't closely related to the original ticket.", "timestamp": "2023-05-26 17:04:06.000000000"}, {"message": "> The loop is removed, but I will keep all set_id as it is because the string ID is used later.\n\nI don't quite understand it.\n\n> Also, I won't change conditional removal into conditional append in this patch because it isn't closely related to the original ticket.\n\nThis is reasonable, sure.", "timestamp": "2023-05-26 17:13:43.000000000"}, {"message": "Done", "timestamp": "2023-05-27 00:43:28.000000000"}]}
{"thread_id": "6cd52bd1_f7e6db7f", "url": "https://gerrit.libreoffice.org/#/c/core/+/151455/4/cui/source/options/optsave.cxx@110", "comments": [{"message": "'auto' is a good candidate for such cases, where the call on the right hand makes it clear what the type of the left side is, and it makes the line simpler and easier to read.", "timestamp": "2023-05-26 07:38:35.000000000"}, {"message": "Done", "timestamp": "2023-05-26 16:54:53.000000000"}]}
{"thread_id": "c5f4d140_740919e0", "url": "https://gerrit.libreoffice.org/#/c/core/+/151455/4/cui/source/options/optsave.cxx@111", "comments": [{"message": "Please do not use leading global namespace syntax, unless really required to disambiguate. They are usually just a syntactic noise.", "timestamp": "2023-05-26 07:38:35.000000000"}, {"message": "Done", "timestamp": "2023-05-26 16:57:52.000000000"}]}
{"thread_id": "2a384292_63df994b", "url": "https://gerrit.libreoffice.org/#/c/core/+/151455/4/cui/source/options/optsave.cxx@112", "comments": [{"message": "Here you can provide the whole path to \"org.openoffice.Office.UI/FilterClassification/GlobalFilters/Classes\", and avoid the additional call to \"aFilterClassification.openNode\".", "timestamp": "2023-05-26 07:38:35.000000000"}, {"message": "Done", "timestamp": "2023-05-26 16:57:52.000000000"}]}
{"thread_id": "36c94b4d_6b216ec9", "url": "https://gerrit.libreoffice.org/#/c/core/+/151455/4/cui/source/options/optsave.cxx@118", "comments": [{"message": "Here I'd simply assert that it's empty.", "timestamp": "2023-05-26 07:38:35.000000000"}, {"message": "This is needed because it will load what is originally in cui/uiconfig/ui/optsavepage.ui. One option is to delete every item in doctype.", "timestamp": "2023-05-26 16:54:19.000000000"}, {"message": "No, if some items are in cui/uiconfig/ui/optsavepage.ui, then they must be removed - this is what you change here.", "timestamp": "2023-05-26 17:13:43.000000000"}, {"message": "Done", "timestamp": "2023-05-27 00:43:28.000000000"}]}
{"thread_id": "83fc3708_550574ce", "url": "https://gerrit.libreoffice.org/#/c/core/+/151455/4/cui/source/options/optsave.cxx@131", "comments": [{"message": "OSL_FAIL is an obsolete macro, that should not appear in new code: see tdf#43157.", "timestamp": "2023-05-26 07:38:35.000000000"}, {"message": "Done", "timestamp": "2023-05-26 16:57:52.000000000"}]}
{"thread_id": "6ede5bda_7c0f9b2e", "url": "https://gerrit.libreoffice.org/#/c/core/+/151455/4/cui/source/options/optsave.cxx@119", "comments": [{"message": "Have you considered extracting the display name from the sequence of globalfilters classes? Hints to do this can be found in static void lcl_ReadGlobalFilters.", "timestamp": "2023-05-23 22:56:57.000000000"}, {"message": "I think I have extracted display name from GlobalFilters/Classes on line 133.", "timestamp": "2023-05-24 00:48:51.000000000"}, {"message": "Plus, the reason why I write the for loop instead of using GlobalFilters/Order is that the oringal order of the dialog is not the same as what it is in UI.xcs.", "timestamp": "2023-05-24 00:54:55.000000000"}, {"message": "Yes, the display name is extracted from the GlobalFilters/Class like you say. \n\nUse of the for loop instead of the GlobalFilters/Order is what I was getting at. Point taken about the original dialog order not being the same as the order in UI.xcs", "timestamp": "2023-05-24 01:58:55.000000000"}, {"message": "Done", "timestamp": "2023-05-25 15:28:01.000000000"}]}
{"thread_id": "c2a931e3_e58182f2", "url": "https://gerrit.libreoffice.org/#/c/core/+/151455/5/cui/source/options/optsave.cxx@111", "comments": [{"message": "But why did you remove the 'comphelper'? I only mentioned the *global namespace*, explicitly. It had to become\n\n    comphelper::getProcessComponentContext(),", "timestamp": "2023-05-26 17:17:32.000000000"}, {"message": "In line 55, it is already using namespace comphelper, so I directly remove it. I can add it if it is more clear.", "timestamp": "2023-05-27 00:43:28.000000000"}]}
{"thread_id": "3da41b03_72fe32f7", "url": "https://gerrit.libreoffice.org/#/c/core/+/151455/5/cui/source/options/optsave.cxx@124", "comments": [{"message": "Possibly you didn't notice, that I mentioned 'append', not 'append_text' - that was important, because 'append' allowed you to set *both* id and text in one call. Possibly this is why you didn't see how to *merge* the two blocks into one, and claimed you needed the set_id calls for the later use.", "timestamp": "2023-05-26 17:17:32.000000000"}, {"message": "Done", "timestamp": "2023-05-27 00:43:28.000000000"}]}
{"thread_id": "6a3c6ae1_c73dcfca", "url": "https://gerrit.libreoffice.org/#/c/core/+/152224/1/dbaccess/source/ui/dlg/directsql.cxx@328", "comments": [{"message": "looks like these getBytes() return a Sequence<sal_Int8> - signed integers - so \"<= 1\" detects not only 0 and 1 but half the value range, and it needs a 2nd check?", "timestamp": "2023-05-26 11:45:01.000000000"}, {"message": "Indeed, I hadn't noticed the \"signed integers\", so you think it should rather be:\nif ((seq.getLength() == 1) && (seq[0] >= 0) && (seq[0] <= 1)) ?", "timestamp": "2023-05-26 11:47:54.000000000"}, {"message": "i guess so, at least for this \"Bit\" type - of course i dont know what other things might need special handling here", "timestamp": "2023-05-26 11:51:48.000000000"}, {"message": "As you may have seen, I've submitted this https://gerrit.libreoffice.org/c/core/+/152305\nNow I don't know how to merge 2 commits and reading a bit about this doesn't make the things clearer for me eg: I don't know if the extra commit in master must first pushed or not, then how to merge just this extra commit in my 7.5 patch (and not retrieve all the commits of master of course).\nIn brief, would you be ok to push this one and when the other will be pushed on master, I'll do the cherry-pick?", "timestamp": "2023-05-26 12:05:15.000000000"}]}
{"thread_id": "a55ec842_83d82068", "url": "https://gerrit.libreoffice.org/#/c/core/+/152194/1/basegfx/source/tools/bgradient.cxx@761", "comments": [{"message": "ColorStops", "timestamp": "2023-05-24 16:59:34.000000000"}, {"message": "changed", "timestamp": "2023-05-25 09:55:56.000000000"}]}
{"thread_id": "906d990c_cd44b52c", "url": "https://gerrit.libreoffice.org/#/c/core/+/152194/1/basegfx/source/tools/bgradient.cxx@773", "comments": [{"message": "ColorStops", "timestamp": "2023-05-24 16:59:34.000000000"}, {"message": "changed", "timestamp": "2023-05-25 09:55:56.000000000"}]}
{"thread_id": "70916db4_75f9100e", "url": "https://gerrit.libreoffice.org/#/c/core/+/152194/1/basegfx/source/tools/bgradient.cxx@819", "comments": [{"message": "You move a iterator pair from begin() to end(). They move synchron. We have at least two colors, therefore it would be sufficient to only test for same colors. If you want to test for end() in addition, I think testing ColorR is sufficient.", "timestamp": "2023-05-24 16:59:34.000000000"}, {"message": "adapted to own tooling, see there", "timestamp": "2023-05-25 09:55:56.000000000"}]}
{"thread_id": "01580d7c_f10b4331", "url": "https://gerrit.libreoffice.org/#/c/core/+/152194/1/basegfx/source/tools/bgradient.cxx@831", "comments": [{"message": "Take this situation: index0: offset 0 red, index1: offset 0.4 red, index2:offset 1 yellow. The while loop stops with aColorR == end() and aColorL.getStopColor() != aColorR.getStopColor(). The border is in this case from offset 0 to offset 0.4, but would not be detected, because aColorR == end().", "timestamp": "2023-05-24 16:59:34.000000000"}, {"message": "adapted to own tooling, see there", "timestamp": "2023-05-25 09:55:56.000000000"}]}
{"thread_id": "22a3ecf3_79a40e23", "url": "https://gerrit.libreoffice.org/#/c/core/+/152194/1/basegfx/source/tools/bgradient.cxx@831", "comments": [{"message": "cannot happen.", "timestamp": "2023-05-24 16:59:34.000000000"}, {"message": "True, adapted. Commented on new version - some more cannot happen, but just keep for safety", "timestamp": "2023-05-25 09:55:56.000000000"}]}
{"thread_id": "33bc937e_ce857f40", "url": "https://gerrit.libreoffice.org/#/c/core/+/152271/1/cui/source/options/optjava.cxx@963", "comments": [{"message": "Occurrences of \"${\" can appear nested within other \"${...}\" variable references.  I was pretty sure that we would have some documentation of the bootstrap variable reference syntax, but can't find anything right now.  What comes closest is the code of expandMacros in sal/rtl/bootstrap.cxx: ${...:...:...} can contain up to three \":\"-separated segments, and each segment is macro-expanded recursively (so can itself contain \"${...}\" references).", "timestamp": "2023-05-25 13:09:34.000000000"}, {"message": "Hm ok, I guess for now I will mention (in the release notes) that no nesting is supported here - that should be enough for the current use case, and anything else can be improved when there is a necessity.", "timestamp": "2023-05-25 13:50:17.000000000"}]}
{"thread_id": "0af96e31_3b2ebd82", "url": "https://gerrit.libreoffice.org/#/c/core/+/117246/2/sw/qa/extras/htmlexport/htmlexport.cxx@1928", "comments": [{"message": "Was intended:\n\n    CPPUNIT_ASSERT(pXmlDoc);\n\nI will fix this.", "timestamp": "2023-05-25 13:38:38.000000000"}, {"message": "Indeed. Thanks!", "timestamp": "2023-05-25 13:45:08.000000000"}]}
{"thread_id": "2606e60c_83d6a68b", "url": "https://gerrit.libreoffice.org/#/c/core/+/149576/9/filter/source/xmlfilteradaptor/XmlFilterAdaptor.cxx@104", "comments": [{"message": "Can you explain why is this needed? We already default to false internally. Or is this a leftover?", "timestamp": "2023-03-31 06:19:31.000000000"}, {"message": "You're right, I believe it should be possible to remove this.", "timestamp": "2023-03-31 06:27:57.000000000"}, {"message": "Actually, when I tried removing it didn't work properly anymore (it enabled the flag for legacy documents), so I guess it really is necessary for some reason.", "timestamp": "2023-03-31 09:00:18.000000000"}, {"message": "> Actually, when I tried removing it didn't work properly anymore\n\nWhich locale do you use in your setup? I'd assume that it's the code in unotools/source/config/compatibility.cxx; and this code looks questionable to me: why the locale-specific behavior is needed here? The option is there. Why not just keep it uniform?", "timestamp": "2023-03-31 09:22:23.000000000"}, {"message": "Yeah, I wanted to leave that up for debate. It would have been neat for it to work like that out of the box, because then I believe there wouldn't be any reason not to add autocorrect rules to resolve 46770, however having it uniform is also neat in a different way.\n\n\n> Which locale do you use in your setup?\nI tried with \"cs\" and \"en\", and while it works correctly for \"en\", it doesn't for \"cs\" (as described).\n\nAfter removing the locale specific code in question from compatibility.cxx, it stopped working for \"en\" too, shoving the flag absolutely everywhere. I feel like that's not the expected behaviour, but not sure what I'm missing.", "timestamp": "2023-03-31 09:46:42.000000000"}, {"message": "I figured it out, I mismatched array of strings to an enum.", "timestamp": "2023-03-31 18:45:34.000000000"}, {"message": "Done", "timestamp": "2023-04-03 06:24:01.000000000"}]}
{"thread_id": "7a5d55fb_df9dffd5", "url": "https://gerrit.libreoffice.org/#/c/core/+/149576/12/sw/qa/core/text/text.cxx@1228", "comments": [{"message": "This keeps failing, but I'm not completely sure why. Is it possible that getXPath(..., ..., \"width\") just gets the unjustified width?", "timestamp": "2023-04-01 09:35:45.000000000"}, {"message": "Please simplify this, i.e.: remove all the arrays, and just repeat the test code three times. It would make it simpler to understand the logic.", "timestamp": "2023-04-01 09:39:07.000000000"}, {"message": "I think I should to check if the justified space in the document with option disabled is smaller than the one in the document with the option enabled, and since the document loading seems to be static, I can't do it without saving the values somewhere else.\n\nI could definitely get rid of the arrays and use 6/9 properly named variables, though.", "timestamp": "2023-04-01 09:43:59.000000000"}, {"message": "I am likely confused in my previous comment.\nBut please follow my first one. A code like\n\n    sal_Int32 nNSBPWidth_p1_Legacy;\n    sal_Int32 nNSBPWidth_p2_Legacy;\n    {\n        createSwDoc(\"tdf41652_legacy.fodt\");\n        xmlDocUniquePtr pXmlDoc = parseLayoutDump();\n\n        nNSBPWidth_p1_Legacy\n            = getXPath(pXmlDoc, \"//body/txt[1]/SwParaPortion/SwLineLayout[2]/SwBlankPortion\",\n                       \"width\")\n                  .toInt32();\n        nNSBPWidth_p2_Legacy\n            = getXPath(pXmlDoc, \"//body/txt[2]/SwParaPortion/SwLineLayout[2]/SwBlankPortion\",\n                       \"width\")\n                  .toInt32();\n    }\n    \n    sal_Int32 nNSBPWidth_p1_VariableDisabled;\n    sal_Int32 nNSBPWidth_p2_VariableDisabled;\n    ...\n\nwould be easier to parse.", "timestamp": "2023-04-01 09:46:19.000000000"}, {"message": "> would be easier to parse.\n\nAgreed, I will change that, no problem.", "timestamp": "2023-04-01 09:47:29.000000000"}, {"message": "Done", "timestamp": "2023-04-01 10:20:52.000000000"}]}
{"thread_id": "f92120a5_6fa5d22f", "url": "https://gerrit.libreoffice.org/#/c/core/+/149576/13/sw/qa/core/text/text.cxx@1255", "comments": [{"message": "Unfortunately that doesn't change the core of the issue, it seems either \"width\" shouldn't measure the width when justified, or it should, and I forgot to implement something somewhere \ud83e\udd14", "timestamp": "2023-04-01 10:20:52.000000000"}, {"message": "Done", "timestamp": "2023-04-03 07:25:33.000000000"}]}
{"thread_id": "bbc45042_f3633bf6", "url": "https://gerrit.libreoffice.org/#/c/core/+/149576/16/sw/qa/core/text/text.cxx@1242", "comments": [{"message": "Nit: you could use CPPUNIT_ASSERT_LESS and CPPUNIT_ASSERT_GREATER here, in a follow-up patch.", "timestamp": "2023-04-04 06:23:09.000000000"}, {"message": "That's the funny thing, I used those in earlier patchsets, but that was spitting out errors in completely unrelated tests \ud83d\ude02", "timestamp": "2023-04-04 06:40:46.000000000"}, {"message": "OK, if you tried it but it's not as easy as it sounds, that's fine. Thanks for trying.", "timestamp": "2023-04-04 14:49:41.000000000"}, {"message": "Huh, I think I just realized what the issue might have been \ud83d\ude05 I will try to do it later, if I remember.", "timestamp": "2023-04-04 14:59:34.000000000"}, {"message": "Done", "timestamp": "2023-04-04 15:17:31.000000000"}]}
{"thread_id": "d39ea43e_0df8897a", "url": "https://gerrit.libreoffice.org/#/c/core/+/152126/2/vcl/source/control/PriorityMergedHBox.cxx@b153", "comments": [{"message": "This was being overridden below by \"200\". So it was pointless to compute it.", "timestamp": "2023-05-24 17:50:30.000000000"}]}
{"thread_id": "cbce625b_a0d88fe1", "url": "https://gerrit.libreoffice.org/#/c/core/+/152126/2/vcl/source/control/PriorityMergedHBox.cxx@b163", "comments": [{"message": "This was even worse. It was doubling the width for every child. Of course, since it was all overridden by \"200\" it didn't matter anyway.", "timestamp": "2023-05-24 17:50:30.000000000"}]}
{"thread_id": "3a1d6c2f_10b964e8", "url": "https://gerrit.libreoffice.org/#/c/core/+/151673/2/configmgr/qa/unit/test.cxx@206", "comments": [{"message": "Test name: (anonymous namespace)::Test::testKeyFetch\nAn uncaught exception of type com.sun.star.container.NoSuchElementException\n- MimeTypeClassIDRelations/['application/vnd.sun.xml.report.chart'] at /persistent/git/libreoffice/configmgr/source/access.cxx:439\n\nI'm getting a failure running  make CppunitTest_configmgr_unit after this patch.", "timestamp": "2023-05-23 23:30:46.000000000"}, {"message": "<https://gerrit.libreoffice.org/c/core/+/152184> \"Fix CppunitTest_configmgr_unit for --disable-report-builder\" should fix that", "timestamp": "2023-05-24 08:08:13.000000000"}]}
{"thread_id": "bd937adc_f3e201f2", "url": "https://gerrit.libreoffice.org/#/c/core/+/151303/3/comphelper/source/misc/accessibletexthelper.cxx@303", "comments": [{"message": "you can use rtl::isSurrogate() to make it easier to read.\n\nusually one would use rtl::OUString::iterateCodePoints() but it only works when iterating from the start of the string and here the caller passes in an index so i don't think it's applicable.", "timestamp": "2023-05-04 08:26:25.000000000"}, {"message": "> you can use rtl::isSurrogate() to make it easier to read.\n\nActually I'd need `rtl::isHighSurrogate()` and `rtl::isLowSurrogate()`, but thanks, that would be a neat improvement!\n\n> usually one would use rtl::OUString::iterateCodePoints() but it only works when iterating from the start of the string and here the caller passes in an index so i don't think it's applicable.\n\nHum no actually it takes an index that it updates (for iterating I guess), and that makes it very usable, yay!  There are 2 concerns though:\n\n* AccessibleCsvControl uses a `OUStringBuffer`, not a `OUString`, so I don't have access to that API.  I could either do it manually there, or convert to OUString temporarily -- but that might be a tad costly for this?\n* it returns unpaired surrogates when called in the middle of a pair (e.g. if called at the index of the low surrogate, it will not \"backtrack\" to the high surrogate before).  So either we have the API return unpaired surrogates in this case (which is not necessarily the end of the world, see below), or the code would have to backtrack manually, making use of that API a lot less useful.\n\nI don't have a strong opinion on either points, and would love any input here.\n\nConcerning whether returning unpaired surrogates is OK or not, I think it actually doesn't really matter that much, because if the caller iterates manually adding 1 to the offset each time (or requesting a random offset), we currently only have a few options:\n\n* return the same code point and offsets for both the high and low surrogates (what I currently do).  This leads to the caller seeing the same code point twice\n* return the whole code point when called at the start (high surrogate), and an unpaired surrogate when called in the middle (in line with `rtl::OUString::iterateCodePoints()`).  This leads the caller to see first the correct code point, and then garbage.\n* return the whole code point when called at the start (high surrogate), and nothing when called in the middle.\n* actually fix the whole a11y text API (at least for GTK, not sure what others expect here) to return offset and lengths in code points rather than UTF-16 code units, but that's rather costly both in terms of effort and complexity (and computational complexity, although there are tricks for that latest one).\n\nIn any case, the caller should probably not *usually* end up requesting a random offset, but would usually rather get the current caret offset or other value we returned in a previous call, so it probably also doesn't matter so much.\n\nOpinions?", "timestamp": "2023-05-04 09:20:23.000000000"}, {"message": "PS: using `rtl::OUString::iterateCodePoints()`, the code could look as simple as this:\n\n auto nIndexEnd = nIndex;\n sText.iterateCodePoints(&nIndexEnd);\n aResult.SegmentText = sText.copy( nIndex, nIndexEnd - nIndex );\n aResult.SegmentStart = nIndex;\n aResult.SegmentEnd = nIndexEnd;", "timestamp": "2023-05-04 09:28:15.000000000"}, {"message": "Michael (Weghorn, there's many Michaels here!), do you have an opinion on the behavior regarding indices pointing to a low surrogate?", "timestamp": "2023-05-04 16:26:41.000000000"}, {"message": "> Concerning whether returning unpaired surrogates is OK or not, I think it actually doesn't really matter that much, because if the caller iterates manually adding 1 to the offset each time (or requesting a random offset), we currently only have a few options:\n[...]\n\n> Michael (Weghorn, there's many Michaels here!), do you have an opinion on the behavior regarding indices pointing to a low surrogate?\n\n@Colomban, do you yourself have a preference/suggestion on what way to go?\n\n\nIn general, I'd say we should conform to what each platform API spec says/requests, (but can't yet say for sure what that means in practice for each platform).\n\nFor AT-SPI on Linux: Would that be this one of your mentioned options/alternatives?\n\n> * actually fix the whole a11y text API (at least for GTK, not sure what others expect here) to return offset and lengths in code points rather than UTF-16 code units, but that's rather costly both in terms of effort and complexity (and computational complexity, although there are tricks for that latest one).\n\nI haven't seen an explicit mention of what a \"character\" refers to when it comes to offsets in the AT-SPI text interface, but it seems reasonable to me to assume that this refers to code points rather than code units or anything else that depends on the internally used encoding. At least the `get_text` doc ( https://lazka.github.io/pgi-docs/Atspi-2.0/classes/Text.html#Atspi.Text.get_text ) mentions:\n\n> The number of bytes in the returned string may exceed either end_offset or start_offset, since UTF-8 is a variable-width encoding.\n\nThe Iaccessible2 spec for IAccessibleText::nCharacters ( https://accessibility.linuxfoundation.org/a11yspecs/ia2/docs/html/interface_i_accessible_text.html#aed43718add41e541ab3c30c9e4ad36be ) also mentions:\n\n> Note that this may be different than the total number of bytes required to store the text, if the text contains multi-byte characters. \n\n\nIn a quick test with Gedit and a text document that has just the text \"abc\ud801\udc37d\", a character count of 5 is reported, sample query in Accerciser:\n\n    In [4]: text = acc.queryText()\n    In [5]: text\n    Out[5]: <pyatspi.text.Text at 0x7f66d7e66c10>\n    In [7]: text.getText(0, -1)\n    Out[7]: 'abc\ud801\udc37d'\n    [...]\n    In [9]: text.get_characterCount()\n    Out[9]: 5\n    In [10]: text.getCharacterAtOffset(0)\n    Out[10]: 97\n    In [11]: text.getCharacterAtOffset(1)\n    Out[11]: 98\n    In [12]: text.getCharacterAtOffset(2)\n    Out[12]: 99\n    In [13]: text.getCharacterAtOffset(3)\n    Out[13]: 66615\n    In [14]: text.getCharacterAtOffset(4)\n    Out[14]: 100\n\nwhile the LO case with gtk3 would currently still report 6 characters (as your commit msg mentions).\n\nKate/Qt currently reports the amount of internally used QChars/code units rather than code points:\n\n    In [29]: text = acc.queryText()\n    In [30]: text.getText(0, -1)\n    Out[30]: 'abc\ud801\udc37d'\n    In [31]: text.get_characterCount()\n    Out[31]: 6\n    \nAs you write, adapting all of the XAccessible{,Editable}Text method implementations and/or platform integrations to use code point sounds like it would be more expensive, since it may require iterating over the whole string to determine the actual count/position of actual characters instead of being able to rely on indices/code units.\n\nFrom what I can see so far, gtk seems to do something like this (iterating over whole string), e.g. here:\nhttps://gitlab.gnome.org/GNOME/gtk/-/blob/0e488b3dfe9340d43d6c802c52019794a878de60/gtk/a11y/gtkatspitext.c#L1035\n(`g_utf8_strlen` implementation at https://gitlab.gnome.org/GNOME/glib/-/blob/de2ff264540b892a7eac26805010cf27fbb28a39/glib/gutf8.c#L234 )\n\n\nIf we decide to go the way of adapting all of the methods to use code points as indices/offsets, I don't have a strong opinion which way to go in the meantime, should the decision be to go with this fix (with whatever is easiest for now for the low surrogate handling?) and leave the larger changes for later.", "timestamp": "2023-05-06 19:03:38.000000000"}, {"message": "> @Colomban, do you yourself have a preference/suggestion on what way to go?\n\nI don't really have any, although see below for details on that.\n\nIdeally as you say it'd conform to the platform's expectations. Although it's not entirely clear, I believe this would mean UCS-4 code points when it comes to offsets, lengths and individual characters, and UTF-8 when transferring strings.  And that's what GTK does, which basically makes it the de-facto expectation, as most AT-SPI2 producers and consumers rely on it ATM.\n\nHowever, it seems costly and not *that* critical as I don't know of reports about it. This said, grepping Orca's source suggests it does use `GetCharacterCount()` in a way expecting to land on a character boundary (`SetCaretOffset(GetCharacterCount())`), and even being able to adjust the value (`if (GetCharacterCount()) { return GetCharacterCount() - 1; }`), so that would possibly cause issues (although it also depends on how e.g. `SetCaretOffset()` behaves with random-ish offsets).\nMore research is needed, but it might become more and more relevant with emojis spreading fast -- and being in the supplementary planes.\n\n> If we decide to go the way of adapting all of the methods to use code points as indices/offsets, I don't have a strong opinion which way to go in the meantime, should the decision be to go with this fix (with whatever is easiest for now for the low surrogate handling?) and leave the larger changes for later.\n\nWell, for one thing, I unfortunately won't have the time myself to work on adapting all the text APIs just now.  If somebody else does, that would be wonderful, but again it's probably not trivial -- at least not to do it properly.\n\nFWIW, I also participated in the implementation in Scintilla (https://scintilla.org/) and ended up with an line-based offset cache to speed up some requests because it could become a real bottleneck for large files.  This cache evolved in being used more throughout the component so it stopped being an a11y overhead, but that was not trivial even for a component \"as simple\" as that.  This is not necessarily entirely relevant for LO as most content is broken up into smaller elements (paragraphs and so), yet it might or might not be needed still.\n\nAnyway, what is simplest in the meantime is probably returning unpaired low surrogates.  But looking at https://docs.gtk.org/atspi2/method.Text.get_character_at_offset.html it says:\n\n> A `guint` representing the UCS-4 unicode code point of the given character, or 0xFFFFFFFF if the character in question cannot be represented in the UCS-4 encoding.\n\nSo maybe we could be more compliant by returning `0xFFFFFFFF` when it's a low surrogate (which is fairly easy).  I'll submit an updated patch doing so, which I now believe is probably the best compromise for now.", "timestamp": "2023-05-09 09:04:15.000000000"}, {"message": "> So maybe we could be more compliant by returning `0xFFFFFFFF` when it's a low surrogate (which is fairly easy).\n\nThis is done now, with the addition of the companion patch https://gerrit.libreoffice.org/c/core/+/151591 for actually returning 0xFFFFFFFF instead of 63 (code point for `?` as replaced by the `OUStringToOString()` call).", "timestamp": "2023-05-09 16:49:55.000000000"}, {"message": "Thanks for the detailed explanation, and your comment on the Qt change as well.\nHandling it that way for now sounds reasonable to me (and leave any larger rework for when there's a practical need or time left otherwise...).", "timestamp": "2023-05-09 19:15:26.000000000"}]}
{"thread_id": "cd896583_45d01787", "url": "https://gerrit.libreoffice.org/#/c/core/+/151303/3/sc/source/ui/Accessibility/AccessibleCsvControl.cxx@469", "comments": [{"message": "There's a bug here where `aResultText.SegmentStart` is not updated to reflect it's at `nIndex - 1`", "timestamp": "2023-05-04 16:37:05.000000000"}, {"message": "Fixed", "timestamp": "2023-05-09 16:49:55.000000000"}]}
{"thread_id": "67679c0b_e5682198", "url": "https://gerrit.libreoffice.org/#/c/core/+/119478/3/sc/source/core/data/markdata.cxx@658", "comments": [{"message": "Why do you use int for index, and do a static_cast, when you know that the container you are working with uses another type for its indexes (size_t)?", "timestamp": "2021-08-02 07:43:16.000000000"}, {"message": "I thought of that too. My fault. I will fix it.", "timestamp": "2021-08-02 11:42:05.000000000"}]}
{"thread_id": "ee044d0d_72170eb5", "url": "https://gerrit.libreoffice.org/#/c/core/+/119478/3/sc/source/core/data/markdata.cxx@661", "comments": [{"message": "Why use at() here, instead of normal operator[]?", "timestamp": "2021-08-02 07:43:16.000000000"}, {"message": "I also used the [] operator. I read an article on the internet that the error might be caused by the [] operator, so I thought it would be better to use .at().", "timestamp": "2021-08-02 11:42:05.000000000"}]}
{"thread_id": "ffb9f7ef_1eacafbb", "url": "https://gerrit.libreoffice.org/#/c/core/+/119478/3/sc/source/core/data/markdata.cxx@666", "comments": [{"message": "When you use emplace_back, it takes exactly the same arguments as the element type's constructors (in this case, std::pair's). The very idea behind emplace_back is to create elements in-place, and *avoid* construction of the element outside of the container and them copy it, which helps efficiency. Here you explicitly create the pair outside of the container, and pass it (already constructed) to emplace_back, which would succeed (calling a copy ctor), but completely misses the point.\n\nUse emplace_back(i, ScRange(0,0,0)) instead.", "timestamp": "2021-08-02 07:43:16.000000000"}, {"message": "I understand. I will fix it.", "timestamp": "2021-08-02 11:42:05.000000000"}]}
{"thread_id": "569526c8_f998613d", "url": "https://gerrit.libreoffice.org/#/c/core/+/119478/3/sc/source/core/data/markdata.cxx@694", "comments": [{"message": "Maybe I'm wrong, but it looks dangerous: is there a guarantee that nTab is not greater than vMark.size(), which then would satisfy the strange \"!=\" condition (usual is to check that index is \"<\" than size)?", "timestamp": "2021-08-02 07:43:16.000000000"}, {"message": "Yes, this can be a bit of a problem. I will fix it.", "timestamp": "2021-08-02 11:42:05.000000000"}]}
{"thread_id": "40154095_81e07745", "url": "https://gerrit.libreoffice.org/#/c/core/+/119478/3/sc/source/core/data/markdata.cxx@703", "comments": [{"message": "So if vMark.size() == 0, this would try to access non-existing element 0?", "timestamp": "2021-08-02 07:43:16.000000000"}, {"message": "Yes it tried. I will fix it.", "timestamp": "2021-08-02 11:42:05.000000000"}]}
{"thread_id": "ac7d2456_3027767c", "url": "https://gerrit.libreoffice.org/#/c/core/+/119478/4/sc/source/core/data/markdata.cxx@183", "comments": [{"message": "So here you check that vMark.size()>1, and then try to access vMark[nTab]. Is nTab guaranteed to be 0 or 1 here?", "timestamp": "2021-08-02 11:47:12.000000000"}, {"message": "I thought wrong :) fixed it.", "timestamp": "2021-08-03 18:36:59.000000000"}]}
{"thread_id": "ead7d5bd_858690ca", "url": "https://gerrit.libreoffice.org/#/c/core/+/119478/5/sc/source/core/data/markdata.cxx@188", "comments": [{"message": "After running the DeleteTab function, I am getting this error here.\n\nIn function:\n    std::__debug::vector<_Tp, _Allocator>::const_reference \n    std::__debug::vector<_Tp, \n    _Allocator>::operator[](std::__debug::vector<_Tp, \n    _Allocator>::size_type) const [with _Tp = std::unique_ptr<ScTable, \n    o3tl::default_delete<ScTable> >; _Allocator = \n    std::allocator<std::unique_ptr<ScTable, o3tl::default_delete<ScTable> > \n    >; std::__debug::vector<_Tp, _Allocator>::const_reference = const \n    std::unique_ptr<ScTable, o3tl::default_delete<ScTable> >&; \n    std::__debug::vector<_Tp, _Allocator>::size_type = long unsigned int]\n\nError: attempt to subscript container with out-of-bounds index 5, but \ncontainer only holds 5 elements.\n\nObjects involved in the operation:\n    sequence \"this\" @ 0x0x55b4a8e81248 {\n      type = std::__debug::vector<std::unique_ptr<ScTable, o3tl::default_delete<ScTable> >, std::allocator<std::unique_ptr<ScTable, o3tl::default_delete<ScTable> > > >;\n    }", "timestamp": "2021-08-05 10:40:00.000000000"}]}
{"thread_id": "4e76b39f_f07629a5", "url": "https://gerrit.libreoffice.org/#/c/core/+/119478/3/sc/source/ui/view/tabview2.cxx@605", "comments": [{"message": "You are manipulating vMark (using erase and emplace), which invalidates iterators in and after the place. Range-based for must not be used in that case.", "timestamp": "2021-08-02 07:43:16.000000000"}]}
{"thread_id": "d2e41b45_e41ced06", "url": "https://gerrit.libreoffice.org/#/c/core/+/119478/4/sc/source/ui/view/tabview2.cxx@470", "comments": [{"message": "Please do not introduce objects before they are used. This is not C; the scope of any name should be minimal. The two objects are only needed at line 604 - so just declare them at line 603. (This also applies to other places as well, of course - but here it's most visible.)", "timestamp": "2021-08-02 11:47:12.000000000"}, {"message": "You're right. I fixed it.", "timestamp": "2021-08-03 18:36:59.000000000"}]}
{"thread_id": "acde0f68_e8fc86ab", "url": "https://gerrit.libreoffice.org/#/c/core/+/152073/2/svx/source/svdraw/clonelist.cxx@86", "comments": [{"message": "Can get this from pOriginalEdge, i.e.\n`pOriginalNode = pOriginalEdge->GetConnectedNode(bTail1);`", "timestamp": "2023-05-22 21:12:48.000000000"}, {"message": "OK, done (and the others below it) - I was taking it carefully because I wasn't sure if there were any side effects from the ConnectToNode.", "timestamp": "2023-05-22 22:38:31.000000000"}]}
{"thread_id": "71a09f6a_326bca17", "url": "https://gerrit.libreoffice.org/#/c/core/+/152073/2/svx/source/svdraw/clonelist.cxx@93", "comments": [{"message": "This is unused if `it == maOriginalList.end()`. Could you move it to `if`?", "timestamp": "2023-05-22 21:12:48.000000000"}, {"message": "Done", "timestamp": "2023-05-22 22:38:31.000000000"}]}
{"thread_id": "581a6d70_a23a48c8", "url": "https://gerrit.libreoffice.org/#/c/core/+/152073/2/svx/source/svdraw/clonelist.cxx@102", "comments": [{"message": "It's equal to `pOriginalNode`. Could you replace it to avoid second call?", "timestamp": "2023-05-22 21:12:48.000000000"}, {"message": "Done", "timestamp": "2023-05-22 22:38:31.000000000"}]}
{"thread_id": "79c8d59c_03826c90", "url": "https://gerrit.libreoffice.org/#/c/core/+/152162/1/sw/inc/viewsh.hxx@202", "comments": [{"message": "std::set feels more suitable here?", "timestamp": "2023-05-23 13:19:19.000000000"}, {"message": "noel would probably suggest o3tl::sorted_vector, but the same point which I take, but I'm also interested in seeing in the log how many of each type might appear in a given Unlock", "timestamp": "2023-05-23 13:21:17.000000000"}]}
{"thread_id": "15514cfc_65f6d451", "url": "https://gerrit.libreoffice.org/#/c/core/+/152070/1/svx/source/svdraw/svdpage.cxx@173", "comments": [{"message": "this should now be \n    if (nCloneErrCnt != 0)\nand the entire if statement should probably be inside the \n    #ifdef DBG_UTIL", "timestamp": "2023-05-21 13:39:14.000000000"}, {"message": "Oops yes! Fixed.", "timestamp": "2023-05-21 13:58:38.000000000"}, {"message": "Done", "timestamp": "2023-05-21 16:55:11.000000000"}]}
{"thread_id": "ddc2e590_287fefcb", "url": "https://gerrit.libreoffice.org/#/c/core/+/95900/2/sfx2/source/notebookbar/PriorityMergedHBox.cxx@82", "comments": [{"message": "This is problematic because it often returns zero, even if getLayoutRequisition can come up with useful numbers. (Interestingly, in the next loop you do use getLayoutRequisition instead of getOutputWidthPixel - I assume getOutputWidthPixel always returns zero when hidden.)\n\nTypically, DUMMY_WIDTH isn't big enough , so we hide more than we need to, and can't show them again because our size guess didn't free up enough space.\n\nSuggested fix at https://gerrit.libreoffice.org/c/core/+/152125", "timestamp": "2023-05-23 01:17:19.000000000"}]}
{"thread_id": "20656e91_cab1b755", "url": "https://gerrit.libreoffice.org/#/c/core/+/95900/2/sfx2/source/notebookbar/PriorityMergedHBox.cxx@168", "comments": [{"message": "I don't understand this at all. The whole purpose of the for loop above was to accumulate the width. (A later fix accumulates the height.) Now it is just thrown away with a hard-coded 200. So what did the for loop accomplish?\n\nPerhaps https://gerrit.libreoffice.org/c/core/+/152126?", "timestamp": "2023-05-23 01:17:19.000000000"}]}
{"thread_id": "5bc999d7_b3dea92d", "url": "https://gerrit.libreoffice.org/#/c/core/+/151860/4/sc/source/core/data/colorscale.cxx@798", "comments": [{"message": "Is there a reason to compare mpUpperLimit instead of mpUpperLimit->GetType(), like in the case of mpLowerLimit?", "timestamp": "2023-05-19 11:29:14.000000000"}, {"message": "I accidentally omitted the GetType() function.", "timestamp": "2023-05-22 06:58:51.000000000"}, {"message": "Done", "timestamp": "2023-05-22 11:33:05.000000000"}]}
{"thread_id": "4c90fecf_4e39a520", "url": "https://gerrit.libreoffice.org/#/c/core/+/149058/2/sw/source/core/text/frmpaint.cxx@800", "comments": [{"message": "a few remaining still, to reproduce one:\n\nwget https://bz.apache.org/ooo/attachment.cgi?id=81925 -O ~/ooo34309-3.odt\n./instdir/program/soffice --headless --convert-to pdf ~/ooo34309-3.odt", "timestamp": "2023-05-14 13:48:30.000000000"}, {"message": "SwTextFrame::PaintSwFrame no longer appears in crashtesting", "timestamp": "2023-05-20 18:34:34.000000000"}]}
{"thread_id": "a6fe4b24_189ea716", "url": "https://gerrit.libreoffice.org/#/c/core/+/149058/2/sw/source/core/text/frmpaint.cxx@801", "comments": [{"message": "A few hits on this, one example is\n\nwget https://bz.apache.org/ooo/attachment.cgi?id=29950 -O ~/ooo55147-1.odt\n./instdir/program/soffice --headless --convert-to pdf ~/ooo55147-1.odt", "timestamp": "2023-03-23 08:56:34.000000000"}, {"message": "Done", "timestamp": "2023-04-05 08:29:39.000000000"}]}
{"thread_id": "169bbbc3_8d4f7ed5", "url": "https://gerrit.libreoffice.org/#/c/core/+/149058/2/sw/source/core/text/frmpaint.cxx@801", "comments": [{"message": "Still got some remaining. To reproduce the next on the list:\n\nwget https://bugs.documentfoundation.org/attachment.cgi?id=47882 -O ~/fdo38226-1.odt\n./instdir/program/soffice --headless --convert-to pdf ~/fdo38226-1.odt", "timestamp": "2023-05-10 07:58:13.000000000"}, {"message": "Done", "timestamp": "2023-05-14 13:45:32.000000000"}]}
{"thread_id": "265a7559_606a4f85", "url": "https://gerrit.libreoffice.org/#/c/core/+/149058/2/sw/source/core/text/frmpaint.cxx@801", "comments": [{"message": "got a new hit with latest crashtesting, to reproduce:\n\nwget https://bugs.documentfoundation.org/attachment.cgi?id=114549 -O ~/tdf90408-1.doc\n./instdir/program/soffice --headless --convert-to odt ~/tdf90408-1.doc", "timestamp": "2023-04-05 08:29:39.000000000"}, {"message": "Done", "timestamp": "2023-05-10 07:58:13.000000000"}]}
{"thread_id": "5118495d_7e268675", "url": "https://gerrit.libreoffice.org/#/c/core/+/151983/3/forms/source/xforms/binding.cxx@471", "comments": [{"message": "are you sure about this? \nBased on the coding pattern above, I assume the bug is that this call should have used false for the second parameter.", "timestamp": "2023-05-19 10:32:08.000000000"}, {"message": "Indeed my first thought was to replace this line by:\n\n    xTarget->addEventListener( \"xforms-generic\",\n                               xListener, false );\n\nbut this would be a functional change and don't know what would be the impact.\nI must recognize, I don't know to what correspond the \"capture\" thing.\nSo just removing the duplicate is safer for the moment.", "timestamp": "2023-05-19 11:40:38.000000000"}]}
{"thread_id": "7ae0cf40_51188813", "url": "https://gerrit.libreoffice.org/#/c/core/+/151320/6/sd/qa/unit/tiledrendering/tiledrendering.cxx@2551", "comments": [{"message": "Getting compiler errors in gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1):\n    unused variable \u2018nSecondViewId\u2019 [-Werror=unused-variable]\n\nand ViewCallback aView2 is also unused.\n\nhttps://gerrit.libreoffice.org/c/core/+/151966", "timestamp": "2023-05-18 14:09:03.000000000"}]}
{"thread_id": "789f31b0_bfebefba", "url": "https://gerrit.libreoffice.org/#/c/core/+/151830/3/basegfx/source/matrix/b2dhommatrix.cxx@b88", "comments": [{"message": "That function can then go, in hommatrixtemplate.hxx", "timestamp": "2023-05-16 17:13:38.000000000"}, {"message": "Will do. \nThorsten, do you agree with Bartosz that we only need the top 2 rows of the matrix ?(it seems to be the case, I checked by adding some asserts, but the test coverage is not 100%)", "timestamp": "2023-05-17 06:15:05.000000000"}, {"message": "The last row of transformation matrix have values: [0 0 1]:\nPlease take a look at (you could change values there and see what is changed):\nhttps://ncase.me/matrix/\n\nTo do this properly, we need to check where this values are used (in current implementation) and replace it with constants. \n\nCould you please check if there is any performance improvement with that change (replacing last row values with [0 0 1]?", "timestamp": "2023-05-17 06:50:13.000000000"}, {"message": "Noting that I could not remove that function because it is used by the 3D version basegfx", "timestamp": "2023-05-17 13:27:22.000000000"}]}
{"thread_id": "b5deea3c_ab8d4eeb", "url": "https://gerrit.libreoffice.org/#/c/core/+/151830/5/basegfx/source/matrix/b2dhommatrix.cxx@124", "comments": [{"message": "We could check if last row is set, at the method beginning:\n\n  (fTools::equalZero(get(2, 0))) && (fTools::equalZero(get(2, 1))) && (fTools::equal(1.0, get(2, 2)))\n\nand skip calculation of the last row if it is empty.", "timestamp": "2023-05-17 09:33:55.000000000"}]}
{"thread_id": "66a79bd0_027f0cf4", "url": "https://gerrit.libreoffice.org/#/c/core/+/151751/2/sw/source/uibase/shells/textsh1.cxx@b1685", "comments": [{"message": "This was used before 09755649009fe221599af6a435b7e6022a890907, I'm not sure if the correct fix is to just delete this.", "timestamp": "2023-05-16 06:37:42.000000000"}, {"message": "And what exactly is this code supposed to do other than create Color instances (i.e. basically a sal_uInt32) and then never using them. Xcode 14.x correctly flags aSet as an unused variable and I am surprised this code didn't fail in any of the Jenkins builds.", "timestamp": "2023-05-16 12:01:24.000000000"}, {"message": "Well the code is different in master and co-23.05 ... it probably didn't pass Jenkins builds but I pushed directly to co-23.05, because I had 22 commits to push in 2 days and Jenkins wasn't passing anyway. The build passed locally for me, but I remembered now that I have -werror set to off. Sorry about that.", "timestamp": "2023-05-16 12:27:44.000000000"}, {"message": "> Well the code is different in master and co-23.05 ... it probably didn't pass Jenkins builds but I pushed directly to co-23.05, because I had 22 commits to push in 2 days and Jenkins wasn't passing anyway. The build passed locally for me, but I remembered now that I have -werror set to off. Sorry about that.\n\nIIRC, the reason cases like these never show up as failures in Jenkins is that Jenkins builds macOS and iOS with Xcode 13.x which is obsolete. Apple now requires all iOS builds to be built with Xcode 14.1 or higher before you can submit it to the App Store and Xcode 14.x is a lot stricter than Xcode 13.x. For example, sprintf is now deprecated in Xcode 14.x but not in Xcode 13.x.\n\nSo, until Collabora's and TDF's build servers are using Xcode 14 (which requires macOS Monterey or higher), we will likely keep seeing these issues.", "timestamp": "2023-05-16 13:12:49.000000000"}]}
{"thread_id": "3db7bb09_b8e44374", "url": "https://gerrit.libreoffice.org/#/c/core/+/138503/2/sw/source/core/inc/viewimp.hxx@155", "comments": [{"message": "https://stackoverflow.com/questions/51805059/why-does-moving-stdoptional-not-reset-state\n\nm_oPaintRegion is not left behind as a default-ctored std::optional apparently, but is left unchanged by this and isn't reset to some empty state", "timestamp": "2023-05-15 20:00:12.000000000"}]}
{"thread_id": "3109b1ce_e8401aaa", "url": "https://gerrit.libreoffice.org/#/c/core/+/137838/1/sc/source/filter/excel/xiescher.cxx@4111", "comments": [{"message": "Oops: this is what was finding existing unit tests. Hit a legacy control that is not a radio button - and poof.\n\nNo unit tests matched being radio buttons inside of a group box.", "timestamp": "2023-05-15 17:44:40.000000000"}]}
{"thread_id": "8b44be97_39314609", "url": "https://gerrit.libreoffice.org/#/c/core/+/151795/1/sw/qa/core/frmedt/frmedt.cxx@152", "comments": [{"message": "Yes, that looks good, thanks. The two types we have here is \"draw\" and \"fly\" and the next line already asserts that this is \"fly\", so the \"draw\" here was a mistake in the first place, it just worked by accident.", "timestamp": "2023-05-15 14:53:27.000000000"}]}
{"thread_id": "88aac34a_1f378493", "url": "https://gerrit.libreoffice.org/#/c/core/+/151660/1/cui/source/options/optaboutconfig.cxx@343", "comments": [{"message": "There are two properties where this hits:\n\n/org.openoffice.Office.Embedding/MimeTypeClassIDRelations/application/vnd.sun.xml.report\n/org.openoffice.Office.Embedding/MimeTypeClassIDRelations/application/vnd.sun.xml.report.chart\n\nI think this is because the property contains a slash: \"application/vnd.sun.xml.report\".\nIs there any way to escape such a slash in the getPropertyByHierarchicalName method?", "timestamp": "2023-05-11 08:22:05.000000000"}, {"message": "Ouch, properties with `/` in their names have never been considered, it appears.  There is some `['...']` quoting mechanism for set elements (which can have arbitrary names), but not for property names.  Let me think about that offline (and keep the `catch` block for now, I'll eventually come back to this with something).", "timestamp": "2023-05-11 08:43:10.000000000"}, {"message": "see <https://gerrit.libreoffice.org/c/core/+/151673> \"Allow all hierarchical path segments to be ['...'] quoted\"", "timestamp": "2023-05-11 13:01:22.000000000"}, {"message": "> see <https://gerrit.libreoffice.org/c/core/+/151673> \"Allow all hierarchical path segments to be ['...'] quoted\"\n\n...which is merged now, so you should be able to replace\n\n  sPath + \"/\" + sPropertyName\n\nwith\n\n  sPath + \"/['\" + sPropertyName + \"']\"\n\n(which should work at least for the given case where `sPropertyName` doesn't contain any other problematic characters beyond `/`)", "timestamp": "2023-05-11 14:51:27.000000000"}, {"message": "With this change, every property hits the UnknownPropertyException.", "timestamp": "2023-05-15 07:31:06.000000000"}, {"message": "> With this change, every property hits the UnknownPropertyException.\n\nI cannot reproduce that.  With this change cherry-picked on current master and\n\n  diff --git a/cui/source/options/optaboutconfig.cxx b/cui/source/options/optaboutconfig.cxx\n  index 4578bc027581..7fd4fe5afceb 100644\n  --- a/cui/source/options/optaboutconfig.cxx\n  +++ b/cui/source/options/optaboutconfig.cxx\n  @@ -348,8 +348,9 @@ void CuiAboutConfigTabPage::FillItems(const Reference< XNameAccess >& xNameAcces\n               bool bReadOnly = false;\n               try\n               {\n  -                aProperty = m_xReadWriteAccess->getPropertyByHierarchicalName(sPath + \"/\"\n  -                                                                              + sPropertyName);\n  +                aProperty = m_xReadWriteAccess->getPropertyByHierarchicalName(sPath + \"/['\"\n  +                                                                              + sPropertyName\n  +                                                                              + \"']\");\n                   bReadOnly = (aProperty.Attributes & beans::PropertyAttribute::READONLY) != 0;\n               }\n               catch (css::beans::UnknownPropertyException)\n\napplied, opening the Expert Configuration dialog stopped triggering that `SAL_WARN` \"unknown property\" for me.", "timestamp": "2023-05-15 10:32:03.000000000"}, {"message": "Will look into this in a follow up patch, not sure why it didn't work for me.", "timestamp": "2023-05-15 11:32:35.000000000"}]}
{"thread_id": "fb3ab6ba_62b50784", "url": "https://gerrit.libreoffice.org/#/c/core/+/151660/1/cui/source/options/optaboutconfig.cxx@614", "comments": [{"message": "(What some other `cui` code does when confronted with finalized (i.e., read-only) configuration data is to disable the corresponding UI controls that would allow to modify that data.  No idea whether that would be applicable here too, rather than showing this message box.)", "timestamp": "2023-05-11 08:48:20.000000000"}, {"message": "@Caolan: Any idea if individual entries in a listbox can be disabled?\nAlso a tooltip would need to be added to explain why it's disabled.", "timestamp": "2023-05-11 08:55:36.000000000"}, {"message": "I presume we're talking about m_xPrefBox, which is a weld::TreeView, then IIRC a row can be disabled with TreeView::set_sensitive(row, false), *but* the TreeStore and TreeView in the .ui has to be adjusted to get this to work properly.\n\nSee cui/uiconfig/ui/optpathspage.ui for an example. There are 4 text columns in cui/uiconfig/ui/aboutconfigdialog.ui so you need 4 dummy weight entries, and then 4 \"sensitive\" entries (similar to cui/uiconfig/ui/optpathspage.ui which has 3 of these) and then 4 <attribute name=\"sensitive\">... references in the TreeView, one for each GtkCellRendererText, to link those together.\n\nFor tooltips you can use TreeView::connect_query_tooltip and that will callback with a weld::TreeIter pointing to the row the tooltip should be returned for", "timestamp": "2023-05-11 09:17:11.000000000"}, {"message": "Thanks, I tried that - see latest patch set.\nNot much success sadly - neither the tooltip, nor the disabling seems to work.\nAnything obviously wrong?", "timestamp": "2023-05-11 12:08:34.000000000"}, {"message": "ah yes, I forget that has-tooltip needs to be set on the GtkTreeView for gtk to use query-tooltip. Maybe that is the problem, I'll upload with the extra bit. Seems to work for me in gtk/gen unless I miss something?", "timestamp": "2023-05-11 18:45:53.000000000"}, {"message": "Ok works now, many thanks!", "timestamp": "2023-05-15 07:25:41.000000000"}]}
{"thread_id": "50aee549_ee64f6b5", "url": "https://gerrit.libreoffice.org/#/c/core/+/150450/10/sw/qa/uibase/shells/shells.cxx@1071", "comments": [{"message": "A possible improvement would be to test some other field type (e.g. number of all pages, or something that doesn't depend on timing) in the future, so you can eliminate this ugly sleep.", "timestamp": "2023-05-15 06:56:42.000000000"}]}
{"thread_id": "f43169a6_4b122e57", "url": "https://gerrit.libreoffice.org/#/c/core/+/150450/3/sw/source/uibase/shells/textfld.cxx@161", "comments": [{"message": "Why is this line necessary? It might be correct, I just don't understand.", "timestamp": "2023-04-26 07:38:51.000000000"}, {"message": "I believe you are correct and it is not necessary. I was following a similar implementation and misunderstood its function, fixed in the latest patch set.", "timestamp": "2023-04-26 22:29:23.000000000"}]}
{"thread_id": "74d9820f_b6f33bd4", "url": "https://gerrit.libreoffice.org/#/c/core/+/150450/6/sw/source/uibase/shells/textfld.cxx@159", "comments": [{"message": "Consider SwEditShell::UpdateOneField", "timestamp": "2023-04-29 20:58:57.000000000"}, {"message": "Ack", "timestamp": "2023-04-29 21:31:09.000000000"}]}
{"thread_id": "a519beab_e26cfa09", "url": "https://gerrit.libreoffice.org/#/c/core/+/150450/6/sw/source/uibase/shells/textfld.cxx@160", "comments": [{"message": "I don't see the need for this.", "timestamp": "2023-04-29 20:58:57.000000000"}, {"message": "True, I was initially trying to imitate .uno:UpdateFields but now it won't be of any use. Fixed in the last patchset.", "timestamp": "2023-04-29 21:31:09.000000000"}]}
{"thread_id": "b0c4d315_43dcf4d5", "url": "https://gerrit.libreoffice.org/#/c/core/+/133936/2/sw/source/core/txtnode/ndtxt.cxx@721", "comments": [{"message": "This should be HasItem. It ALWAYS can GetItem.\nBut this is rather hacky, because if the text was bold, or in color, or had a larger font, the superscript would not be removed from the new paragraph.", "timestamp": "2023-05-05 17:49:30.000000000"}, {"message": "> But this is rather hacky\n\nSee the commit message, I agree that it would be better to go via SwDoc::ResetAttrs(), but when I tried that, some test pointed out I break redlining and/or undo, so I just noted that as a future improvement.\n\nIf you can figure out how to use ResetAttrs() here without the unwanted side-effects, that would be great. Thanks. :-)", "timestamp": "2023-05-15 06:19:24.000000000"}]}
{"thread_id": "a465d06c_49f68458", "url": "https://gerrit.libreoffice.org/#/c/core/+/148556/5/sw/source/core/text/itrpaint.cxx@397", "comments": [{"message": "dfdf4526.odt  attachment 169540 from https://bugs.documentfoundation.org/show_bug.cgi?id=140219 hits this assert.", "timestamp": "2023-03-17 00:14:56.000000000"}, {"message": "Done", "timestamp": "2023-04-10 10:37:06.000000000"}]}
{"thread_id": "4e4b5069_609d11bb", "url": "https://gerrit.libreoffice.org/#/c/core/+/148556/5/sw/source/core/text/itrpaint.cxx@418", "comments": [{"message": "got a hit on this assert now in latest crashtesting, to reproduce:\n\nwget http://bugzilla.abisource.com/attachment.cgi?id=5709 -O ~/abi13630-1.abw\n./instdir/program/soffice --headless --convert-to odt ~/abi13630-1.abw", "timestamp": "2023-04-05 08:24:55.000000000"}, {"message": "Done", "timestamp": "2023-04-10 10:37:06.000000000"}]}
{"thread_id": "b0ad7045_048a0ba3", "url": "https://gerrit.libreoffice.org/#/c/core/+/148556/5/sw/source/core/text/itrpaint.cxx@420", "comments": [{"message": "Got one remaining assert in crashtesting, to reproduce:\n\nwget https://bugzilla.mozilla.org/attachment.cgi?id=290363 -O ~/moz386569-2.odt\n./instdir/program/soffice --headless --convert-to pdf ~/moz386569-2.odt", "timestamp": "2023-05-10 08:01:20.000000000"}, {"message": "this assert no longer appears in latest crashtesting", "timestamp": "2023-05-14 13:39:51.000000000"}]}
{"thread_id": "99aba628_41eb8efc", "url": "https://gerrit.libreoffice.org/#/c/core/+/148556/5/sw/source/core/text/itrpaint.cxx@421", "comments": [{"message": "various hits on this in latest crashtesting, an example is:\n\nwget https://bz.apache.org/ooo/attachment.cgi?id=53997 -O ~/ooo90040-2.odt\n./instdir/program/soffice --headless --convert-to pdf ~/ooo90040-2.odt", "timestamp": "2023-03-23 08:52:27.000000000"}, {"message": "Done", "timestamp": "2023-04-05 08:24:55.000000000"}]}
{"thread_id": "e96a6bda_a4435c89", "url": "https://gerrit.libreoffice.org/#/c/core/+/148127/4/basctl/source/basicide/localizationmgr.cxx@931", "comments": [{"message": "Why `o3tl::span`? `aNames` could be used in range-for directly.", "timestamp": "2023-03-03 19:21:17.000000000"}, {"message": "Done", "timestamp": "2023-03-04 04:44:08.000000000"}]}
{"thread_id": "035c1f19_79155dc0", "url": "https://gerrit.libreoffice.org/#/c/core/+/148127/4/basctl/source/basicide/localizationmgr.cxx@933", "comments": [{"message": "No need to copy.", "timestamp": "2023-03-03 19:21:17.000000000"}, {"message": "Done", "timestamp": "2023-03-04 04:44:08.000000000"}]}
{"thread_id": "ff60d777_339486f6", "url": "https://gerrit.libreoffice.org/#/c/core/+/151603/2/sc/qa/uitest/pasteSpecial/tdf139858.py@24", "comments": [{"message": "Hi Andreas,\nSince you are not testing any UI element, I think this test can be done in CppUnittest. e.g. sc/qa/unit/uicalc/uicalc.cxx", "timestamp": "2023-05-11 14:29:16.000000000"}, {"message": "Ack", "timestamp": "2023-05-11 15:14:08.000000000"}, {"message": "Are you sure this change is not about testing any UI element? Since the change is located in the paste special dialog and depending on a checkbox. Because writing a test in uicalc.cxx would require the format (NOTES vs. ADDNOTES) and ADDNOTES never deleted any comment.", "timestamp": "2023-05-11 15:33:15.000000000"}, {"message": "oh, i didn't read the original report, i just took a quick look at the UI test. forget what i said in my previous comment", "timestamp": "2023-05-11 21:34:31.000000000"}, {"message": "Done", "timestamp": "2023-05-12 07:02:13.000000000"}]}
{"thread_id": "a96a4917_29a9c898", "url": "https://gerrit.libreoffice.org/#/c/core/+/151682/2/sfx2/source/doc/guisaveas.cxx@1756", "comments": [{"message": "This could be changed to an empty string instead.\nHowever, I thought it was a nice touch to indicate that the \"printing\" came from a PDF - especially since this is something new.\n\nI just re-used an existing string. Although I would have preferred \"PDF\" or PDF export\", \"PDF files\" in English is fine (except for plurality). But I didn't see any point in creating a new translation string.", "timestamp": "2023-05-11 22:28:08.000000000"}]}
{"thread_id": "ed53455f_b2e0926f", "url": "https://gerrit.libreoffice.org/#/c/core/+/148002/2/editeng/qa/unit/core-test.cxx@1990", "comments": [{"message": "Please see https://gerrit.libreoffice.org/c/core/+/150721", "timestamp": "2023-04-21 08:53:00.000000000"}, {"message": "Thanks", "timestamp": "2023-04-21 11:50:12.000000000"}]}
{"thread_id": "c5e9a9cf_2f245525", "url": "https://gerrit.libreoffice.org/#/c/core/+/151494/2/sc/source/filter/oox/richstring.cxx@79", "comments": [{"message": "Calls to this functions probably can be entirely replaced by calls to\n\n  oox::AttributeConversion::decodeXString()\n\nfrom include/oox/helper/attributelist.hxx and this function here removed.", "timestamp": "2023-05-08 12:16:35.000000000"}, {"message": "Ack", "timestamp": "2023-05-08 12:42:35.000000000"}]}
{"thread_id": "df409a84_189a7a21", "url": "https://gerrit.libreoffice.org/#/c/core/+/151494/2/sc/source/filter/oox/richstring.cxx@100", "comments": [{"message": "This does not cater for multiple occurrences of \"_x\" in rSrc, of which subsequent ones may actually denote a valid escapement, like \"_xfoo_x000D_", "timestamp": "2023-05-08 11:52:45.000000000"}, {"message": "Done. Thanks Eike!", "timestamp": "2023-05-08 13:39:15.000000000"}]}
{"thread_id": "a3011190_f55d988d", "url": "https://gerrit.libreoffice.org/#/c/core/+/151472/2/editeng/source/items/frmitems.cxx@332", "comments": [{"message": "It is used here was well, so I thought that could be a viable solution.", "timestamp": "2023-05-08 15:24:24.000000000"}]}
{"thread_id": "282cc1ee_9f77cba4", "url": "https://gerrit.libreoffice.org/#/c/core/+/146821/3/chart2/source/controller/dialogs/tp_Scale.cxx@532", "comments": [{"message": "Please use `sal_uInt32` here.\n\nKeep in mind that you should have a good reason for choosing a specific data type. We could simply change every `sal_uLong` with `sal_Int64` because it is usually big enough, but it is not a good idea. We should look at the usages of each occurrence of `sal_uLong`, and choose the appropriate data type accordingly.\n\nIn this case, please take a look at the return type of `GetValue()`.\n\nIn the end, you need to describe your reasoning for choosing appropriate data type in the commit log.", "timestamp": "2023-02-24 14:03:20.000000000"}, {"message": "Done", "timestamp": "2023-05-08 07:18:35.000000000"}]}
{"thread_id": "b3065049_e93edd6c", "url": "https://gerrit.libreoffice.org/#/c/core/+/151459/2/desktop/source/lib/init.cxx@7012", "comments": [{"message": "`getDocumentType` is already calls `SetLastExceptionMsg();`. In fact, you removed it from `doc_getDocumentType`, so should also not be called here.", "timestamp": "2023-05-08 09:34:49.000000000"}, {"message": "That's right. I'll fix it in my next patch!", "timestamp": "2023-05-08 09:39:18.000000000"}]}
{"thread_id": "d935ce5f_081183d8", "url": "https://gerrit.libreoffice.org/#/c/core/+/139279/4/writerfilter/source/dmapper/DomainMapperTableHandler.cxx@1277", "comments": [{"message": "I'd avoid such random, unrelated reformatting of surrounding code, even more so if you want to make this into a \"role model\" commit which Easy Hackers will study for inspiration.  IMO such random reformatting just distracts reviewers from the actual change, and it needlessly introduces noise into e.g. the git-blame history.", "timestamp": "2022-11-11 14:39:05.000000000"}, {"message": "Fixed.", "timestamp": "2023-05-07 06:47:36.000000000"}]}
{"thread_id": "d8fa1c26_77ca9c2a", "url": "https://gerrit.libreoffice.org/#/c/core/+/139279/4/writerfilter/source/dmapper/DomainMapperTableHandler.cxx@1284", "comments": [{"message": "Arguably better to e.g. go via std::string_view, to avoid cutting off at embedded NUL characters.  (Though stod is defined to be implemented in terms of strtod, which thus suffers from this issue too, and thus might be a poor replacement here anyway, depending on what content sCellText can have.)", "timestamp": "2022-11-11 14:39:05.000000000"}, {"message": "`stringToDouble()` should be able to handle 16-bit char strings, as it takes `std::u16string_view` type string, and also uses `sal_Unicode` as the data type for the separators.", "timestamp": "2023-05-07 06:47:36.000000000"}]}
{"thread_id": "7beb53b5_d3d856e4", "url": "https://gerrit.libreoffice.org/#/c/core/+/139279/4/writerfilter/source/dmapper/DomainMapperTableHandler.cxx@1284", "comments": [{"message": "I think it would be better to avoid this utf8 encoding and just use sCellText.toDouble(). What do you think?", "timestamp": "2022-11-11 14:13:15.000000000"}, {"message": "I think `OUString::toDouble()` is not enough here, as it does not provide appropriate error handling mechanism beyond IEEE 754 special values and `0` as the output.", "timestamp": "2023-05-07 06:47:36.000000000"}]}
{"thread_id": "10536795_e63c4684", "url": "https://gerrit.libreoffice.org/#/c/core/+/151470/3/writerfilter/source/dmapper/TrackChangesHandler.cxx@79", "comments": [{"message": "Please use commas at the end of every such line, including the last one. The language allows that. And that allows to add new lines, without touching previous lines *absolutely*. In this case, the comma in line 79 could later allow to simply uncomment line 80, and not need anything else. And indeed, line 80 should have trailing comma for consistency, too.\n\n(I do not suggest to change the things you already committed - that would introduce new git log entries. I only suggest this for the future.)", "timestamp": "2023-05-07 21:24:22.000000000"}, {"message": "Sorry but I'm rather purist, in my opinion, the last element of a list shouldn't have a comma. Of course, I won't change any existing code for just removing a comma of a last line but I'll never add some line at the end with a comma.\nFor me, it's just wrong and compiler should display an error or add an empty element.\nIt won't confuse that much git history and won't disturb much to add a comma in the previous line in the rare cases we've got to add an element at the end of a list.", "timestamp": "2023-05-08 07:15:50.000000000"}, {"message": "Ack; we are different kinds of purists; for me, it's not an error, but a great language feature...", "timestamp": "2023-05-08 07:19:46.000000000"}]}
{"thread_id": "c4151e33_d87e3ab9", "url": "https://gerrit.libreoffice.org/#/c/core/+/151330/2/sw/qa/extras/uiwriter/uiwriter3.cxx@2341", "comments": [{"message": "probably an assert would make sense here too ?", "timestamp": "2023-05-03 16:54:25.000000000"}, {"message": "I don't know if it is possible to assert here. The segfault happens in another place:\n\n```\n$ make CPPUNIT_TEST_NAME=testTdf150457 -sr CppunitTest_sw_uiwriter3 CPPUNITTRACE=\"gdb --args\"\n...\n(gdb) run\n...\nThread 1 \"cppunittester\" received signal SIGSEGV, Segmentation fault.\n0x00007fffe69473ce in SwFootnoteFrame::GetAttr (this=0x0) at sw/source/core/inc/ftnfrm.hxx:127\n127\t          SwTextFootnote   *GetAttr()         { return mpAttribute; }\n\n(gdb) bt \n#0  0x00007fffe69473ce in SwFootnoteFrame::GetAttr() (this=0x0)\n...\n#39 0x00007fffec09a693 in testTdf150457::TestBody() (this=0x5555563d0260)\n    at /home/hossein/Projects/libreoffice/core/sw/qa/extras/uiwriter/uiwriter3.cxx:2341\n...\n```", "timestamp": "2023-05-03 17:19:01.000000000"}, {"message": "I've added a relevant assertion.", "timestamp": "2023-05-03 20:30:46.000000000"}]}
{"thread_id": "9ffcdeb1_a1128246", "url": "https://gerrit.libreoffice.org/#/c/core/+/151330/5/sw/qa/extras/uiwriter/uiwriter3.cxx@2306", "comments": [{"message": "I just realized this can be simplified a bit -> https://gerrit.libreoffice.org/c/core/+/151395", "timestamp": "2023-05-04 14:15:59.000000000"}, {"message": "Thanks!", "timestamp": "2023-05-08 06:42:19.000000000"}]}
{"thread_id": "d3390c09_5b1f8b66", "url": "https://gerrit.libreoffice.org/#/c/core/+/151477/1/framework/source/classes/taskcreator.cxx@81", "comments": [{"message": "can use it for the getUnpackedValueOrDefault call too", "timestamp": "2023-05-07 17:38:26.000000000"}, {"message": "Indeed!", "timestamp": "2023-05-07 18:23:21.000000000"}]}
{"thread_id": "354b0ea6_59642e7a", "url": "https://gerrit.libreoffice.org/#/c/core/+/96324/2/sw/source/core/crsr/crsrsh.cxx@2508", "comments": [{"message": "From a cursory look at how IsFlySelectedByCursor is implemented (and IsDestroyFrameAnchoredAtChar / IsSelectFrameAnchoredAtPara that it calls), the function expects that start and end are different (there are many conditions like 'if (start < x && x < end)'). So it seems that here, it may be a no-op? Indeed, I could overlook a specific case when this would still do something.", "timestamp": "2023-05-07 19:10:27.000000000"}]}
{"thread_id": "8f44b81a_ace50947", "url": "https://gerrit.libreoffice.org/#/c/core/+/84155/2/sw/source/uibase/uiview/viewling.cxx@802", "comments": [{"message": "Note that the respective Push should also be made conditional, else it will basically leak (stay in stack forever) in lok case.", "timestamp": "2023-05-07 13:41:03.000000000"}]}
{"thread_id": "a2eab863_dda0d939", "url": "https://gerrit.libreoffice.org/#/c/core/+/150161/4/sc/qa/unit/scshapetest.cxx@1043", "comments": [{"message": "you can use existing 'gotoCell' method. See https://gerrit.libreoffice.org/c/core/+/151367", "timestamp": "2023-05-04 12:33:04.000000000"}, {"message": "Done", "timestamp": "2023-05-05 14:12:20.000000000"}]}
{"thread_id": "7dc86e47_adb18fe4", "url": "https://gerrit.libreoffice.org/#/c/core/+/150161/3/sc/source/core/data/drwlayer.cxx@1945", "comments": [{"message": "This condition can now be removed, too, after the return in line 1940.", "timestamp": "2023-05-03 14:27:59.000000000"}, {"message": "Done", "timestamp": "2023-05-05 14:12:20.000000000"}]}
{"thread_id": "f579e26c_13d34889", "url": "https://gerrit.libreoffice.org/#/c/core/+/150161/6/sc/source/core/data/drwlayer.cxx@2186", "comments": [{"message": "For me, a crash occurs when undoing an object insert if the draw model undo is not disabled before calling InsertObjectThenMakeNameUnique.", "timestamp": "2023-05-06 03:20:38.000000000"}, {"message": "Hi Jim, thank you for catching the problem and adding a hint how to solve it. Please have a look, whether it is now OK for you.", "timestamp": "2023-05-06 16:34:54.000000000"}, {"message": "It is OK for me now. No crash :-)", "timestamp": "2023-05-06 22:59:20.000000000"}]}
{"thread_id": "6bbfce46_96546b23", "url": "https://gerrit.libreoffice.org/#/c/core/+/150451/7/sfx2/source/dialog/StyleList.cxx@121", "comments": [{"message": "Well there is a OUStringHash which should give you a size_t for the rString, so you don't have to do your own magic calculation. \n\nThen to create a color I would use the HSL colorspace, where Hue can be directly converted from the hash, but Saturation and Lightness variables would be more controlled (only let's say 3 levels for each - for example 100%, 80% and 60%). Then convert the HSL to RGB for the final color.", "timestamp": "2023-04-25 19:29:51.000000000"}, {"message": "Poking around the web to gain better understanding of the HSL colorspace I came across https://github.com/zenozeng/color-hash. Is this similar to what you had in mind? I tested the following and it seems to provide acceptable colors.\n\nColor ColorHash(const OUString& rString)\n{\n    static std::vector aSaturationArray { 0.90, 0.80, 0.60 };\n    static std::vector aLightnessArray = aSaturationArray;\n\n    sal_uInt32 nStringHash = rString.hashCode();\n\n    double nHue = nStringHash % 359;\n    double nSaturation = aSaturationArray[nStringHash / 360 % aSaturationArray.size()];\n    double nLightness = aLightnessArray[nStringHash / 360 / aSaturationArray.size() % aLightnessArray.size()];\n\n    basegfx::BColor aHSLColor(nHue, nSaturation, nLightness);\n\n    return Color(basegfx::utils::hsl2rgb(aHSLColor));\n}", "timestamp": "2023-04-26 02:19:45.000000000"}, {"message": "Haha, interesting. That seems to be exactly what I had in mind.", "timestamp": "2023-04-26 07:24:18.000000000"}]}
{"thread_id": "988d74d5_b8a07c1c", "url": "https://gerrit.libreoffice.org/#/c/core/+/122831/1/basic/source/sbx/sbxscan.cxx@313", "comments": [{"message": "stringToDouble is the opposite direction \ud83d\ude09", "timestamp": "2021-09-29 18:06:19.000000000"}, {"message": "The day was long \ud83d\ude1e\ud83d\ude0a", "timestamp": "2021-09-29 18:47:33.000000000"}]}
{"thread_id": "20495fa3_44e9f34f", "url": "https://gerrit.libreoffice.org/#/c/core/+/122831/1/basic/source/sbx/sbxscan.cxx@315", "comments": [{"message": "Hmm. Are we OK with rtl_math_StringFormat_Automatic? Previously we explicitly differentiated between rtl_math_StringFormat_F and rtl_math_StringFormat_E2 (basically, those constants; making sure to have no less than 2 decimal digits in exponent), and chose dependent on '( nNum &&( nNum < 1E-1 || nNum >= dMaxNumWithoutExp ) )'. And dMaxNumWithoutExp was dependent on nPrec. I suppose that we better stick to the old behavior? It would be a regression IMO to change it.\n\nEven if you are in favor to change that, please do that in a follow-up, so that we may differentiate possible regressions.", "timestamp": "2021-09-29 18:18:29.000000000"}, {"message": "Ack", "timestamp": "2021-09-29 18:47:33.000000000"}, {"message": "The only regression I could think of is that instead of 1E18 it converts numbers to 1E018 and maybe from another limit determined by the function. I will create a follow up \ud83d\udc4d", "timestamp": "2021-09-29 19:35:03.000000000"}]}
{"thread_id": "071cbf49_d17b41bc", "url": "https://gerrit.libreoffice.org/#/c/core/+/122831/1/basic/source/sbx/sbxscan.cxx@315", "comments": [{"message": "Please don't use this. Instead, please use doubleToUString (or directly rtl_math_doubleToUString, which is a better match here, not requiring to create a temporary OUString).", "timestamp": "2021-09-29 18:06:19.000000000"}, {"message": "Ack", "timestamp": "2021-09-29 18:47:33.000000000"}]}
{"thread_id": "2b974702_e6bdd084", "url": "https://gerrit.libreoffice.org/#/c/core/+/122831/3/basic/source/sbx/sbxscan.cxx@313", "comments": [{"message": "Please, make this functional change also separate! Thanks.", "timestamp": "2021-09-29 20:19:27.000000000"}]}
{"thread_id": "69817318_09391522", "url": "https://gerrit.libreoffice.org/#/c/core/+/122831/4/basic/source/sbx/sbxscan.cxx@669", "comments": [{"message": "This seems to be the same functional change?", "timestamp": "2021-09-29 20:26:40.000000000"}]}
{"thread_id": "ff3cd544_9ef7896a", "url": "https://gerrit.libreoffice.org/#/c/core/+/151403/1/vcl/workben/fodt2pdffuzzer.cxx@57", "comments": [{"message": "s/we really care/we only really care/", "timestamp": "2023-05-05 08:19:11.000000000"}, {"message": "Done", "timestamp": "2023-05-05 14:50:40.000000000"}]}
{"thread_id": "8c3cc849_1dc2c596", "url": "https://gerrit.libreoffice.org/#/c/core/+/151308/2/vcl/jsdialog/jsdialogbuilder.cxx@2037", "comments": [{"message": "this update is probably needed for other things...\ncan't we do:\nif (!isExpanded())\n{\n    SalInstanceTreeView::expand_row(rIter);\n    sendUpdate();\n}\n\nwill it work?", "timestamp": "2023-05-03 15:33:41.000000000"}, {"message": "Done", "timestamp": "2023-05-05 14:37:16.000000000"}]}
{"thread_id": "fe2e1674_6df1090e", "url": "https://gerrit.libreoffice.org/#/c/core/+/147023/7/editeng/source/items/frmitems.cxx@772", "comments": [{"message": "I'm hitting this when I switch to Tabbed view. (View - User Interface - anything other than Standard Toolbar).", "timestamp": "2023-05-04 14:03:05.000000000"}, {"message": "Heh, someone actually made a bug report about this \"developer\" problem.\nhttps://bugs.documentfoundation.org/show_bug.cgi?id=154282", "timestamp": "2023-05-05 12:05:02.000000000"}]}
{"thread_id": "83410eb8_77c74d54", "url": "https://gerrit.libreoffice.org/#/c/core/+/147023/7/editeng/source/items/frmitems.cxx@1376", "comments": [{"message": "Here and below in `SvxGutterRightMarginItem::PutValue`, building with Clang on Windows fails with `-Werrror,-Wunused-but-set-parameter`.  But I am completely clueless why the code here is the way it is and what the cleanest fix would be.  An\n\n  #else\n      (void) nMemberId;\n\nbranch?", "timestamp": "2023-04-12 14:03:37.000000000"}, {"message": "well this whole class is unused currently and due to vastly underestimating the effort to fix this bug it's not likely to be used any time soon (since only 3 of these classes are used by paragraphs which is what the bug was about), that's why it's quite incomplete and the #ifdef in here is just because MSVC warned about something so just add more #ifdefs for now until somebody has time to work on this construction site", "timestamp": "2023-04-13 10:57:59.000000000"}]}
{"thread_id": "c326e87b_cbd69fe4", "url": "https://gerrit.libreoffice.org/#/c/core/+/151363/1/sfx2/source/view/viewsh.cxx@2021", "comments": [{"message": "Seems like if accessibility is disabled - we still create a new LOKDocumentFocusListener - is that intended ?", "timestamp": "2023-05-04 13:46:10.000000000"}, {"message": "So it's not a big problem if LOKDocumentFocusListener is instantiated or not, until there is any object to listen to attached, it doesn't do anything.", "timestamp": "2023-05-04 15:19:08.000000000"}]}
{"thread_id": "1d6de3ab_66e0114f", "url": "https://gerrit.libreoffice.org/#/c/core/+/151366/2/include/o3tl/string_view.hxx@530", "comments": [{"message": "This leads to GCC warning \"comparison of unsigned expression >= 0 is always true [-Wtype-limits]\" as n is `std::size_t`", "timestamp": "2023-05-04 17:37:13.000000000"}, {"message": "oh, yeah, <https://gerrit.libreoffice.org/c/core/+/151409> \"Fix typo in assert\"; thanks for noticing!", "timestamp": "2023-05-05 06:11:02.000000000"}]}
{"thread_id": "5624222e_053f034d", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/18/sd/source/ui/slideshow/slideshow.cxx@887", "comments": [{"message": "Same here...", "timestamp": "2023-04-25 06:53:19.000000000"}, {"message": "Done", "timestamp": "2023-04-25 16:11:16.000000000"}]}
{"thread_id": "ac227550_0a40bbfb", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/18/sd/source/ui/slideshow/slideshowimpl.cxx@1486", "comments": [{"message": "A line similar to what I mentioned before. Please check the code for similar cases, possibly there could be more. Gerrit shows them in a convenient way.", "timestamp": "2023-04-25 06:53:19.000000000"}, {"message": "Checked all files with changes and removed similar lines.", "timestamp": "2023-04-25 16:11:16.000000000"}]}
{"thread_id": "0bf17ee8_ba6c05a0", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/22/sd/source/ui/slideshow/slideshowimpl.cxx@1482", "comments": [{"message": "Why do we need to make these (and similar in other places) conditional on the shown navigation buttons?", "timestamp": "2023-04-30 08:38:44.000000000"}, {"message": "This was added to preserve the original behavior in case navigation is not used. If navigation is used, left-clicks should be ignored so that the slides do not switch when, for example, the overlay button for calling the context menu is pressed.\n\nAfter solving the problem with XSlideShowListener, we will check if it was required to add this to all events or would it be enough to leave it only for gotoNextSlide()", "timestamp": "2023-04-30 11:06:44.000000000"}, {"message": "Hmm, this still seems questionable. Does clicking the overlay button also generate this SlideshowImpl::click, which raises the need for this? IMO, that would require to find why that happens, and prevent this SlideshowImpl::click call when the overlay button is clicked. Or maybe the overlay button is a \"shape\" itself in the context of this method? Then it could have own entry in the maShapeEventMap, with own actions, and then possibly the new interface and methods could be simply not required at all.", "timestamp": "2023-04-30 11:25:12.000000000"}, {"message": "I have tested how the change works. When I clicked on the navigation buttons, the click function wasn't triggered.\n\nOTOH, in MS PowerPoint, clicking on the slide does the usual thing (forwards the presentation), while the overlay buttons are shown; so I doubt we need to disable this normal processing.", "timestamp": "2023-04-30 16:27:55.000000000"}, {"message": "Initially, we tried to do both animation switching and slide switching. The problem was in the UserEventQueue, there was only 1 slide ended event, which worked after pressing the LMB for an equal number of animations + 1 and subsequently was never called again. In SlideShowImpl, I did not find a request for the number of remaining animations to manually switch, but perhaps I was looking badly. I will review this solution, it may be possible to find an easy way to switch slide after animations", "timestamp": "2023-04-30 16:51:21.000000000"}, {"message": "I think I could find a better solution. Inherited SlideOverlayButton from MouseEventHandler and implemented handleMouseReleased method. SlideOverlayButton registered with high priority in multiplexer. Now in my local build both switching slides and switching animations by pressing LMB works. Navigation buttons work too.", "timestamp": "2023-05-01 19:25:36.000000000"}, {"message": "Done", "timestamp": "2023-05-03 11:20:58.000000000"}]}
{"thread_id": "737cd35e_067def25", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/21/slideshow/source/engine/eventmultiplexer.cxx@592", "comments": [{"message": "Leading :: (also inconsistent: lines 578, 604 contain the same type without leading ::)", "timestamp": "2023-04-27 20:37:16.000000000"}, {"message": "Removed", "timestamp": "2023-04-28 15:55:08.000000000"}]}
{"thread_id": "ff025cf9_e1528e40", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/21/slideshow/source/engine/eventmultiplexer.cxx@608", "comments": [{"message": "Same here; and also no spaces around =.\n\nNote that, if you use MSVC, you may select (part of) code, and press Ctrl+K Ctrl+F, and the selection will be formatted according to the project's clang-format rules. (Make sure that unrelated pieces do not change formatting.)", "timestamp": "2023-04-27 20:37:16.000000000"}, {"message": "Removed too", "timestamp": "2023-04-28 15:55:08.000000000"}]}
{"thread_id": "a427f876_0066b9ee", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/22/slideshow/source/engine/eventmultiplexer.cxx@599", "comments": [{"message": "There should not be any commented out code. It is either needed, or not - and then it should be removed. If you have a problem/question, then you need to ask, and resolve it.", "timestamp": "2023-04-30 08:38:44.000000000"}, {"message": "Done", "timestamp": "2023-05-03 13:36:48.000000000"}]}
{"thread_id": "2166220f_1407c37d", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/24/slideshow/source/engine/eventmultiplexer.cxx@1293", "comments": [{"message": "You use UNO_QUERY, and then immediately dereference the result unconditionally.\nEither use UNO_QUERY_THROW, or check if the result is valid :)", "timestamp": "2023-05-03 11:20:58.000000000"}, {"message": "Replaced with UNO_QUERY_THROW since the function must return the correct point, no default values.", "timestamp": "2023-05-03 11:55:47.000000000"}, {"message": "Done", "timestamp": "2023-05-03 13:36:48.000000000"}]}
{"thread_id": "a2544110_db32a5ec", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/24/slideshow/source/engine/eventmultiplexer.cxx@1300", "comments": [{"message": "Same here", "timestamp": "2023-05-03 11:20:58.000000000"}, {"message": "Done", "timestamp": "2023-05-03 13:36:48.000000000"}]}
{"thread_id": "71a3fafb_cd86c49a", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/17/slideshow/source/engine/slideoverlaybutton.cxx@48", "comments": [{"message": "consider using std::make_shared instead", "timestamp": "2023-04-24 13:51:51.000000000"}, {"message": "As I understand it, in the original code (in the WaitSymbol class), the class constructor was intentionally closed so that it was impossible to create an object that was not associated with the EventMultiplexer. To call make_shared would require making a public constructor, but then there is a risk that someone will create an object without calling the \"Create\" method, without binding it to the EventMultiplexer.", "timestamp": "2023-04-24 20:35:39.000000000"}, {"message": "Good point. Thanks for clarification.", "timestamp": "2023-04-25 06:53:19.000000000"}]}
{"thread_id": "ec11a874_e6c631a5", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/17/slideshow/source/engine/slideoverlaybutton.cxx@55", "comments": [{"message": "We have a Point class for this, or maybe basegfx::B2IPoint, or basegfx::B2DPoint if you use this member to calculate a basegfx::B2DPoint.", "timestamp": "2023-04-24 13:51:51.000000000"}, {"message": "Replaced with css::awt::Point because the X and Y values in it are of type sal_Int32.", "timestamp": "2023-04-24 23:14:15.000000000"}]}
{"thread_id": "f371a3d7_93a6838f", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/17/slideshow/source/engine/slideoverlaybutton.cxx@60", "comments": [{"message": "This explicit initialization using a default ctor is redundant here: it would be used by compiler by default anyway. Just drop it.", "timestamp": "2023-04-24 13:51:51.000000000"}, {"message": "Removed this line.", "timestamp": "2023-04-24 23:14:15.000000000"}]}
{"thread_id": "0aae1cdd_886fc06e", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/17/slideshow/source/engine/slideoverlaybutton.cxx@62", "comments": [{"message": "Consider using default initializer in the class definition instead, and drop this line, too.", "timestamp": "2023-04-24 13:51:51.000000000"}, {"message": "Added initialization to the class definition. Removed this line.", "timestamp": "2023-04-24 23:14:15.000000000"}]}
{"thread_id": "95a55973_52248345", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/17/slideshow/source/engine/slideoverlaybutton.cxx@91", "comments": [{"message": "Why do you use the explicit template argument here? Both of the arguments are sal_Int32 here. Generally, we recommend to avoid such use of template arguments: they hide a possible problem in the future, when someone decides to change a type of one of the arguments, and instead of seeing the compilation error here (and deciding how to fix it properly), would have the code silently compiling, and only get errors (e.g., from overflow) \"randomly\" at runtime.", "timestamp": "2023-04-24 13:51:51.000000000"}, {"message": "Removed template argument.", "timestamp": "2023-04-24 23:14:15.000000000"}]}
{"thread_id": "c49abcd3_8f8e9ccb", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/17/slideshow/source/engine/slideoverlaybutton.cxx@92", "comments": [{"message": "Is this X intentional here? It is odd to see X used in both X and Y of an output point.\n\nIf needed, put some comments, explaining how you calculate the coordinates, and why the X is used in both places.", "timestamp": "2023-04-24 13:51:51.000000000"}, {"message": "This looks like a bug in the original code. Maybe the error was not noticed, since the icon disappears from the screen very quickly.\n\nChecked aViewArea.X and aViewArea.Y. Their values were always zero in my launches. Most likely, we did not notice this bug in our changes due to the fact that X and Y are equal. Perhaps X and Y take on other values under some special conditions.\n\nReplaced the second X with Y because it looks more correct.", "timestamp": "2023-04-24 23:14:15.000000000"}]}
{"thread_id": "e559e2d1_4c07fa92", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/17/slideshow/source/engine/slideoverlaybutton.cxx@93", "comments": [{"message": "In this case, the literal 0 should be explicitly made sal_Int32: \"sal_Int32(0)\"", "timestamp": "2023-04-24 13:51:51.000000000"}, {"message": "Removed template argument too.", "timestamp": "2023-04-24 23:14:15.000000000"}]}
{"thread_id": "1ca8102f_7b82595e", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/17/slideshow/source/engine/slideoverlaybutton.cxx@142", "comments": [{"message": "OSL_* macros are obsolete, and should not be used: tdf#43157.", "timestamp": "2023-04-24 13:51:51.000000000"}, {"message": "Replaced this macros with the standard \"assert\".", "timestamp": "2023-04-24 23:14:15.000000000"}]}
{"thread_id": "987936c9_005bd874", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/18/slideshow/source/engine/slideoverlaybutton.cxx@88", "comments": [{"message": "As said, this 0 must be explicitly made sal_Int32. If you developed on Linux, you could get a wrong impression that you can simply omit the explicit type - based on the specifics that on Linux, sal_Int32 is a typedef for 'int', so the implicit type 'int' of literals works fine. But on other platforms, like e.g. Windows, sal_Int32 has a different underlying type (MSVC uses long as the underlying type, for instance).\n\nsal_Int32(0)", "timestamp": "2023-04-25 05:52:57.000000000"}, {"message": "Sorry, I thought I changed this line. Replaced it with sal_Int32(0).", "timestamp": "2023-04-25 16:11:16.000000000"}]}
{"thread_id": "0ca190a0_fd1d30ca", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/17/slideshow/source/engine/slideshowimpl.cxx@640", "comments": [{"message": "Please split lines to be no longer than 100 characters.", "timestamp": "2023-04-24 13:51:51.000000000"}, {"message": "Split into several lines, looking at how similar lines are split in this file.", "timestamp": "2023-04-24 23:14:15.000000000"}, {"message": "Done", "timestamp": "2023-05-03 11:20:58.000000000"}]}
{"thread_id": "c8fb3e1c_5a5e1507", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/17/slideshow/source/engine/slideshowimpl.cxx@643", "comments": [{"message": "Opening braces should be on separate lines", "timestamp": "2023-04-24 13:51:51.000000000"}, {"message": "Checked all the changes and moved similar braces to a new lines.", "timestamp": "2023-04-24 23:14:15.000000000"}]}
{"thread_id": "52c9ac4c_fa7ee799", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/17/slideshow/source/engine/slideshowimpl.cxx@1803", "comments": [{"message": "Again: \"new\" here", "timestamp": "2023-04-24 13:51:51.000000000"}, {"message": "Removed this too.", "timestamp": "2023-04-24 23:14:15.000000000"}]}
{"thread_id": "c48f214a_b422b43e", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/21/slideshow/source/engine/usereventqueue.cxx@173", "comments": [{"message": "Again, the default ctor is unneeded in the initialization. It is called by default.", "timestamp": "2023-04-27 20:37:16.000000000"}, {"message": "Removed", "timestamp": "2023-04-28 15:55:08.000000000"}]}
{"thread_id": "2fb2f678_ec70e956", "url": "https://gerrit.libreoffice.org/#/c/core/+/150448/21/slideshow/source/engine/usereventqueue.cxx@197", "comments": [{"message": "Note my previous nitpick about opening braces on a separate line ;)\n\nA single-line 'if' body doesn't need braces, so you may (but not have to) omit them here.", "timestamp": "2023-04-27 20:37:16.000000000"}, {"message": "Aligned with clang-format", "timestamp": "2023-04-28 15:55:08.000000000"}]}
{"thread_id": "40204edd_0b989b5e", "url": "https://gerrit.libreoffice.org/#/c/core/+/151103/1/writerfilter/source/dmapper/DomainMapper_Impl.cxx@6719", "comments": [{"message": "Best to use the same formatting as elsewhere in the file/project. Braces are always on their own line. (See above, line 6708-9, for example).", "timestamp": "2023-04-28 16:51:02.000000000"}, {"message": "Thanks, I fixed the formatting issue.", "timestamp": "2023-04-28 17:11:18.000000000"}]}
{"thread_id": "4dfacbff_e5aa8342", "url": "https://gerrit.libreoffice.org/#/c/core/+/118883/2/basctl/source/basicide/baside3.cxx@685", "comments": [{"message": "This failed to replace this use of m_sCurPath with the selected path in the Save As dialog. Caused tdf#155077.", "timestamp": "2023-04-29 11:06:27.000000000"}]}
{"thread_id": "552797b7_d2dc8fe2", "url": "https://gerrit.libreoffice.org/#/c/core/+/151008/1/sw/source/core/edit/autofmt.cxx@2680", "comments": [{"message": "Please consider code formatting: CTRL+K, CTRL+F in Visual Studio\nSo this changes to:\n    else if (bReplaceStyles)\n        BuildText();", "timestamp": "2023-04-26 16:05:17.000000000"}, {"message": "updated", "timestamp": "2023-04-26 18:25:21.000000000"}, {"message": "Also, I've tried to solve tdf#90507 here.\n\nNow the patch solves two bugs tdf#128192 and tdf#90507.\n- For tdf#128192, current patch allows manual Tools/AutoCorrect/Apply for all the styles, excluding Heading styles.\n- For tdf#90507, the current patch doesn't automatically changes \"Default Paragraph Style\" paragraphs into \"Text Body\".", "timestamp": "2023-04-26 23:38:52.000000000"}, {"message": "Hm, the LibreOffice policy for resolving bugs is one commit for a single issue. So if a regression occurs, one can identify the exact commit leading to it. May you split these two changes? Thank you!\n\nYou may add also an UI test in order to test if these issues are resolved even for upcoming commits in this are.\n\nGood Work!", "timestamp": "2023-04-27 16:17:40.000000000"}, {"message": "sure!", "timestamp": "2023-04-27 16:19:30.000000000"}, {"message": "Do you have any ideas on where to add the UI test?", "timestamp": "2023-04-27 18:50:34.000000000"}, {"message": "Do you have any ideas on where to add the UI test for this fix?", "timestamp": "2023-04-27 18:51:31.000000000"}, {"message": "writer_tests7/tdf90401.py and riter_tests4/tdf122449.py have some tests about autocorrection. You may check them in order to get a starting point.", "timestamp": "2023-04-28 09:07:47.000000000"}, {"message": "updated with uitest", "timestamp": "2023-04-29 05:49:49.000000000"}]}
{"thread_id": "338b275b_ce1a83e0", "url": "https://gerrit.libreoffice.org/#/c/core/+/138562/6/sw/qa/uitest/writer_tests2/deleteFootnotes.py@44", "comments": [{"message": "Hi Hossein,\nThe UItest passes even without the fix in place, could you please check on your side?\nI believe you should at least add an assert after all the actions executed above ?", "timestamp": "2022-09-06 06:33:36.000000000"}, {"message": "Hello Xisco,\nThanks for testing.\nProbably not, because this is a crash fix, and without the fix in place, the test faces a crash, and this message:\n\n Error: a unit test failed:\n\nI've tested this both here in `master`, and in the `libreoffice-7-4` branch.\n\nCould you please describe the way you are revering the fix and then doing test? I do it manually.", "timestamp": "2022-09-06 09:40:59.000000000"}, {"message": "If you have the 7.5 bisect repo you don't need to revert anything, you can test it there directly, I use:\n\nexport PYTHONPATH=/home/xisco/bisect/bibisect-linux64-7.5/instdir/program/\nexport PYTHONPATH=$PYTHONPATH:/home/xisco/libreoffice/unotest/source/python/\nexport URE_BOOTSTRAP=file:///home/xisco/bisect/bibisect-linux64-7.5/instdir/program/fundamentalrc\nexport SAL_USE_VCLPLUGIN=gen\nexport TDOC=/home/xisco/libreoffice/sd/qa/uitest/data/\nexport TestUserDir=file:///tmp\nexport LC_ALL=C\n\nrm -rf /tmp/libreoffice/4 \n\npython3 /home/xisco/libreoffice/uitest/test_main.py --soffice=path:/home/xisco/bisect/bibisect-linux64-7.5/instdir/program/soffice --userdir=file:///tmp/libreoffice/4 --file=/home/xisco/libreoffice/sw/qa/uitest/writer_tests2/deleteFootnotes.py\n\nIt doesn't crash before nor after your fix", "timestamp": "2022-09-06 13:59:30.000000000"}, {"message": "Could you please try this?\n\n cd sw && make -srj1 UITest_writer_tests2 \\\n  UITEST_TEST_NAME=\"deleteFootnotes.tdf150457.test_delete_footnotes\" \\\n  SAL_USE_VCLPLUGIN=gen", "timestamp": "2022-09-06 14:05:13.000000000"}, {"message": "yep, I tried both. There is no reason why the behaviour should be different though", "timestamp": "2022-09-06 14:12:56.000000000"}, {"message": "I've tested using the `linux-64-7.5` bibisect repository. The bug and the fix are reproducible manually.\nAlso, the crash is reproducible with UITest through `make`, but not through the `uitest/test_main.py` script. I tried to modify the UITest to reproduce the crash using `uitest/test_main.py` without success. Does it force LibreOffice to close early?", "timestamp": "2022-09-06 17:31:25.000000000"}, {"message": "mmm you can reproduce it with make but not with uitest/test_main.py? that doesn't make sense. make's UItest use it as well, see solenv/gbuild/UITest.mk", "timestamp": "2022-09-07 13:59:07.000000000"}, {"message": "I've ported the UITest to CppunitTest:\nhttps://gerrit.libreoffice.org/c/core/+/151330\n\nI hope it is now more easier to reproduce the segfault. Without this fix in place, running the CppunitTest leads to a segfault.", "timestamp": "2023-05-03 16:51:39.000000000"}]}
{"thread_id": "fcdb411c_774b2fad", "url": "https://gerrit.libreoffice.org/#/c/core/+/151262/3/sc/qa/unit/uicalc/uicalc.cxx@1675", "comments": [{"message": "This makes no sense with the test, ';' is the array row separator in English locales, so this inserts a column vector to each cell instead of a row vector across cells. Should instead be\n={1,2,3}", "timestamp": "2023-05-03 12:09:23.000000000"}, {"message": "Addressed in https://gerrit.libreoffice.org/c/core/+/151328", "timestamp": "2023-05-03 14:00:28.000000000"}]}
{"thread_id": "bcd177a9_3b9c1563", "url": "https://gerrit.libreoffice.org/#/c/core/+/151262/3/sc/qa/unit/uicalc/uicalc.cxx@1677", "comments": [{"message": "Ady noted that you can't use comma as the separator for the third parameter (result vector), if you use semicolon as the separator for the array. I tested it in Calc.", "timestamp": "2023-05-02 19:00:05.000000000"}, {"message": "Hi Ilmari,\nthe result is the same using comma or semicolon. The formula gives NA with the fix in place and it crashes without it ( and without the follow-up commit 595eda782296916ddfec5f6d15e9abc5c61667ee ).\nI can change it in order to unify things but the results of the test will be the same", "timestamp": "2023-05-03 07:44:40.000000000"}, {"message": "If using ={1,2,3} above then the {1,2} here is correct.", "timestamp": "2023-05-03 12:09:23.000000000"}]}
{"thread_id": "01de5891_3e30af15", "url": "https://gerrit.libreoffice.org/#/c/core/+/150436/3/sc/source/filter/oox/condformatcontext.cxx@208", "comments": [{"message": "you said in commit message - \"insert more rules for same range\"\nhere you only checking if range is a single cell, why we checking that?\n\nmaybe I don't understand but I see no connection between that code and description :)", "timestamp": "2023-05-03 08:55:50.000000000"}, {"message": "The reason there is a export unit test conditional format that fails, It looks\nthat it likes to have separate single range selections. But it should be changed even single cells.", "timestamp": "2023-05-03 12:20:18.000000000"}, {"message": ".", "timestamp": "2023-05-03 12:22:04.000000000"}]}
{"thread_id": "efdda571_14ace4f6", "url": "https://gerrit.libreoffice.org/#/c/core/+/151306/2/sw/source/core/txtnode/txtedt.cxx@b538", "comments": [{"message": "If you increment nEnd and you hit this line, your new nEnd will point to a non-existing position. Can this happen?", "timestamp": "2023-05-03 10:16:45.000000000"}, {"message": "Done", "timestamp": "2023-05-03 11:47:04.000000000"}]}
{"thread_id": "0ba34daf_119e4f5a", "url": "https://gerrit.libreoffice.org/#/c/core/+/151306/2/sw/source/core/txtnode/txtedt.cxx@b594", "comments": [{"message": "And here.", "timestamp": "2023-05-03 10:16:45.000000000"}, {"message": "Done", "timestamp": "2023-05-03 11:47:04.000000000"}]}
{"thread_id": "978c4198_896bc3e1", "url": "https://gerrit.libreoffice.org/#/c/core/+/151306/2/sw/source/core/txtnode/txtedt.cxx@b601", "comments": [{"message": "And here.", "timestamp": "2023-05-03 10:16:45.000000000"}, {"message": "Done", "timestamp": "2023-05-03 11:47:04.000000000"}]}
{"thread_id": "de89d3d2_8f7bd888", "url": "https://gerrit.libreoffice.org/#/c/core/+/151306/2/sw/source/core/txtnode/txtedt.cxx@546", "comments": [{"message": "Same here.", "timestamp": "2023-05-03 10:16:45.000000000"}, {"message": "Done", "timestamp": "2023-05-03 11:47:04.000000000"}]}
{"thread_id": "64c2b3c0_ec1a5ca8", "url": "https://gerrit.libreoffice.org/#/c/core/+/151142/2/svl/source/misc/urihelper.cxx@762", "comments": [{"message": "Could you use startsWithIgnoreAsciiCase() here? See also Stephan's comment below, about a case-insensitive replace. Thanks.", "timestamp": "2023-05-02 06:45:44.000000000"}, {"message": "It is replaced.", "timestamp": "2023-05-02 18:35:49.000000000"}]}
{"thread_id": "afbe6476_d2214730", "url": "https://gerrit.libreoffice.org/#/c/core/+/151142/2/svl/source/misc/urihelper.cxx@805", "comments": [{"message": "You wouldn't need an `if` here if you used a replacement function that replaces the first N characters, rather than a search-and-replace function.  (Which already looked somewhat odd on the original commit, but I didn't want to distract you with nitpicking back then.)", "timestamp": "2023-04-28 06:13:10.000000000"}, {"message": "Done", "timestamp": "2023-05-03 05:54:54.000000000"}]}
{"thread_id": "302dd4a5_633208e7", "url": "https://gerrit.libreoffice.org/#/c/core/+/151243/1/sw/source/uibase/shells/textfld.cxx@b1076", "comments": [{"message": "This was an error. All is 3, Left is 1, Right is 2. So a right OR left only would have returned true, while the intention was that they BOTH needed to be true.", "timestamp": "2023-05-01 22:12:49.000000000"}]}
{"thread_id": "540d2b52_a29a0598", "url": "https://gerrit.libreoffice.org/#/c/core/+/150757/3/sc/source/ui/view/gridwin.cxx@356", "comments": [{"message": "Henry, could you confirm you tested with selection in RTL editing cells far away in terms of columns from the cell A1 like say BE1 ? (I don't have a build of 22-05 to test right now.) I'm a bit unsure about this coordinate transformation.", "timestamp": "2023-05-01 07:44:19.000000000"}, {"message": "Yes, I did it", "timestamp": "2023-05-01 12:53:56.000000000"}]}
{"thread_id": "ebcd8388_923511e4", "url": "https://gerrit.libreoffice.org/#/c/core/+/151173/1/sw/source/uibase/shells/textfld.cxx@1197", "comments": [{"message": "With a longer string, it no longer seems smart to \"Left(5), so I did it this way instead. Whether it is the safe way to deal with SwPaM I don't know, because nothing about SwPaM is intuitive or obvious. So this might be a wrong implementation...", "timestamp": "2023-04-28 23:25:10.000000000"}, {"message": "Who guarantees that at this point your cursor is at the start of the paragraph?\n\nI see that you do a SplitNode() above but that takes a cursor position, so that assumes that the cursor was at the end of the paragraph. Is that something we can assume here?", "timestamp": "2023-05-02 12:10:40.000000000"}, {"message": "Prior to the split node, there are Goto calls to go to the (start) of the footer, so the split should be a blank paragraph, followed by the split content. After the split node, it again calls // Go back to start of header/footer.\nSo yes, we are at the beginning of the footer on a blank paragraph. If for some reason that isn't happening, we want to know about that as a developer (although for the implementation itself it shouldn't matter).\n\nIf there is no split node, then it was empty anyway, and so still true that it is a blank paragraph.\n\nI'm a little surprised that your question wasn't highlight-covering the assert line below. AFAICS, the implementation doesn't depend on the cursor being at a particular spot. So perhaps I'm making an assumption that I shouldn't be making?", "timestamp": "2023-05-02 12:56:18.000000000"}, {"message": "Ah, what I forgot to realize is that once the node is split, the cursor is in the next node, so it'll be always at the start. Makes sense now.\n\n> I'm a little surprised that your question wasn't highlight-covering the assert line below. \n\nI considered why you need the position in the first place; but the assert is closely related to that, so it's just a matter of style where I put my silly question. :-)\n\nAll in all, I'm happy with this change. As you say, what to move and what to leave alone on modifying content is tricky, so I thought it's better to ask.", "timestamp": "2023-05-02 13:36:05.000000000"}]}
{"thread_id": "3af1f22f_7211fe98", "url": "https://gerrit.libreoffice.org/#/c/core/+/151216/2/svx/source/dialog/charmap.cxx@302", "comments": [{"message": "This assertion is unnecessary: you added the same assertion to isFavChar.", "timestamp": "2023-05-02 12:22:48.000000000"}]}
{"thread_id": "03720d4f_daee0196", "url": "https://gerrit.libreoffice.org/#/c/core/+/151148/2/sw/source/uibase/shells/textfld.cxx@1197", "comments": [{"message": "Surprisingly to me, the SwPaM (and the same thing would be true for an SwPosition) is not static. It changes when the Cursor inserts the field.\nMST indicated that these things change when something is inserted before the position. That makes some sense I guess.)\n\nIn my example, this was 21,0 and changed to 21,1 after InsertField.", "timestamp": "2023-04-28 13:10:06.000000000"}]}
{"thread_id": "2fd4091c_de966b66", "url": "https://gerrit.libreoffice.org/#/c/core/+/151148/2/sw/source/uibase/shells/textfld.cxx@1207", "comments": [{"message": "This works, but it seems unnecessary to me. I already know the starting point was zero. So how can I (properly and safely) force my PaM to the original starting point?", "timestamp": "2023-04-28 13:10:06.000000000"}, {"message": "mst said just go left 1.", "timestamp": "2023-04-28 15:38:52.000000000"}]}
{"thread_id": "ecd3f00f_8dc2965a", "url": "https://gerrit.libreoffice.org/#/c/core/+/151148/4/sw/source/uibase/shells/textfld.cxx@1205", "comments": [{"message": "It is worth doing a double-think about my PaM handling. MST recommended just doing a Left(1) here. [Note that in the next patch I change this up anyway...]\n\nPaM and friends really mess up my mind.", "timestamp": "2023-04-28 21:15:02.000000000"}, {"message": "Yes, that's reasonable.\n\nNote that a trap is that Left() won't do anything if you are at the start of the paragraph already. The DOCX import solves this with the following code:\n\nhttps://github.com/libreoffice/core/blob/424bdeda9fea09f0b48b5551baf872656845c7c3/writerfilter/source/dmapper/DomainMapper_Impl.cxx#L8298-L8317\n\ni.e. try to go left: if success, then you'll be able to go right later. If it failed, then you were at the start and you can go to start later.\n\nIn code that is not changed in the near future, it's good to always check if you're already at the paragraph start when you do Left().\n\nAnd given that such \"move there & the back\" blocks need to match, it is probably worth a comment.", "timestamp": "2023-05-02 11:48:14.000000000"}]}
{"thread_id": "21d01008_4a763482", "url": "https://gerrit.libreoffice.org/#/c/core/+/145210/9/basctl/source/basicide/baside2b.cxx@1532", "comments": [{"message": "Hossein: is there any reason not to static_cast nLine to sal_uInt16?", "timestamp": "2023-02-12 06:45:50.000000000"}, {"message": "No. `sal_uInt16` is suitable here. `ModulWindow::ToggleBreakPoint()` takes parameter of type `sal_uInt16`.", "timestamp": "2023-02-21 00:08:13.000000000"}, {"message": "Aman: can you update it?", "timestamp": "2023-02-27 12:41:22.000000000"}, {"message": "Done", "timestamp": "2023-05-02 07:58:42.000000000"}]}
{"thread_id": "755d854f_d074ddc7", "url": "https://gerrit.libreoffice.org/#/c/core/+/145210/10/basctl/source/basicide/baside2b.cxx@1477", "comments": [{"message": "`tools::Long` is better suited here. At least for now that you are keeping the variables of type `tools::Long`.", "timestamp": "2023-02-21 00:08:13.000000000"}, {"message": "Aman: can you update this as well?", "timestamp": "2023-02-27 14:41:14.000000000"}, {"message": "Imo, I would change it to tools::ULong, or why would you change it to tools:Long?", "timestamp": "2023-03-15 13:19:50.000000000"}, {"message": "There are cases where the `nY` variable will be negative. As this variable is for calculating the Y position of the breakpoint marker in BASIC IDE, rendering it on a specific line while you have scrolled down so that only part of that line is visible can create small negative value while the marker is partially visible. When the marker goes out of the screen, the value is also negative, but it is not visible.\nBecause of this, I think using a signed variable is better suited, even when the original variable was unsigned.\n\nYou can actually see the negative values in a debug session. Run BASIC IDE, put a breakpoint somewhere while having a long script, choose step over from toolbar, and then scroll so that the marker goes out of the screen.\n\nFrom a debug session with `tools::Long` for `nY`:\n```\nwarn:basicide:156615:156615:basctl/source/basicide/baside2b.cxx:1480: nY: 122\nwarn:basicide:156615:156615:basctl/source/basicide/baside2b.cxx:1480: nY: 122\nwarn:basicide:156615:156615:basctl/source/basicide/baside2b.cxx:1480: nY: 122\nwarn:basicide:156615:156615:basctl/source/basicide/baside2b.cxx:1480: nY: -61\nwarn:basicide:156615:156615:basctl/source/basicide/baside2b.cxx:1480: nY: -189\nwarn:basicide:156615:156615:basctl/source/basicide/baside2b.cxx:1480: nY: -189\nwarn:basicide:156615:156615:basctl/source/basicide/baside2b.cxx:1480: nY: -189\nwarn:basicide:156615:156615:basctl/source/basicide/baside2b.cxx:1480: nY: 0\n```\n\nAnd with `tools::ULong` for `nY`, which shows insanely large values, which are of course invalid:\n```\nwarn:basicide:158000:158000:basctl/source/basicide/baside2b.cxx:1480: nY: 122\nwarn:basicide:158000:158000:basctl/source/basicide/baside2b.cxx:1480: nY: 18446744073709551555\nwarn:basicide:158000:158000:basctl/source/basicide/baside2b.cxx:1480: nY: 18446744073709551427\nwarn:basicide:158000:158000:basctl/source/basicide/baside2b.cxx:1480: nY: 18446744073709551610\nwarn:basicide:158000:158000:basctl/source/basicide/baside2b.cxx:1480: nY: 122\n```\n`18446744073709551555` is essentially `2^64-61`, which is a negative value (`-61`) stored in a 64-bit unsigned integer.", "timestamp": "2023-04-29 00:14:10.000000000"}, {"message": "Done", "timestamp": "2023-05-02 07:58:42.000000000"}]}
{"thread_id": "549b79df_c3665478", "url": "https://gerrit.libreoffice.org/#/c/core/+/145210/14/basctl/source/basicide/baside2b.cxx@1534", "comments": [{"message": "Even better would be to remove the unnecessary cast completely.  That way, tools like `-fsanitize=implicit-signed-integer-truncation` would have a chance to catch errors where `nLine` is outside the `sal_uInt16` range.", "timestamp": "2023-05-02 11:45:24.000000000"}]}
{"thread_id": "6e7e3047_c171c934", "url": "https://gerrit.libreoffice.org/#/c/core/+/145210/8/filter/source/msfilter/msdffimp.cxx@6066", "comments": [{"message": "Looks like you were trying to restore this file to the way it was, but did not fully do it.", "timestamp": "2023-02-10 11:17:15.000000000"}, {"message": "Done", "timestamp": "2023-05-02 07:58:42.000000000"}]}
{"thread_id": "37453075_7158a4c7", "url": "https://gerrit.libreoffice.org/#/c/core/+/150897/2/sw/source/filter/html/htmlfldw.cxx@544", "comments": [{"message": "I think the SwView pointer should also be checked before use rWrt.m_pDoc->GetDocShell()->GetView()\n\nLet me know if STR crash for this is needed.", "timestamp": "2023-04-29 07:27:29.000000000"}, {"message": "Please add the new condition if you know of a case where we have a doc shell, but no views. The no-doc-shell case is what happens for clipboard documents. I'm not sure when we have a doc shell without a view. Thanks. :-)", "timestamp": "2023-05-02 06:33:43.000000000"}, {"message": "For me, the crash happens when attempting a cut or copy operation on a field. I noticed it when trying to copy a date field but it seems to happen with any field. Tested with x11 and gtk3. I can send a backtrace if needed.", "timestamp": "2023-05-02 07:07:28.000000000"}, {"message": "Interesting, a copy of a date field doesn't crash here for gtk3. In any case, sounds like a missing nullptr check, could you please add it now that you can reproduce this? Thanks.", "timestamp": "2023-05-02 07:18:47.000000000"}]}
{"thread_id": "d1e48611_f58482b3", "url": "https://gerrit.libreoffice.org/#/c/core/+/151005/1/sw/source/uibase/shells/textfld.cxx@1040", "comments": [{"message": "Nit: did you consider moving GetShellPtr() inside the lambda and then possibly not capturing pShell & rSh, now that you capture \"this\"? If that's possible, it feels more readable to me. Can be done in a follow-up change.", "timestamp": "2023-04-26 07:35:29.000000000"}]}
{"thread_id": "72a26bb3_d19c6196", "url": "https://gerrit.libreoffice.org/#/c/core/+/151005/2/sw/source/uibase/shells/textfld.cxx@1059", "comments": [{"message": "perhaps I should also copy Paris' API/SYNCHRON flags here. Unfortunately, the comments on SfxCallMode don't enlighten me even a little bit on the value/implications of any of them.\nI'm assuming RECORD has something to do with undo, but what? Not needed since we are in an undo recording, or definitely needed...", "timestamp": "2023-04-28 19:26:23.000000000"}, {"message": "RECORD is about the macro recorder.\n\nFor async/sync: I think the default behavior is that dispatches without parameters are async and with parameters are sync. So your usage here looks OK.", "timestamp": "2023-05-02 06:42:43.000000000"}]}
{"thread_id": "534a277f_dce366b5", "url": "https://gerrit.libreoffice.org/#/c/core/+/150832/1/avmedia/source/framework/soundhandler.cxx@b198", "comments": [{"message": "UNO_QUERY here. Why?\n\nI have a feeling, that there should be some specific implementation of XInterface, used for cases where such a query is necessary today, that should do all the required work itself - e.g., when it's asked to acquire/release, it should know that the actual call should be done in the other XInterface instance of the hierarchy.", "timestamp": "2023-04-23 17:25:03.000000000"}]}
{"thread_id": "b7608db4_d11cde37", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/2/avmedia/source/framework/soundhandler.cxx@b198", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:38:06.000000000"}]}
{"thread_id": "a9a90450_e65420ac", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/chart2/source/view/main/ChartView.cxx@b248", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "cc45e255_c1245dfb", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/dbaccess/source/core/dataaccess/documentdefinition.cxx@b200", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "56646267_56dfd633", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/embeddedobj/source/commonembedding/xfactory.cxx@b102", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "18ba65ee_8d77eda3", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/embeddedobj/source/commonembedding/xfactory.cxx@b152", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "41266778_4aa3884a", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/embeddedobj/source/commonembedding/xfactory.cxx@b191", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "f92188d5_7cac6f29", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/embeddedobj/source/commonembedding/xfactory.cxx@b242", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "7800381d_5d9a7ed3", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/embeddedobj/source/commonembedding/xfactory.cxx@b292", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "f280ae7a_770a98f4", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/embeddedobj/source/commonembedding/xfactory.cxx@b347", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "4e8bf353_100c2eb1", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/embeddedobj/source/commonembedding/xfactory.cxx@b392", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "d3c3ddc5_9ee99719", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/embeddedobj/source/msole/xolefactory.cxx@b68", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "55ae3d60_7d4bf835", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/embeddedobj/source/msole/xolefactory.cxx@b116", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "bc6bb801_8c02b6af", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/embeddedobj/source/msole/xolefactory.cxx@b148", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "053f7d30_d6f841fc", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/embeddedobj/source/msole/xolefactory.cxx@b179", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "180afae1_07bed5af", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/embeddedobj/source/msole/xolefactory.cxx@b214", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "bd1b90fc_62af5090", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/oleobjw.cxx@b1107", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "824c9c45_3fd64da1", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/oleobjw.cxx@b1507", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "9f411d2a_d5167cbe", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/oleobjw.cxx@b1513", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "77130f7b_3dda0365", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/oleobjw.cxx@b1522", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "35cc9c0a_5421cd55", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/servprov.cxx@b331", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "200b6a1f_7c8abb74", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/servprov.cxx@b337", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "1e1a5dfb_3a82cc3b", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/servprov.cxx@b347", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "9832c9e1_a4e3b6c8", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/servprov.cxx@b449", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "045de14d_2f2177eb", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/servprov.cxx@b455", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "6da0a26b_9d417dea", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/servprov.cxx@b465", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "bddf5b71_2fcc48c0", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/unoobjw.cxx@b212", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "b0a1b3a9_ded7ec9b", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/unoobjw.cxx@b1497", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "501b2dce_c85cc2fa", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/unoobjw.cxx@b1545", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "bd718b2f_65ad71f5", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/unoobjw.cxx@b1552", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "fa1a8a99_38581502", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/extensions/source/ole/unoobjw.cxx@b3061", "comments": [{"message": "UNO_QUERY is dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "3dd127a0_2643ee38", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/dispatch/closedispatcher.cxx@b206", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "060239bf_236a2195", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/dispatch/closedispatcher.cxx@b563", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "2abeef62_a748c908", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/dispatch/startmoduledispatcher.cxx@b138", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "a3b3aa9b_3f3478c9", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/jobs/job.cxx@b702", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "e9934a52_424bfe41", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/jobs/job.cxx@b794", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "e806116d_60bd6922", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/layoutmanager/layoutmanager.cxx@b1466", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "beb96d5d_055e8dd5", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/services/dispatchhelper.cxx@b130", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "a8a19eca_b5bde359", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/services/frame.cxx@b474", "comments": [{"message": "UNO_QUERY_THROW dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "da622ac9_fe2fb64e", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/uiconfiguration/moduleuiconfigurationmanager.cxx@b1422", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "3d57d653_30d977ab", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/uiconfiguration/uiconfigurationmanager.cxx@b1137", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "e5dcff14_1be94682", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/uielement/menubarmanager.cxx@b756", "comments": [{"message": "UNO_QUERY_THROW dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "3ea2a22b_32806c61", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/uielement/progressbarwrapper.cxx@b300", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "8f656a52_6fcaee25", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/uielement/toolbarmanager.cxx@b2085", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "e2231bc3_1d69e2ad", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/framework/source/uifactory/windowcontentfactorymanager.cxx@b143", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}, {"message": "Note that strictly speaking, in the case of UNO aggregation being used, this might result in a different object being pointed to by xHolder.", "timestamp": "2023-04-23 14:09:33.000000000"}, {"message": "This is exactly why I mark all these \"dropped\", in preparation to ask you and Stephan :-) I recalled that something like that already happened; yet I forgot the details, and also recalled that there was (?) some change that could affect this ...", "timestamp": "2023-04-23 15:20:22.000000000"}]}
{"thread_id": "06765f63_da75518f", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/package/source/zippackage/ZipPackageEntry.cxx@b81", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "6c7487ed_9c64752c", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/sd/source/console/PresenterAccessibility.cxx@b956", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "924c27b0_75a9e6e7", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/sd/source/ui/unoidl/unolayer.cxx@b342", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "9466e176_0244dbe6", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/sfx2/source/view/sfxbasecontroller.cxx@b849", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "87b2635f_6b773677", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/stoc/source/proxy_factory/proxyfac.cxx@b296", "comments": [{"message": "UNO_QUERY_THROW dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "1f340016_cb510ea2", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/svl/source/fsstor/fsfactory.cxx@b53", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "c94d5758_165bdcba", "url": "https://gerrit.libreoffice.org/#/c/core/+/150807/1/svl/source/fsstor/fsfactory.cxx@b131", "comments": [{"message": "UNO_QUERY dropped", "timestamp": "2023-04-23 10:00:25.000000000"}]}
{"thread_id": "434851a0_8cb392d9", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/2/basctl/source/basicide/baside3.cxx@699", "comments": [{"message": "The variable `nCount` is unused. Please remove it.", "timestamp": "2022-08-13 03:36:16.000000000"}, {"message": "Done", "timestamp": "2022-08-16 18:05:59.000000000"}]}
{"thread_id": "86ef4c19_d69efcf0", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/2/basctl/source/basicide/baside3.cxx@703", "comments": [{"message": "The `pFiles[i]` statement is no longer valid. Please fix it.", "timestamp": "2022-08-13 03:36:16.000000000"}, {"message": "I've tried to fix it with only loop const i.e., \"i\", but then it is giving me variable unused error for \"pFiles\" array.", "timestamp": "2022-08-16 18:05:59.000000000"}, {"message": "Trying the other approach now.", "timestamp": "2022-08-16 18:14:58.000000000"}, {"message": "As discussed, you should remove `pFiles` completely, and iterate over `aContentSeq`.", "timestamp": "2022-08-29 18:17:16.000000000"}, {"message": "Done", "timestamp": "2022-09-01 19:12:17.000000000"}]}
{"thread_id": "e9e5c170_8d247f87", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/2/basctl/source/basicide/baside3.cxx@737", "comments": [{"message": "The variable `nLocaleCount` is also unused. Please remove it.", "timestamp": "2022-08-13 03:36:16.000000000"}, {"message": "Done", "timestamp": "2022-08-16 18:05:59.000000000"}]}
{"thread_id": "8097e7de_c82608c0", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/2/basctl/source/basicide/baside3.cxx@765", "comments": [{"message": "This variable is not needed anymore.", "timestamp": "2022-08-29 18:17:16.000000000"}, {"message": "Done", "timestamp": "2022-09-01 19:12:17.000000000"}]}
{"thread_id": "1f6e3f91_e73864c6", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/2/basctl/source/basicide/baside3.cxx@766", "comments": [{"message": "Also, this variable is not needed.", "timestamp": "2022-08-29 18:17:16.000000000"}, {"message": "Done", "timestamp": "2022-09-01 19:12:17.000000000"}]}
{"thread_id": "a397f0e3_0249dfed", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/3/basctl/source/basicide/baside3.cxx@701", "comments": [{"message": "Here and below: no need to copy loop variable to some other temporary variable.", "timestamp": "2022-09-02 08:28:51.000000000"}, {"message": "But if we use range based loop, this is the standard approach.", "timestamp": "2022-09-02 15:19:21.000000000"}, {"message": "TBH I haven't heard of such approach.\nIt makes sense if for example we have to change value without changing element in container. Otherwise it's redundant and could be expensive if we create copy of object.", "timestamp": "2022-09-02 18:24:41.000000000"}, {"message": "@Radhey:\nArkadiy is right. Please remove those extra variables, and use the variable name that start with `a` (for OUStrings) or `r` (for references).\n\nPlease read this post carefully, specially the part that discusses the variable names:\nHow to use Gerrit code review effectively\nhttps://dev.blog.documentfoundation.org/2022/04/11/how-to-use-gerrit-code-review-effectively/", "timestamp": "2022-09-02 20:59:22.000000000"}, {"message": "Done", "timestamp": "2023-01-17 09:01:39.000000000"}]}
{"thread_id": "2be7438f_f5bd83ec", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/3/basctl/source/basicide/baside3.cxx@736", "comments": [{"message": "Please use `rLocale` name above, and forget about `iLocale`.", "timestamp": "2022-09-02 20:59:22.000000000"}, {"message": "Done", "timestamp": "2023-01-17 09:01:39.000000000"}]}
{"thread_id": "cb575d3a_f26f236d", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/3/basctl/source/basicide/baside3.cxx@759", "comments": [{"message": "Here use `rFirstLocale` and forget `aFirstSeq`.", "timestamp": "2022-09-02 20:59:22.000000000"}, {"message": "Done", "timestamp": "2023-01-17 09:01:39.000000000"}]}
{"thread_id": "c32b14eb_9d968bdb", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/3/basctl/source/basicide/baside3.cxx@764", "comments": [{"message": "Also here. Use `rSecondLocale` and forget `iSecond`", "timestamp": "2022-09-02 20:59:22.000000000"}, {"message": "Done", "timestamp": "2023-01-17 09:01:39.000000000"}]}
{"thread_id": "d0d12f5a_231bf606", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/3/basctl/source/basicide/baside3.cxx@988", "comments": [{"message": "Also here.", "timestamp": "2022-09-02 20:59:22.000000000"}, {"message": "Done", "timestamp": "2023-01-17 09:01:39.000000000"}]}
{"thread_id": "b907c04c_d0cfadc8", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/3/basctl/source/basicide/baside3.cxx@1007", "comments": [{"message": "And here.", "timestamp": "2022-09-02 20:59:22.000000000"}, {"message": "Done", "timestamp": "2023-01-17 09:01:39.000000000"}]}
{"thread_id": "e8b80b08_81d814da", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/5/basctl/source/basicide/baside3.cxx@697", "comments": [{"message": "Please use `const OUString& aCompleteName`, because you don't want to have a copy of the variable.", "timestamp": "2023-01-17 14:20:36.000000000"}, {"message": "Done", "timestamp": "2023-01-17 14:52:00.000000000"}]}
{"thread_id": "0a08484f_a8566439", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/5/basctl/source/basicide/baside3.cxx@980", "comments": [{"message": "Please use `const auto& aTmpLocale`.", "timestamp": "2023-01-17 14:20:36.000000000"}, {"message": "Done", "timestamp": "2023-01-17 14:52:00.000000000"}, {"message": "Can I use \"const lang::Locale& aTmpLocale\" instead?", "timestamp": "2023-01-17 15:35:03.000000000"}]}
{"thread_id": "96091253_1df52b8a", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/5/basctl/source/basicide/baside3.cxx@998", "comments": [{"message": "Also here.", "timestamp": "2023-01-17 14:20:36.000000000"}, {"message": "Done", "timestamp": "2023-01-17 14:52:00.000000000"}]}
{"thread_id": "06a85f54_0951cb7c", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/7/basctl/source/basicide/baside3.cxx@755", "comments": [{"message": "Whole function could be replaced with `std::copy_if`.\nSince it is used only once we can inline it.", "timestamp": "2023-01-17 18:45:00.000000000"}, {"message": "I have implemented the proposed changes, but still there might be some syntax errors in this! Will correct it too if jenkins identifies any. Also, do guide me if I need some more insights on further optimising it. Thanks!", "timestamp": "2023-01-17 22:07:49.000000000"}]}
{"thread_id": "8f1db106_de382448", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/7/basctl/source/basicide/baside3.cxx@758", "comments": [{"message": "This loop could be replaced with `std::any_of`.", "timestamp": "2023-01-17 18:45:00.000000000"}, {"message": "Done", "timestamp": "2023-01-17 22:07:49.000000000"}]}
{"thread_id": "133be5dc_4f70a168", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/7/basctl/source/basicide/baside3.cxx@979", "comments": [{"message": "This loop could be replaced with `std::any_of`.", "timestamp": "2023-01-17 18:45:00.000000000"}, {"message": "Done", "timestamp": "2023-01-17 22:07:49.000000000"}]}
{"thread_id": "9c01318f_b8722199", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/8/basctl/source/basicide/baside3.cxx@755", "comments": [{"message": "`bAlsoContainedInSecondSeq` is unused.", "timestamp": "2023-01-18 18:24:42.000000000"}, {"message": "Done", "timestamp": "2023-01-18 19:14:15.000000000"}]}
{"thread_id": "d818fc75_dc4cabf6", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/8/basctl/source/basicide/baside3.cxx@757", "comments": [{"message": "Unused.", "timestamp": "2023-01-18 18:24:42.000000000"}, {"message": "Done", "timestamp": "2023-01-18 19:14:15.000000000"}]}
{"thread_id": "69ac0809_efef4eac", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/8/basctl/source/basicide/baside3.cxx@757", "comments": [{"message": "`[&aSecondSeq]`", "timestamp": "2023-01-18 18:24:42.000000000"}, {"message": "Done", "timestamp": "2023-01-18 19:14:15.000000000"}]}
{"thread_id": "7c69ce00_b7b47dce", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/8/basctl/source/basicide/baside3.cxx@757", "comments": [{"message": "`aFirstSeq`", "timestamp": "2023-01-18 18:24:42.000000000"}, {"message": "Done", "timestamp": "2023-01-18 19:14:15.000000000"}]}
{"thread_id": "340deaae_61240eb6", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/8/basctl/source/basicide/baside3.cxx@757", "comments": [{"message": "`std::back_inserter(avRet)`", "timestamp": "2023-01-18 18:24:42.000000000"}, {"message": "Done", "timestamp": "2023-01-18 19:14:15.000000000"}]}
{"thread_id": "c9b06dad_9e437812", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/8/basctl/source/basicide/baside3.cxx@759", "comments": [{"message": "Simply `return std::none_of(...)`.", "timestamp": "2023-01-18 18:24:42.000000000"}, {"message": "Done", "timestamp": "2023-01-18 19:14:15.000000000"}]}
{"thread_id": "6d765461_5af2b384", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/8/basctl/source/basicide/baside3.cxx@759", "comments": [{"message": "`[&rFirstLocale]`", "timestamp": "2023-01-18 18:24:42.000000000"}, {"message": "Done", "timestamp": "2023-01-18 19:14:15.000000000"}]}
{"thread_id": "86517a63_ad34cd50", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/8/basctl/source/basicide/baside3.cxx@759", "comments": [{"message": "`none_of`", "timestamp": "2023-01-18 18:24:42.000000000"}, {"message": "Done", "timestamp": "2023-01-18 19:14:15.000000000"}]}
{"thread_id": "d5353358_14e4ff4e", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/8/basctl/source/basicide/baside3.cxx@765", "comments": [{"message": "No need to resize.", "timestamp": "2023-01-18 18:24:42.000000000"}, {"message": "Done", "timestamp": "2023-01-18 19:14:15.000000000"}]}
{"thread_id": "8b16191f_3a4aae3d", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/8/basctl/source/basicide/baside3.cxx@769", "comments": [{"message": "Please remove new line.", "timestamp": "2023-01-18 18:24:42.000000000"}, {"message": "Done", "timestamp": "2023-01-18 19:14:15.000000000"}]}
{"thread_id": "d86e321a_2171741b", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/8/basctl/source/basicide/baside3.cxx@975", "comments": [{"message": "`[&aImportDefaultLocale]`", "timestamp": "2023-01-18 18:24:42.000000000"}, {"message": "Done", "timestamp": "2023-01-18 19:14:15.000000000"}]}
{"thread_id": "8e457d4d_2372898e", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/8/basctl/source/basicide/baside3.cxx@978", "comments": [{"message": "Nothing to break now, remove it.", "timestamp": "2023-01-18 18:24:42.000000000"}, {"message": "Done", "timestamp": "2023-01-18 19:14:15.000000000"}]}
{"thread_id": "9e137f33_f9adaebc", "url": "https://gerrit.libreoffice.org/#/c/core/+/138157/13/basctl/source/basicide/baside3.cxx@697", "comments": [{"message": "Please use `rCompleteName`, as it is a reference.", "timestamp": "2023-03-07 11:49:58.000000000"}, {"message": "Done", "timestamp": "2023-04-25 12:50:30.000000000"}]}
{"thread_id": "321b8ed3_39039a5a", "url": "https://gerrit.libreoffice.org/#/c/core/+/150249/4/sd/source/ui/unoidl/unomodel.cxx@2312", "comments": [{"message": "As discussed \"offline\", this will be changed in the future to match Writer (\";<name of color scheme>\" instead).", "timestamp": "2023-04-28 08:07:37.000000000"}]}
{"thread_id": "2c5eaa6e_62b64c36", "url": "https://gerrit.libreoffice.org/#/c/core/+/150546/21/dbaccess/source/ui/dlg/DbAdminImpl.cxx@529", "comments": [{"message": "I'm not immediately sure what this achieves. When is this condition false, and why is it correct to do nothing (ignore what the user entered into the hostname, dbhname, port and connstring fields) when that condition is false?", "timestamp": "2023-04-27 07:27:56.000000000"}, {"message": "its a mistake on my part i was just checking some stuff the if statement is not necessary i will remove it.", "timestamp": "2023-04-27 08:17:46.000000000"}, {"message": "Done", "timestamp": "2023-04-27 09:30:03.000000000"}]}
{"thread_id": "4da5b2ec_b923cef3", "url": "https://gerrit.libreoffice.org/#/c/core/+/150546/19/dbaccess/source/ui/dlg/dbwizsetup.cxx@259", "comments": [{"message": "white-space only change; remove than hunk from the patch.", "timestamp": "2023-04-26 20:11:22.000000000"}, {"message": "Done", "timestamp": "2023-04-27 07:14:43.000000000"}]}
{"thread_id": "d3ee7568_5cddec0f", "url": "https://gerrit.libreoffice.org/#/c/core/+/151102/1/drawinglayer/source/tools/emfphelperdata.cxx@b1273", "comments": [{"message": "This type was incorrect. It should be ReadUInt32 (according to MS-EMFPLUS documentation)", "timestamp": "2023-04-27 13:29:44.000000000"}]}
{"thread_id": "58aad6a9_3a26e78c", "url": "https://gerrit.libreoffice.org/#/c/core/+/133617/8/sw/source/core/doc/DocumentLinksAdministrationManager.cxx@464", "comments": [{"message": "This creates a dangling reference: the next string assigns sItem to another string, so the string_view points to nowhere.\n\nCan it be detected somehow?", "timestamp": "2023-04-27 11:15:33.000000000"}, {"message": "This is addressed in https://gerrit.libreoffice.org/c/core/+/151113.", "timestamp": "2023-04-27 12:04:43.000000000"}, {"message": "Weird, I thought one of the compilers already detected this.", "timestamp": "2023-04-27 12:42:27.000000000"}]}
{"thread_id": "2e9fc661_a3c38df7", "url": "https://gerrit.libreoffice.org/#/c/core/+/150344/2/sc/source/filter/xml/XMLExportDataPilot.cxx@436", "comments": [{"message": "The logic seems a bit complicated to me. In any case, the XML_NAMESPACE_TABLE value is written. So maybe avoid the conditional nNamespace value, and instead, define the dummy value for XML_NAMESPACE_TABLE in lines 421-423, and write that normally, as before; and then, if COMPACT_LAYOUT, write additional XML_NAMESPACE_LO_EXT actual value.\n\nAlso, the XML_NAMESPACE_TABLE value is not completely dummy: it will be used in older versions, so it should be a reasonable default (so instead of \"dummy\", please use \"fallback\" term in comment \ud83d\ude0a).", "timestamp": "2023-04-18 15:40:39.000000000"}, {"message": "Thanks! I'd keep a comment in the \"dummy\" case, like \"// a fallback value allowed by ODF 1.3\" or some such, but not a problem.", "timestamp": "2023-04-19 07:33:53.000000000"}]}
{"thread_id": "fc7ed7b9_4a6be117", "url": "https://gerrit.libreoffice.org/#/c/core/+/150344/2/sc/source/filter/xml/xmldpimp.cxx@1202", "comments": [{"message": "This order dependency is fragile. Who knows how the XML parsing changes tomorrow. Maybe just add a boolean flag that is set when XML_ELEMENT( LO_EXT, XML_LAYOUT_MODE ) is processed, and is checked when XML_ELEMENT( TABLE, XML_LAYOUT_MODE ) is processed. Or simply check that aInfo.LayoutMode is not XML_COMPACT_LAYOUT before setting a new value.", "timestamp": "2023-04-18 15:40:39.000000000"}, {"message": "Done", "timestamp": "2023-04-19 07:33:53.000000000"}]}
{"thread_id": "d222d668_7bdd6994", "url": "https://gerrit.libreoffice.org/#/c/core/+/150452/14/sw/source/core/undo/rolbck.cxx@938", "comments": [{"message": "Looks like this breaks CppunitTest_sw_uiwriter3 (<https://ci.libreoffice.org//job/lo_ubsan/2756/>),\n\n  /sw/source/core/undo/rolbck.cxx:938:46: runtime error: downcast of address 0x61300041fd00 which does not point to an object of type 'SwFlyFrameFormat'\n  0x61300041fd00: note: object is of type 'SwDrawFrameFormat'\n   00 00 00 00  70 83 cf 09 25 7f 00 00  00 83 47 00 30 61 00 00  40 e5 43 00 30 61 00 00  80 66 5d 00\n                ^~~~~~~~~~~~~~~~~~~~~~~\n                vptr for 'SwDrawFrameFormat'\n      #0 0x7f24fca9c5b9 in SwHistoryChangeFlyAnchor::SetInDoc(SwDoc*, bool) /sw/source/core/undo/rolbck.cxx:938:46\n      #1 0x7f24fca880f3 in SwHistory::Rollback(SwDoc*, unsigned short) /sw/source/core/undo/rolbck.cxx:1208:15\n      #2 0x7f24fcb47832 in SwUndoDelete::UndoImpl(sw::UndoRedoContext&) /sw/source/core/undo/undel.cxx:1031:33\n      #3 0x7f24fcb703c2 in SwUndo::UndoWithContext(SfxUndoContext&) /sw/source/core/undo/undobj.cxx:225:5\n      #4 0x7f2543b8b57c in SfxUndoManager::ImplUndo(SfxUndoContext*) /svl/source/undo/undo.cxx:712:22\n      #5 0x7f2543b8c4f8 in SfxUndoManager::UndoWithContext(SfxUndoContext&) /svl/source/undo/undo.cxx:664:12\n      #6 0x7f24fca6a074 in sw::UndoManager::impl_DoUndoRedo(sw::UndoManager::UndoOrRedoType, unsigned long) /sw/source/core/undo/docundo.cxx:696:32\n      #7 0x7f24fca6b38f in sw::UndoManager::UndoWithOffset(unsigned long) /sw/source/core/undo/docundo.cxx:731:16\n      #8 0x7f24fa830b18 in SwEditShell::Undo(unsigned short, unsigned short) /sw/source/core/edit/edundo.cxx:141:57\n      #9 0x7f250088f448 in SwWrtShell::Do(SwWrtShell::DoType, unsigned short, unsigned short) /sw/source/uibase/wrtsh/wrtundo.cxx:45:26\n      #10 0x7f24ff7f16e2 in SwBaseShell::ExecUndo(SfxRequest&) /sw/source/uibase/shells/basesh.cxx:651:27\n      #11 0x7f24ff7eea14 in SfxStubSwBaseShellExecUndo(SfxShell*, SfxRequest&) /workdir/SdiTarget/sw/sdi/swslots.hxx:2203:1\n      #12 0x7f2523fbc059 in SfxDispatcher::Call_Impl(SfxShell&, SfxSlot const&, SfxRequest&, bool) /sfx2/source/control/dispatch.cxx:254:9\n      #13 0x7f2523fd1ced in SfxDispatcher::Execute_(SfxShell&, SfxSlot const&, SfxRequest&, SfxCallMode) /sfx2/source/control/dispatch.cxx:753:9\n      #14 0x7f2523f61333 in SfxBindings::Execute_Impl(SfxRequest&, SfxSlot const*, SfxShell*) /sfx2/source/control/bindings.cxx:1060:22\n      #15 0x7f252437496b in SfxDispatchController_Impl::dispatch(com::sun::star::util::URL const&, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&, com::sun::star::uno::Reference<com::sun::star::frame::XDispatchResultListener> const&) /sfx2/source/control/unoctitm.cxx:688:53\n      #16 0x7f2524377211 in SfxOfficeDispatch::dispatchWithNotification(com::sun::star::util::URL const&, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&, com::sun::star::uno::Reference<com::sun::star::frame::XDispatchResultListener> const&) /sfx2/source/control/unoctitm.cxx:266:16\n      #17 0x7f24cad28dd6 in framework::DispatchHelper::executeDispatch(com::sun::star::uno::Reference<com::sun::star::frame::XDispatch> const&, com::sun::star::util::URL const&, bool, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&) /framework/source/services/dispatchhelper.cxx:163:30\n      #18 0x7f24cad27cb2 in framework::DispatchHelper::executeDispatch(com::sun::star::uno::Reference<com::sun::star::frame::XDispatchProvider> const&, rtl::OUString const&, rtl::OUString const&, int, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&) /framework/source/services/dispatchhelper.cxx:120:16\n      #19 0x7f24cad29684 in non-virtual thunk to framework::DispatchHelper::executeDispatch(com::sun::star::uno::Reference<com::sun::star::frame::XDispatchProvider> const&, rtl::OUString const&, rtl::OUString const&, int, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&) /framework/source/services/dispatchhelper.cxx\n      #20 0x7f24e91d386d in unotest::MacrosTest::dispatchCommand(com::sun::star::uno::Reference<com::sun::star::lang::XComponent> const&, rtl::OUString const&, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&) /unotest/source/cpp/macros_test.cxx:94:33\n      #21 0x7f25319b2012 in testTdf132321::TestBody() /sw/qa/extras/uiwriter/uiwriter3.cxx:982:5", "timestamp": "2023-04-25 08:03:07.000000000"}, {"message": "Bj\u00f6rn, will you find time in the near future to address that issue, or should we revert this change for now to get the ASan/UBSan bot unblocked?", "timestamp": "2023-04-26 07:51:21.000000000"}, {"message": "> or should we revert this change for now to get the ASan/UBSan bot unblocked?\n\nDone that now, <https://gerrit.libreoffice.org/c/core/+/151027> \"Revert 'introduce sw::SpzFrameFormat ...'\"", "timestamp": "2023-04-27 06:00:28.000000000"}]}
{"thread_id": "14f66194_ce88c303", "url": "https://gerrit.libreoffice.org/#/c/core/+/150710/1/sfx2/source/doc/iframe.cxx@b180", "comments": [{"message": "I think at least in theory isScriptURLAllowed can also be used to filter out URLs that are not vnd.sun.star.script: (or macro:), so dropping this code would break that.  But not sure <https://git.libreoffice.org/core/+/288c0920a8475f9f2c537212e04aa7649192ad8c%5E!/> \"Check iframe target for allowed document URLs\" had that \"feature\" in mind when adding this code here.", "timestamp": "2023-04-21 09:14:18.000000000"}, {"message": "Samuel is cc'ed here so maybe can help with that but I feel the intent was just to cover the possibility that a script url was passed here, and it's an oversight that all urls are submitted to isScriptURLAllowed and it wasn't limited to scripts/macros. And so rejecting all macros and scripts as a target for IFrames, but allowing other urls through that might have been rejected by isScriptURLAllowed is a bug fix for that :-)", "timestamp": "2023-04-21 09:45:53.000000000"}, {"message": "> I have a feeling that the macro/script target possibility of these IFrames (Floating Frames) is by chance rather than by design\n\nI had the same feeling when looking at this code.\n\n> I feel the intent was just to cover the possibility that a script url was passed here, and it's an oversight that all urls are submitted to isScriptURLAllowed and it wasn't limited to scripts/macros.\n\nYes, this isScriptURLAllowed was just to block unwanted code in that iframe. Removing the possibility to specify macros as iframe target, makes the isScriptURLAllowed superfluous.", "timestamp": "2023-04-26 10:12:15.000000000"}, {"message": "> Yes, this isScriptURLAllowed was just to block unwanted code in that iframe. Removing the possibility to specify macros as iframe target, makes the isScriptURLAllowed superfluous.\n\n(so isScriptURLAllowed can also be turned back into a private member of SfxEvents_Impl, in this or a follow-up commit)", "timestamp": "2023-04-26 10:15:24.000000000"}, {"message": "can do it in this commit then, will upload with that added", "timestamp": "2023-04-26 11:33:22.000000000"}]}
{"thread_id": "deb48b6c_63f2060d", "url": "https://gerrit.libreoffice.org/#/c/core/+/150899/2/sc/source/core/data/colorscale.cxx@417", "comments": [{"message": "Is it sure? Different colors with the same type will be equal.", "timestamp": "2023-04-25 14:23:29.000000000"}, {"message": "Yes, this is not really sure!:) Therefore different colors with the same value will be not equal either.", "timestamp": "2023-04-26 07:30:39.000000000"}]}
{"thread_id": "782d1a57_ca69a135", "url": "https://gerrit.libreoffice.org/#/c/core/+/150745/1/sw/qa/extras/layout/layout2.cxx@422", "comments": [{"message": "These queryThrow calls that I introduced in master toward 7.6 won't work here; let me fix this...", "timestamp": "2023-04-21 08:14:12.000000000"}, {"message": "I noticed that too. I've already fixed it!", "timestamp": "2023-04-21 08:16:51.000000000"}, {"message": "Great - thanks!", "timestamp": "2023-04-21 08:17:56.000000000"}]}
{"thread_id": "0d810465_786abbf6", "url": "https://gerrit.libreoffice.org/#/c/core/+/150674/1/sc/qa/unit/subsequent_export_test2.cxx@1241", "comments": [{"message": "should you just compare Color types instead of Any ?", "timestamp": "2023-04-20 10:13:55.000000000"}, {"message": "Done", "timestamp": "2023-04-25 13:04:16.000000000"}]}
{"thread_id": "519ddeba_77ef164e", "url": "https://gerrit.libreoffice.org/#/c/core/+/150674/2/sc/qa/unit/subsequent_export_test2.cxx@1241", "comments": [{"message": "you should use something like\n\nColor nColor;\nxShapeProps->getPropertyValue(\"FillColor\") >>= nColor;\nCPPUNIT_ASSERT_EQUAL(Color(0x90cf47), nColor);", "timestamp": "2023-04-20 14:55:22.000000000"}, {"message": "Done", "timestamp": "2023-04-25 13:04:16.000000000"}]}
{"thread_id": "2677da6f_41124490", "url": "https://gerrit.libreoffice.org/#/c/core/+/150432/3/sc/source/ui/dbgui/tpsort.cxx@498", "comments": [{"message": "Here I would respect the coding standards like for aStrUndefined.", "timestamp": "2023-04-18 12:25:59.000000000"}, {"message": "Done", "timestamp": "2023-04-19 13:44:20.000000000"}]}
{"thread_id": "7ec475d5_0009dcb1", "url": "https://gerrit.libreoffice.org/#/c/core/+/150432/4/sc/source/ui/dbgui/tpsort.cxx@498", "comments": [{"message": "There is still a space between", "timestamp": "2023-04-19 13:46:32.000000000"}, {"message": "Done", "timestamp": "2023-04-19 16:55:34.000000000"}]}
{"thread_id": "fb7cf207_e9b088cd", "url": "https://gerrit.libreoffice.org/#/c/core/+/150432/5/sc/source/ui/dbgui/tpsort.cxx@692", "comments": [{"message": "I would switch the statements in the if condition. So you can write\n \n    if (aSortData.byRow)\n    \nwithout any == false ...", "timestamp": "2023-04-19 14:01:03.000000000"}, {"message": "Done", "timestamp": "2023-04-19 16:55:34.000000000"}]}
{"thread_id": "830e867e_b9ddc39e", "url": "https://gerrit.libreoffice.org/#/c/core/+/150432/6/sc/source/ui/dbgui/tpsort.cxx@696", "comments": [{"message": "The curly bracket should be in the next line. You can always user STRG+K, STRG+F to format the code according to the clang format.", "timestamp": "2023-04-19 17:03:34.000000000"}, {"message": "Done", "timestamp": "2023-04-20 09:26:05.000000000"}]}
{"thread_id": "63c7488f_7aa3bf64", "url": "https://gerrit.libreoffice.org/#/c/core/+/150432/7/sc/source/ui/dbgui/tpsort.cxx@692", "comments": [{"message": "Curly bracket in the new line", "timestamp": "2023-04-20 12:28:56.000000000"}, {"message": "Done", "timestamp": "2023-04-20 20:40:00.000000000"}]}
{"thread_id": "51b73be5_14a74757", "url": "https://gerrit.libreoffice.org/#/c/core/+/149939/3/sal/rtl/math.cxx@800", "comments": [{"message": "On one side, if you make changes here, you should also symmetrically change rtl_math_acosh.\n\nOn the other side, as the unit test error shows, it results in an unexpected failure; and as e.g. WolframAlpha tells [1], asinh(1.23) is really expected to be 1.0350378961923076 up to 16th digit after dot. So this change didin't improve accuracy (maybe because of inaccuracies in the other components of the formula).\n\nAnd the most important is: fX here (in line 800 and in line 803) is guaranteed to be greater than 0, and smaller than 12 500 000 - so its square is smaller than 156250000000000, and no overflow or precision loss can happen. So in this specific case, it seems that there's no need in changing this function.\n\n[1] https://www.wolframalpha.com/input?i=asinh%281.23%29", "timestamp": "2023-04-04 06:36:45.000000000"}, {"message": "Ok - revert.", "timestamp": "2023-04-12 20:59:28.000000000"}, {"message": "Done", "timestamp": "2023-04-23 16:01:55.000000000"}]}
{"thread_id": "dc9ea014_33af9900", "url": "https://gerrit.libreoffice.org/#/c/core/+/149939/4/sal/rtl/math.cxx@803", "comments": [{"message": "Please revert also the whitespace changes here, so that there is no accidental changes.", "timestamp": "2023-04-14 16:23:36.000000000"}, {"message": "Done", "timestamp": "2023-04-23 16:01:55.000000000"}]}
{"thread_id": "6bb15f9e_6a8a065b", "url": "https://gerrit.libreoffice.org/#/c/core/+/149939/5/sal/rtl/math.cxx@800", "comments": [{"message": "There's still a space removed unnecessarily.", "timestamp": "2023-04-16 10:02:14.000000000"}, {"message": "Done", "timestamp": "2023-04-23 16:01:55.000000000"}]}
{"thread_id": "5ca55bd4_f9bc5e83", "url": "https://gerrit.libreoffice.org/#/c/core/+/149939/1/vcl/unx/generic/app/saldisp.cxx@85", "comments": [{"message": "The static_cast here is unnecessary: std::hypot will do it implicitly.", "timestamp": "2023-04-02 19:44:31.000000000"}, {"message": "Done", "timestamp": "2023-04-03 21:58:37.000000000"}, {"message": "Done", "timestamp": "2023-04-15 01:10:52.000000000"}]}
{"thread_id": "fc697366_c883702b", "url": "https://gerrit.libreoffice.org/#/c/core/+/149939/3/vcl/unx/generic/app/saldisp.cxx@84", "comments": [{"message": "`Hypothenuse` could be replaced with direct `std::hypot` call.", "timestamp": "2023-04-04 17:55:25.000000000"}, {"message": "This function is only used during the activation of the macro \"DBG_UTIL\" and probably only in one place ?! So replace with std::hypot.", "timestamp": "2023-04-12 20:59:28.000000000"}, {"message": "Done", "timestamp": "2023-04-12 21:38:27.000000000"}]}
{"thread_id": "c8593a78_ceeb9237", "url": "https://gerrit.libreoffice.org/#/c/core/+/150817/1/sw/source/uibase/dochdl/swdtflvr.cxx@3983", "comments": [{"message": "don't you normally add an assert in this situation (cannot happen) ?", "timestamp": "2023-04-23 10:43:26.000000000"}, {"message": "yeah, when I'm convinced it won't happen, but I'm unsure here so went with the weaker case. No problem to upgrade to assert if someone is more sure of that.", "timestamp": "2023-04-23 12:12:25.000000000"}]}
{"thread_id": "d894d5fc_0db53c75", "url": "https://gerrit.libreoffice.org/#/c/core/+/149466/5/sw/source/core/layout/tabfrm.cxx@2932", "comments": [{"message": "Yes, this is redundant, but I think it helps the code reading, so I left it.", "timestamp": "2023-04-22 12:08:49.000000000"}]}
{"thread_id": "627a81a5_c8e32772", "url": "https://gerrit.libreoffice.org/#/c/core/+/150749/2/lingucomponent/source/numbertext/numbertext.cxx@126", "comments": [{"message": "This getStr could possibly also be caught - std::string has an *explicit* ctor taking string_view, so aInput.getStr() should become std::string(aInput)", "timestamp": "2023-04-21 13:17:07.000000000"}, {"message": "I'll take a look at that. At the moment the plugin is not very smart, I am just listing viable candidates rather than checking if the call has both a 'const char*' and a 'std::string_view' variant", "timestamp": "2023-04-22 08:24:50.000000000"}]}
{"thread_id": "34132ba2_a434ac54", "url": "https://gerrit.libreoffice.org/#/c/core/+/150071/2/sw/source/filter/ww8/docxattributeoutput.cxx@963", "comments": [{"message": "Why not change this to bRet and put it at the top of the function. Can also rewrite this function to do early returns - easier to read.", "timestamp": "2023-04-10 17:11:03.000000000"}, {"message": "Done", "timestamp": "2023-04-21 20:35:52.000000000"}]}
{"thread_id": "a46088e9_ec23627a", "url": "https://gerrit.libreoffice.org/#/c/core/+/150650/1/include/svx/zoomctrl.hxx@55", "comments": [{"message": "You should override a virtual method of StatusbarController, not to add a non-virtual method. And then your virtual method will call the inherited one.", "timestamp": "2023-04-19 19:06:06.000000000"}, {"message": "Done.", "timestamp": "2023-04-19 20:46:06.000000000"}]}
{"thread_id": "eceddc4a_3ed3e983", "url": "https://gerrit.libreoffice.org/#/c/core/+/150650/1/svx/source/stbctrls/zoomctrl.cxx@214", "comments": [{"message": "First of all, call the inherited method that you override; and then, only check the necessary things here.", "timestamp": "2023-04-19 18:32:07.000000000"}, {"message": "The inherited method is already called in StatusBarManager::CreateControllers.", "timestamp": "2023-04-19 18:53:30.000000000"}, {"message": "Ah, I missed that you didn't properly override a virtual method.", "timestamp": "2023-04-19 19:06:06.000000000"}]}
{"thread_id": "34bca4bd_92bfafd2", "url": "https://gerrit.libreoffice.org/#/c/core/+/150650/1/svx/source/stbctrls/zoomctrl.cxx@215", "comments": [{"message": "This block shows that you haven't pulled recently. Please pull, and check that this kind of code had been simplified.", "timestamp": "2023-04-19 18:32:07.000000000"}, {"message": "I'll change it.", "timestamp": "2023-04-19 18:53:30.000000000"}]}
{"thread_id": "64e171ee_74a1e8eb", "url": "https://gerrit.libreoffice.org/#/c/core/+/150650/1/svx/source/stbctrls/zoomctrl.cxx@238", "comments": [{"message": "In principle, you only need the frame here, and use identify here, and then you can avoid the change in StatusBarManager::CreateControllers.", "timestamp": "2023-04-19 18:32:07.000000000"}, {"message": "It is true that changes can be avoided in StatusBarManager::CreateControllers", "timestamp": "2023-04-19 18:53:30.000000000"}, {"message": "The change is now avoided.", "timestamp": "2023-04-19 20:46:57.000000000"}]}
{"thread_id": "3d8566ce_725035c9", "url": "https://gerrit.libreoffice.org/#/c/core/+/150070/3/sw/source/uibase/shells/textsh1.cxx@b1801", "comments": [{"message": "Could you please explain why the changes in this file are needed? The commit message just states that you want to get this uno command to work in the protected case, but I assume that changes to the .sdi file only are enough to have that. Thanks.", "timestamp": "2023-04-12 07:17:46.000000000"}, {"message": "Hey, thanks for going over this change.\n\nTo be completely honest, I don't remember it all perfectly right now, but I believe if this file was unchanged, the command wouldn't show up in the correct cases, and also would open the link instead of copying it (or at least in some cases?).", "timestamp": "2023-04-12 07:24:13.000000000"}, {"message": "I would recommend writing a cppunit test that shows the problem after just touching the .sdi file, then you can do the minimal amount of remaining changes to get it to work. I'm not comfortable approving this change in its current form, I hope that's reasonable.", "timestamp": "2023-04-13 06:22:44.000000000"}, {"message": "Sure, I'll look into it, thanks.", "timestamp": "2023-04-13 06:25:40.000000000"}, {"message": "I added an assert to existing test for SID_OPEN_HYPERLINK to check whether the COPY command is being shown as well.", "timestamp": "2023-04-17 16:07:03.000000000"}, {"message": "Done", "timestamp": "2023-04-20 07:27:21.000000000"}]}
{"thread_id": "ef9adaa3_ed04d181", "url": "https://gerrit.libreoffice.org/#/c/core/+/150070/4/sw/source/uibase/shells/textsh1.cxx@1821", "comments": [{"message": "As far as I understand, you removed \"case SID_COPY_HYPERLINK_LOCATION\" from this block, but then why do you touch it at all?\n\nOr in case it's intentional that you change what gets copied to the clipboard, did you consider covering that with a test? Thanks.", "timestamp": "2023-04-18 06:34:42.000000000"}, {"message": "Hi, yes, since the actions for copying and opening are different, I thought it would be better to split the block, instead of matching it with both and then testing which one of them it is. I don't remember if there was some other reason behind it, but I'll see how it looks back in one block. I'll look into tests as well.", "timestamp": "2023-04-18 09:30:08.000000000"}, {"message": "What would be the best way to go about testing the link was successfully copied to the clipboard? I tried looking for any tests referencing SID_COPY or .uno:Copy, but all seems that I could find tested the copy functionality by pasting the content afterwards, which doesn't seem very precise to me to be honest \ud83e\udd14", "timestamp": "2023-04-18 15:04:44.000000000"}, {"message": "Also, where should this test be placed? Is sw/qa/uibase/shells/shells.cxx alright, or is there a better place for it?", "timestamp": "2023-04-18 21:43:38.000000000"}, {"message": "For both questions, usually testing is hard enough that if you do it some way, we don't nitpick how that's done. But in any case:\n\n- To test what gets copied to the clipboard, I would break the code to two pieces, first to produce the content that will be written to the clipboard and second to actually write it there. This can be done as a more or less mechanical, safe change, without tests. Then you can modify the first piece and have an easier way to test it.\n\n- My suggested place for a sw/source/foo/bar/baz.cxx test would be sw/qa/foo/bar/, yes. But a test in some other place is better than no test.\n\nFor the actual code change, you have 4 hunks there, and I find it hard to understand what are those changes. The info I'm missing is the usual ones:\n\n- what is the actual problem you see and try to solve\n\n- what is happening currently (pros and cons of the current situation)\n\n- how you change the code (high level) to fix your problem, while trying to not break the \"pros\" of the current case\n\nI.e. possibly the more important part is to extend the commit messages on the \"why\" part, then it'll be easier to review \"what\" you did to sw/source/. The test may be a separate, follow-up change if you prefer that. (Test what gets copied to the clipboard.) Thanks!", "timestamp": "2023-04-19 06:37:07.000000000"}, {"message": "I see, thanks for explanation! Personally I think it would be better to have the test in the same commit.\n\nBasically as far as I understand it, when you currently trigger the copy hyperlink location command on these protected field, the link gets open instead. That however wasn't a noticeable issue, because the command was hidden, which I am trying to change. I will try to include this in the commit message, sorry.", "timestamp": "2023-04-19 06:45:14.000000000"}, {"message": "I added a test for it, however it's not exactly working. I think the issue might be the command invocations use different shell than the one I'm moving to paste the content? Would you happen to know how to fix it?", "timestamp": "2023-04-19 09:32:17.000000000"}, {"message": "Okay, figured it out, should work now. Does it seem okay to you overall?", "timestamp": "2023-04-19 14:16:45.000000000"}, {"message": "Done", "timestamp": "2023-04-20 07:27:21.000000000"}]}
{"thread_id": "f2f53205_368c8c1d", "url": "https://gerrit.libreoffice.org/#/c/core/+/150243/18/sw/source/core/doc/docnew.cxx@239", "comments": [{"message": "sw::TableFrameFormats", "timestamp": "2023-04-19 06:14:28.000000000"}, {"message": "Done", "timestamp": "2023-04-19 20:31:09.000000000"}]}
{"thread_id": "21b16cb0_cda887ed", "url": "https://gerrit.libreoffice.org/#/c/core/+/150243/17/sw/source/core/docnode/ndtbl.cxx@3878", "comments": [{"message": "if you don't like writing out the template types here and elswhere, just define some typedefs? There are only a handful", "timestamp": "2023-04-18 19:19:58.000000000"}, {"message": "Done", "timestamp": "2023-04-18 21:34:35.000000000"}]}
{"thread_id": "ffccb4c7_b5a7e55d", "url": "https://gerrit.libreoffice.org/#/c/core/+/150521/3/oox/source/export/shapes.cxx@1960", "comments": [{"message": "This may cause problems with the mac build later, which used to only have .has_value(), but not operator bool(). But let's get this in and see if that's still a problem or the toolchain is newer than that today.", "timestamp": "2023-04-19 10:57:57.000000000"}]}
{"thread_id": "c4569284_a12e78a3", "url": "https://gerrit.libreoffice.org/#/c/core/+/150521/3/svx/source/table/cell.cxx@99", "comments": [{"message": "If this is only used in a cell context, then would it make sense to rename this to SDRATTR_CELL_GRABBAG?", "timestamp": "2023-04-19 10:57:57.000000000"}]}
{"thread_id": "b40a72b9_5e8ebef1", "url": "https://gerrit.libreoffice.org/#/c/core/+/150582/1/forms/source/xforms/convert.cxx@136", "comments": [{"message": "possibly rather throw lang::IllegalArgumentException ?\n\nRuntimeException is very generic.", "timestamp": "2023-04-18 17:09:55.000000000"}, {"message": "Indeed! Done in the new patchset.", "timestamp": "2023-04-18 17:32:17.000000000"}]}
{"thread_id": "89370d00_6cb6bdda", "url": "https://gerrit.libreoffice.org/#/c/core/+/148934/2/svx/source/sdr/primitive2d/sdrdecompositiontools.cxx@b781", "comments": [{"message": "Add handling of negative shadow offsets. It was handled before the patch.", "timestamp": "2023-04-17 09:48:49.000000000"}, {"message": "I couldn't reproduce such an issue, behavior for negative scale values (sx & sy in OOXML markup) appear to be better / similar to MSO in the current implementation.\n\nLooking at e21d522dddce2590ed435890ae8d5fe39658a71a : I think this was a workaround that is no longer required with the import of the shadow alignment.", "timestamp": "2023-04-17 13:28:22.000000000"}]}
{"thread_id": "08121c40_183aa818", "url": "https://gerrit.libreoffice.org/#/c/core/+/150550/1/formula/source/ui/dlg/formula.cxx@1463", "comments": [{"message": "maybe, only guessing really, an else of \"...setCurrentFormula(\"\") and m_nArgs = 0\" would make sense if m_pFuncDesc is null", "timestamp": "2023-04-18 11:45:50.000000000"}, {"message": "Done", "timestamp": "2023-04-18 11:53:54.000000000"}]}
{"thread_id": "f86cae6d_555b68d8", "url": "https://gerrit.libreoffice.org/#/c/core/+/150209/3/starmath/source/dialog.cxx@56", "comments": [{"message": "Ridiculous functionality; how could the field provide more contrast than black/white?", "timestamp": "2023-04-18 08:49:08.000000000"}, {"message": "This is the first place I've seen such a thing.", "timestamp": "2023-04-18 12:06:00.000000000"}]}
{"thread_id": "7621fbbc_77e687ca", "url": "https://gerrit.libreoffice.org/#/c/core/+/150209/3/starmath/source/dialog.cxx@64", "comments": [{"message": "Be sure that face color is correct and not window (haven't tested it but you likely did => +2).", "timestamp": "2023-04-18 08:49:08.000000000"}, {"message": "Indeed I tested and it worked in gtk3 and kf5.", "timestamp": "2023-04-18 12:06:00.000000000"}]}
{"thread_id": "cb526cb2_b7848c48", "url": "https://gerrit.libreoffice.org/#/c/core/+/150507/1/sw/source/filter/ww8/docxattributeoutput.cxx@6628", "comments": [{"message": "this seems a bit fragile, maybe it would be better to remove the \"m_anchorId\" variable and use GetFilter().GetUniqueId() in the sw code instead?", "timestamp": "2023-04-18 09:56:19.000000000"}]}
{"thread_id": "87109417_84bcdff9", "url": "https://gerrit.libreoffice.org/#/c/core/+/150064/1/oox/source/export/shapes.cxx@1660", "comments": [{"message": "This xGluePoints is a bit odd because it's not used, looking at git log I see that in\ncommit \n\ncommit 097a2de6428f834d28fa78af203d3c0b6577656e\nDate:   Sun Oct 16 09:32:33 2022 +0200\n\n    tdf#151492 PPTX export: fix connection points regression\n\nthe use of xGluePoints was removed, so I think the xGluePoints line can go, and so too the xSupplier line, which suggests that the xShape arg can also go, making the early return added here go too.", "timestamp": "2023-04-05 19:58:37.000000000"}, {"message": "Indeed. I didn't notice it was unused. Fixed now\n@Noel, is it something a plugin could flag ?", "timestamp": "2023-04-05 20:30:54.000000000"}, {"message": "> @Noel, is it something a plugin could flag ?\n\nsee <https://gerrit.libreoffice.org/c/core/+/150543> \"Introduce SAL_WARN_UNUSED_CONSTRUCTOR\"", "timestamp": "2023-04-18 09:30:19.000000000"}]}
{"thread_id": "387a6e91_277b41ce", "url": "https://gerrit.libreoffice.org/#/c/core/+/150431/1/xmlhelp/source/cxxhelp/provider/databases.cxx@1343", "comments": [{"message": "no need for this copy of implGetFileFromPackage anymore?", "timestamp": "2023-04-14 19:01:28.000000000"}, {"message": "no there are 2 place that call one function and 3 that call the other one.", "timestamp": "2023-04-18 09:28:17.000000000"}]}
{"thread_id": "93463251_92986a8b", "url": "https://gerrit.libreoffice.org/#/c/core/+/150493/1/tools/source/generic/fract.cxx@72", "comments": [{"message": "Possibly doing it in one step could be simpler, determining double quotients required for both num and denom, and then rounding-divide? The rounding-division using the largest (by abs value) quotient would guarantee that the largest of [num, denom] becomes the max allowed value, and the other one exceed it. (Hmm, but what about min, which abs value is larger than max...)\n\nAlso, maybe std::gcd step could be used first, to exclude cases where the fraction can use smaller numbers without precision loss?", "timestamp": "2023-04-17 12:30:43.000000000"}, {"message": "divide by 2 is a bitshift, which is very fast. \nYes, gcd would be more precise", "timestamp": "2023-04-17 12:54:58.000000000"}, {"message": "> divide by 2 is a bitshift, which is very fast. \n\nAh yes, sorry for the noise. I needed not to skip my coffee today! :-)", "timestamp": "2023-04-17 13:09:13.000000000"}]}
{"thread_id": "11239e58_fb5ae8cb", "url": "https://gerrit.libreoffice.org/#/c/core/+/150377/2/sd/source/ui/func/futext.cxx@595", "comments": [{"message": "There is already such call few lines below.", "timestamp": "2023-04-14 07:27:38.000000000"}, {"message": "Done", "timestamp": "2023-04-15 03:09:39.000000000"}]}
{"thread_id": "1e0675e1_6531c513", "url": "https://gerrit.libreoffice.org/#/c/core/+/150377/3/sd/source/ui/func/futext.cxx@564", "comments": [{"message": "I wonder if this method is needed at all (it seems to be Impress-specific too)?", "timestamp": "2023-04-16 06:57:04.000000000"}, {"message": "Done", "timestamp": "2023-04-17 23:09:35.000000000"}]}
{"thread_id": "d436bf08_9bee69bd", "url": "https://gerrit.libreoffice.org/#/c/core/+/150231/4/sw/source/core/crsr/crsrsh.cxx@3437", "comments": [{"message": "this looks a bit dubious ... read-only is not hidden, but it is possible that a cell is selected which contains a hidden section (they can be anywhere)", "timestamp": "2023-04-13 09:07:06.000000000"}, {"message": "Done", "timestamp": "2023-04-13 11:52:12.000000000"}]}
{"thread_id": "b36b282c_eb582fab", "url": "https://gerrit.libreoffice.org/#/c/core/+/150231/4/sw/source/core/crsr/pam.cxx@1025", "comments": [{"message": "you can just use GetStart and GetEnd instead", "timestamp": "2023-04-13 09:07:06.000000000"}, {"message": "Done", "timestamp": "2023-04-13 11:52:12.000000000"}]}
{"thread_id": "3f28999b_52692481", "url": "https://gerrit.libreoffice.org/#/c/core/+/150231/4/sw/source/core/edit/eddel.cxx@172", "comments": [{"message": "it's a bit unclear to me which WrtShell this is going to be ... the Online has one WrtShell per user and it's possible this will get a different one than the instance that's running the Delete so it could show the dialog to the wrong user ?", "timestamp": "2023-04-13 09:07:06.000000000"}, {"message": "Is it acceptable with the const SwWrtShell* pWrtShell = dynamic_cast<SwWrtShell*>(this); even if its not so nice?", "timestamp": "2023-04-13 21:05:13.000000000"}, {"message": "Done", "timestamp": "2023-04-14 14:41:46.000000000"}]}
{"thread_id": "2f36ea59_22fb63d0", "url": "https://gerrit.libreoffice.org/#/c/core/+/150231/7/sw/source/core/edit/eddel.cxx@174", "comments": [{"message": "perhaps you could get rid of this ugly cast by making these 2 functions virtual with the SwEditShell base class implementation being just \"return true\"", "timestamp": "2023-04-14 12:31:42.000000000"}, {"message": "Thank you, I also like the idea. :) You meant something like this? Is it okay?\nI still have a warninig with:\nC:\\sources\\libo-core\\sw\\inc\\editsh.hxx(628): warning C4100: 'bAsync': unreferenced formal parameter\nC:\\sources\\libo-core\\sw\\inc\\editsh.hxx(628): warning C4100: 'bAsync': unreferenced formal parameter", "timestamp": "2023-04-14 13:46:39.000000000"}, {"message": "you can simply avoid the warning by removing the name of the parameter where it isn't used or comment it like \"/* bAsync */\"", "timestamp": "2023-04-14 14:18:48.000000000"}, {"message": "Ohh thanks, I thought I have already commented out that. Now it is also done.", "timestamp": "2023-04-14 14:41:03.000000000"}, {"message": "Done", "timestamp": "2023-04-14 14:41:17.000000000"}]}
{"thread_id": "be699617_26e39067", "url": "https://gerrit.libreoffice.org/#/c/core/+/150387/1/cli_ure/source/climaker/climaker_app.cxx@603", "comments": [{"message": "it looks like this is the only instance of TypeEmitter ever?", "timestamp": "2023-04-14 12:14:14.000000000"}]}
{"thread_id": "630a8da3_11e2a9e0", "url": "https://gerrit.libreoffice.org/#/c/core/+/150380/1/desktop/source/lib/init.cxx@614", "comments": [{"message": "Did you indent this by accident?", "timestamp": "2023-04-14 06:13:51.000000000"}, {"message": "Must be my mergetool. Thanks for noticing.", "timestamp": "2023-04-14 10:25:33.000000000"}, {"message": "Done", "timestamp": "2023-04-16 12:17:21.000000000"}]}
{"thread_id": "126ae765_a3e7af21", "url": "https://gerrit.libreoffice.org/#/c/core/+/150380/1/desktop/source/lib/init.cxx@2995", "comments": [{"message": "Same here.", "timestamp": "2023-04-14 06:13:51.000000000"}, {"message": "Done", "timestamp": "2023-04-16 12:17:21.000000000"}]}
{"thread_id": "8127f582_2c2e1fba", "url": "https://gerrit.libreoffice.org/#/c/core/+/150477/2/pyuno/source/loader/pyuno_loader.cxx@211", "comments": [{"message": "+= ?", "timestamp": "2023-04-17 09:43:47.000000000"}, {"message": "eh, indeed :)  feel free to push a follow-up", "timestamp": "2023-04-17 09:48:15.000000000"}]}
{"thread_id": "7b2204f5_50dbd7d5", "url": "https://gerrit.libreoffice.org/#/c/core/+/150444/2/sw/source/filter/ww8/ww8par6.cxx@2466", "comments": [{"message": "FWIW if this generates too much output, then feel free to disable this in the fuzzing case for now. I'm still working on make check failures when I enable this setting locally. And in the long run I'll remove this function and adjust callers (assuming it always returns true) accordingly.", "timestamp": "2023-04-17 07:26:26.000000000"}]}
{"thread_id": "2bac4a6e_31520125", "url": "https://gerrit.libreoffice.org/#/c/core/+/85795/1/sc/source/core/data/table4.cxx@207", "comments": [{"message": "oh, is the bug number really 123456? :)", "timestamp": "2019-12-25 08:06:13.000000000"}, {"message": ":-) will fix of course - thanks!", "timestamp": "2019-12-25 08:07:08.000000000"}, {"message": "Done", "timestamp": "2023-04-15 13:45:40.000000000"}]}
{"thread_id": "05de4321_9bcbe9c4", "url": "https://gerrit.libreoffice.org/#/c/core/+/150277/6/compilerplugins/clang/stringviewparam.cxx@145", "comments": [{"message": "I'd drop that rather than commenting it out.", "timestamp": "2023-04-13 09:15:18.000000000"}, {"message": "Done", "timestamp": "2023-04-13 10:07:52.000000000"}]}
{"thread_id": "578da920_38a883da", "url": "https://gerrit.libreoffice.org/#/c/core/+/150277/6/include/o3tl/string_view.hxx@34", "comments": [{"message": "Here and elsewhere, the `OUString` member function counterparts that take just a `char const *` argument without a length are careful to not compute that argument's length upfront, I think.  Which might or might not be of practical concern here.", "timestamp": "2023-04-13 09:15:18.000000000"}, {"message": "The call sites are mostly passing compile-time-constant strings, for which the string length is computed at compile time, but that is a good point for the other call sites.", "timestamp": "2023-04-13 10:07:52.000000000"}]}
{"thread_id": "37170e60_a250d05d", "url": "https://gerrit.libreoffice.org/#/c/core/+/150277/6/include/o3tl/string_view.hxx@38", "comments": [{"message": "But doesn't `rtl_ustr_asciil_reverseCompare_WithLength` already return the right value, just proceeding from back to front rather than from front to back of the given arguments?", "timestamp": "2023-04-13 09:15:18.000000000"}, {"message": "Done", "timestamp": "2023-04-13 10:07:52.000000000"}]}
{"thread_id": "37361468_67dd318d", "url": "https://gerrit.libreoffice.org/#/c/core/+/150277/7/include/o3tl/string_view.hxx@36", "comments": [{"message": "OUString::compareToAscii uses rtl_ustr_ascii_compare_WithLength\nAnd it would give different ordering, because the reverse comparison starts at end, and stops at first mismatch.", "timestamp": "2023-04-13 22:47:13.000000000"}]}
{"thread_id": "791e424c_8dc63ace", "url": "https://gerrit.libreoffice.org/#/c/core/+/150242/1/sw/source/filter/ww8/docxattributeoutput.cxx@1502", "comments": [{"message": "A hit from sw/qa/extras/ooxmlexport/data/tdf104394_lostTextbox.docx in a table.", "timestamp": "2023-04-13 23:07:05.000000000"}]}
{"thread_id": "8ee9f8f4_59d6663d", "url": "https://gerrit.libreoffice.org/#/c/core/+/150242/1/sw/source/filter/ww8/docxattributeoutput.cxx@4251", "comments": [{"message": "A hit from sw/qa/extras/ooxmlexport/data/tdf104394_lostTextbox.docx in a table.\nI suppose we would also have a hit if the frame did not have any border - just border spacing.\n\nAvoided by not passing pFramePr when in a table.", "timestamp": "2023-04-13 23:07:05.000000000"}]}
{"thread_id": "0bb1ec28_d0b94898", "url": "https://gerrit.libreoffice.org/#/c/core/+/150242/2/sw/source/filter/ww8/docxattributeoutput.cxx@1112", "comments": [{"message": "A hit from sw/qa/extras/ooxmlexport/data/fdo60957-2.docx\n\nIt has a frame inside a table, and that frame contains 2 paragraphs and another table. Wow.", "timestamp": "2023-04-13 23:07:05.000000000"}]}
{"thread_id": "494065f0_27af6e3e", "url": "https://gerrit.libreoffice.org/#/c/core/+/150242/2/sw/source/filter/ww8/docxattributeoutput.cxx@1504", "comments": [{"message": "This can be hit in RTF when you have \\par\\par (I assume)", "timestamp": "2023-04-13 23:07:05.000000000"}]}
{"thread_id": "4b7be44d_f8ea3747", "url": "https://gerrit.libreoffice.org/#/c/core/+/149916/2/include/vcl/BinaryDataContainer.hxx@48", "comments": [{"message": "Make it more clear that this will copy the data... I generally don't like this because I want the user of BinaryDataContainer to explicitly copy the data - not making it easy to do it.", "timestamp": "2023-04-03 09:34:59.000000000"}, {"message": "Ok? so - now I think about it - we could use a uno::Sequence to store the data in the 1st place - although there are perhaps some horrible performance characteristic of uno::Sequences. Then it would be rather cheap to get it that way (?) =)", "timestamp": "2023-04-03 16:16:40.000000000"}, {"message": "Not really needed to do that. I wouldn't use uno::Sequence .. I was fighting hard to not need to use that. One use is for the XInputStream, where we could just use a wrapped SvStream instead (OInputStreamWrapper). The other use is in UnoBinaryDataContainer::getCopyAsByteSequence, which explicitly wants a copy anyway and is practically unused.", "timestamp": "2023-04-03 19:29:07.000000000"}, {"message": "I renamed the method to something more helpful =)", "timestamp": "2023-04-13 20:23:09.000000000"}]}
{"thread_id": "33a9aaee_941dc058", "url": "https://gerrit.libreoffice.org/#/c/core/+/150210/4/include/o3tl/string_view.hxx@371", "comments": [{"message": "I think this comment has become confusing now, as the Unicode General Punctuation area still covers U+2000..206F.\n\n(And while you're micro-optimizing this function anyway, wouldn't it have been cleaner to just remove the first conditional block below and leave the second conditional block as-is, rather than spreading the logic to check for the relevant ranges U+2000..200B and U+2028..2029 across those two conditional blocks now?)", "timestamp": "2023-04-13 08:15:16.000000000"}, {"message": "I believe that removing the first check, and keeping only the second as is, would require at least three comparisons instead of one for every character <0x2000, and at least four comparisons instead of two for every character >0x2029, i.e. for vast majority of characters :)\n\nWrt the comment - I think that the check still allows for spaces only in the said block, so not confusing. It is only meant to express someone's doubt if other blocks may have spaces that need to be accounted for (and I don't know it).\n\nDo you agree?", "timestamp": "2023-04-13 08:28:32.000000000"}, {"message": "> I believe that removing the first check, and keeping only the second as is, would require at least three comparisons instead of one for every character <0x2000, and at least four comparisons instead of two for every character >0x2029, i.e. for vast majority of characters :)\n\n...or whatever an optimizing compiler makes out of it; and who cares anyway \ud83d\ude0e\n\n> Wrt the comment - I think that the check still allows for spaces only in the said block, so not confusing. It is only meant to express someone's doubt if other blocks may have spaces that need to be accounted for (and I don't know it).\n\nI don't think the original comment was meant to express any doubts, and that the question mark (as is also used in the earlier \"Space or Control character?\" comment) was (somewhat confusingly) used because this is a comment about a condition.\n\nI still find the resulting comment plus code more confusing than necessary, but whatever...", "timestamp": "2023-04-13 08:41:51.000000000"}, {"message": "> > I believe that removing the first check, and keeping only the second as is, would require at least three comparisons instead of one for every character <0x2000, and at least four comparisons instead of two for every character >0x2029, i.e. for vast majority of characters :)\n> \n> ...or whatever an optimizing compiler makes out of it; and who cares anyway \ud83d\ude0e\n\n\ud83d\ude04 I tend to care about string operations efficiency; and when doing this change, I checked godbolt's gcc, msvc, and clang (trunks) outputs for several variants (with -O2). I was hoping that the compiler would do the job, and create identical code; but there was a difference (additional instructions, not some different structure that could be more optimal in some cases).\n\nI must tell that I didn't profile how much would it affect the overall program performance :) just some stubbornness at premature optimization :)", "timestamp": "2023-04-13 11:17:24.000000000"}]}
{"thread_id": "9894f53a_117721f9", "url": "https://gerrit.libreoffice.org/#/c/core/+/150256/5/i18npool/source/textconversion/textconversion_zh.cxx@235", "comments": [{"message": "I'd avoid any such unnecessary conversions from `std::size_t` to `sal_Int32`,  In this case, for example, it is arguably better to rather use `o3tl::make_unsigned` on the LHS.", "timestamp": "2023-04-12 11:10:34.000000000"}, {"message": "I'd rather avoid spreading more unnecessary unsigned-edness around, no need to further reinforce the std::size_t mistake.", "timestamp": "2023-04-12 11:20:05.000000000"}, {"message": "Whether you like unsigned types or not, when comparing an unsigned entity with a signed one that is guaranteed to be non-negative (as is the case for `OUString::getLength`), `o3tl::make_unsigned` is a no-brainer whereas `static_cast<T>` requires some proof that the unsigned entity fits into `T`.  Which makes the code less maintainable and more error prone.", "timestamp": "2023-04-12 11:28:58.000000000"}]}
{"thread_id": "376b5565_a9c0e99d", "url": "https://gerrit.libreoffice.org/#/c/core/+/150036/2/writerfilter/source/dmapper/DomainMapper_Impl.cxx@2256", "comments": [{"message": "This is the heart of the whole patch. Everything else is just plumbing changes to allow this full comparison.\n\nFirst checking IsFrameMode is an optimization to avoid useless processing.", "timestamp": "2023-04-06 01:04:52.000000000"}]}
{"thread_id": "41540e7c_89accf62", "url": "https://gerrit.libreoffice.org/#/c/core/+/150217/2/include/o3tl/string_view.hxx@35", "comments": [{"message": "Isn't the actual problem that `OUString::equalsAsciiL` uses `rtl_ustr_asciil_reverseEquals_WithLength` and returns false if the two strings are of different length, whereas this `o3tl::equalsAsciiL` uses `rtl_ustr_ascii_shortenedCompare_WithLength` and returns true if the second string is a prefix of the first one?", "timestamp": "2023-04-11 12:13:18.000000000"}, {"message": "good spotting, fix at\nhttps://gerrit.libreoffice.org/c/core/+/150240", "timestamp": "2023-04-11 15:59:01.000000000"}]}
{"thread_id": "33588f34_eda228a2", "url": "https://gerrit.libreoffice.org/#/c/core/+/150143/2/sw/source/core/unocore/unostyle.cxx@1079", "comments": [{"message": "One of those calls should be using rName and the other sStyleNam.\n(We have this weird thing where the UNO API needs to support style names in either the internal string, or a locale-specific translated style name string)", "timestamp": "2023-04-08 11:05:42.000000000"}, {"message": "This has been this way exactly since the commit aimed to disambiguate user-defined names, where the UI name may clash with the pre-defined programmatic name. Since 2001. So let it be this way :-) we should only add complexity when we know which problem we try to solve :-) (I recently did something in the field of these clashing style names, and I can say it's a big mess)", "timestamp": "2023-04-08 12:02:51.000000000"}]}
{"thread_id": "f69ce7dd_b0f7b5d9", "url": "https://gerrit.libreoffice.org/#/c/core/+/149950/1/sc/source/core/data/table6.cxx@260", "comments": [{"message": "I'd like to see https://gerrit.libreoffice.org/c/core/+/148752/comment/4b3dcbfe_7aa8bfb9/ addressed first and merged before backporting.", "timestamp": "2023-04-03 10:56:08.000000000"}, {"message": "Done in https://gerrit.libreoffice.org/c/core/+/150140", "timestamp": "2023-04-07 16:46:18.000000000"}]}
{"thread_id": "6da74ba5_6ef9b446", "url": "https://gerrit.libreoffice.org/#/c/core/+/149672/5/sd/source/ui/docshell/docshel2.cxx@313", "comments": [{"message": "Nice!\nI guess, this comes from SdPage::GetName() [1]. It would be nice to add a comment here, like \"using the same strings as SdPage::GetName\", or the like. This would help to synchronize in case of a change.\n\nIt seems that we have some mess with these identifiers throughout the code: [2] uses STR_SLIDE_NAME instead of STR_PAGE. It's a different issue, and must be handled separately, so I just mention it here.\n\n[1] https://opengrok.libreoffice.org/xref/core/sd/source/core/sdpage.cxx?r=4d863fd8#2507\n[2] https://opengrok.libreoffice.org/xref/core/sd/source/ui/sidebar/SlideBackground.cxx?r=01d0019c#586", "timestamp": "2023-04-06 21:00:11.000000000"}, {"message": "That's right. It is pretty messy in [1]. There are some duplicates of the same strings where only one should be used.\n\n[1] https://opengrok.libreoffice.org/xref/core/sd/inc/strings.hrc?r=daab698b", "timestamp": "2023-04-07 00:37:16.000000000"}]}
{"thread_id": "68186f73_e686e706", "url": "https://gerrit.libreoffice.org/#/c/core/+/149672/5/sd/source/ui/docshell/docshel2.cxx@317", "comments": [{"message": "This comment now refers to obsolete STR_SD_PAGE\nAnd it seems that STR_SD_PAGE is unused now, can be removed completely", "timestamp": "2023-04-06 21:00:11.000000000"}, {"message": "Although it is used now, it's still a good explanation of what is checked below. I'll change this to STR_PAGE.", "timestamp": "2023-04-07 00:56:42.000000000"}, {"message": "*isn't", "timestamp": "2023-04-07 01:00:46.000000000"}]}
{"thread_id": "e493d917_51b8fb47", "url": "https://gerrit.libreoffice.org/#/c/core/+/107774/2/sax/source/fastparser/fastparser.cxx@791", "comments": [{"message": "please rather use std::sort", "timestamp": "2020-12-15 16:54:35.000000000"}, {"message": "I need to sort it keeping the correspondence between mEntityNames and mEntityReplacements.\n\nSo this has no use:\ntemplate< class RandomIt, class Compare >\nvoid sort( RandomIt first, RandomIt last, Compare comp );\n\nMaybe this ?:\ntemplate< class ExecutionPolicy, class RandomIt, class Compare >\nvoid sort( ExecutionPolicy&& policy, RandomIt first, RandomIt last, Compare comp );\n -> But I can't understand how I am supposed to add the swap method to the std::execution.\n -> So, if it is possible could you give me some more guidance?", "timestamp": "2020-12-15 18:28:14.000000000"}, {"message": "ah, I see the problem. Probably easiest to copy data into a structure like\n\n    struct ReplacementPair { OUString name; OUString replacement; };\n    std::vector<ReplacementPair> m_Replacements;\n    bool operator<(const ReplacementPair& lhs, const ReplacementPair& rhs)\n    { return lhs.name < rhs.name; }\n\nthen\n\n    std::sort(m_Replacements.begin(), m_Replacements.end());\n\nthen can search by\n\n    auto it = std::lower_bound(m_Replacements.begin(), m_Replacements.end(), name,\n        bool operator<(const ReplacementPair& lhs, const OUString& rhs)\n    { return lhs.name < rhs; }\n    );\n    if (it != m_Replacements.end() && it->name == name)\n        return ....", "timestamp": "2020-12-16 08:21:19.000000000"}]}
{"thread_id": "579c48d1_9d8da2a1", "url": "https://gerrit.libreoffice.org/#/c/core/+/107774/2/sax/source/fastparser/fastparser.cxx@1430", "comments": [{"message": "and then use std::lower_bound here to search the array", "timestamp": "2020-12-15 16:54:35.000000000"}]}
{"thread_id": "1d335edf_c0e02f49", "url": "https://gerrit.libreoffice.org/#/c/core/+/107036/2/sax/source/fastparser/fastparser.cxx@1367", "comments": [{"message": "when doing \"if\" statements please put the \"return xx\" part on the next line.", "timestamp": "2020-12-03 13:48:08.000000000"}, {"message": "Done", "timestamp": "2020-12-05 11:35:55.000000000"}]}
{"thread_id": "e5975f11_d53cca99", "url": "https://gerrit.libreoffice.org/#/c/core/+/107036/2/sax/source/fastparser/fastparser.cxx@1380", "comments": [{"message": "we should be able to do these checks using the raw C APIs, i.e.\ncalling strlen() for the length, and then raw character access via the pointer\n\n- this is one of the few places we really care about performance, fastparser is sometimes used to load  200M big spreadsheets.", "timestamp": "2020-12-03 13:48:08.000000000"}, {"message": "Used more C tools to do the task.", "timestamp": "2020-12-05 11:35:55.000000000"}]}
{"thread_id": "85acecfc_ff7382e7", "url": "https://gerrit.libreoffice.org/#/c/core/+/107036/6/sax/source/fastparser/fastparser.cxx@1394", "comments": [{"message": "there is no need to copy into a new buffer here, since strtoul will stop when it hits a non-valid-digit character.\njust call \n    cval = static_cast<sal_uInt32>( strtoul( dname + 2, nullptr, 16 ) );", "timestamp": "2020-12-06 18:22:22.000000000"}, {"message": "Done", "timestamp": "2020-12-07 10:51:07.000000000"}]}
{"thread_id": "be666af4_2cb2c48b", "url": "https://gerrit.libreoffice.org/#/c/core/+/107036/6/sax/source/fastparser/fastparser.cxx@1408", "comments": [{"message": "and similarly here", "timestamp": "2020-12-06 18:22:22.000000000"}, {"message": "Done", "timestamp": "2020-12-07 10:51:07.000000000"}]}
{"thread_id": "97839d29_30121520", "url": "https://gerrit.libreoffice.org/#/c/core/+/107036/8/sax/source/fastparser/fastparser.cxx@1384", "comments": [{"message": "the return type of std::strlen is std::size_t, why not use that here?", "timestamp": "2020-12-07 13:13:29.000000000"}]}
{"thread_id": "cb8fa51f_179883ca", "url": "https://gerrit.libreoffice.org/#/c/core/+/107036/8/sax/source/fastparser/fastparser.cxx@1402", "comments": [{"message": "This needed to be 1, because we only skip '#', and there's no 'x' or 'X' following, just decimal digits.\n\nI assume this code is unused, because no bug was filed about incorrect handling of character reference like &#931;", "timestamp": "2023-04-06 22:40:59.000000000"}]}
{"thread_id": "679526ba_c70cb46f", "url": "https://gerrit.libreoffice.org/#/c/core/+/71323/2/sw/source/core/undo/unsect.cxx@533", "comments": [{"message": "FYI: I hit this with tdf154481's T41585 8 pages with 12 comments.docx\nhttps://bugs.documentfoundation.org/attachment.cgi?id=186318\n\nSteps to reproduce:\n-find the TOC on page 2\n-right click on TOC - update index - assert", "timestamp": "2023-04-06 15:24:47.000000000"}]}
{"thread_id": "f9440060_ab04759b", "url": "https://gerrit.libreoffice.org/#/c/core/+/145905/3/oox/source/export/DMLPresetShapeExport.cxx@73", "comments": [{"message": "Now why all these commented lines?\nEither they're useless and you can remove them or they're useful and you must let them.", "timestamp": "2023-01-22 09:36:15.000000000"}, {"message": "Forget it, it was already commented.", "timestamp": "2023-01-22 11:51:00.000000000"}]}
{"thread_id": "452b51bc_07127bcb", "url": "https://gerrit.libreoffice.org/#/c/core/+/145905/4/oox/source/export/DMLPresetShapeExport.cxx@46", "comments": [{"message": "I think `rCustomShapeGeometryItem` is better suited for this reference.", "timestamp": "2023-01-26 10:57:21.000000000"}, {"message": "Done", "timestamp": "2023-04-06 09:54:05.000000000"}]}
{"thread_id": "0dd64077_e12b6718", "url": "https://gerrit.libreoffice.org/#/c/core/+/145905/4/stoc/test/registry_tdprovider/testregistrytdprovider.cxx@779", "comments": [{"message": "Here, `rServiceName` is better.", "timestamp": "2023-01-26 10:57:21.000000000"}, {"message": "Done", "timestamp": "2023-04-06 09:54:05.000000000"}]}
{"thread_id": "ec03189a_ded177ba", "url": "https://gerrit.libreoffice.org/#/c/core/+/149960/1/sw/source/filter/xml/xmltbli.cxx@1192", "comments": [{"message": "i was going to complain about Insert File, but with this fallback it should work.", "timestamp": "2023-04-05 09:06:22.000000000"}]}
{"thread_id": "2bf9be04_a8f97d18", "url": "https://gerrit.libreoffice.org/#/c/core/+/148720/5/basic/source/runtime/runtime.cxx@1494", "comments": [{"message": "A nitpick:\n\nWe use spaces around operators, and braces on separate lines - so:\n\n                if (start < end && *start == '!')\n                {", "timestamp": "2023-03-16 21:27:09.000000000"}, {"message": "You are right. Sorry for that. Is there a way to continue fix this after the fix is marked as merged?", "timestamp": "2023-03-16 21:33:04.000000000"}, {"message": "Done", "timestamp": "2023-03-17 21:33:08.000000000"}]}
{"thread_id": "1de72dff_302b0f8c", "url": "https://gerrit.libreoffice.org/#/c/core/+/149929/5/sw/source/core/layout/tabfrm.cxx@3546", "comments": [{"message": "looks like this will be skipped?\n\nthis calls SwFrame::SwClientNotify which as a quite different sequence of invalidation checks... but it also calls a different function UpdateAttrFrame() which doesn't do anything with this WhichID so i guess it can be skipped.", "timestamp": "2023-04-04 09:27:19.000000000"}]}
{"thread_id": "77e47231_8c7736f2", "url": "https://gerrit.libreoffice.org/#/c/core/+/149921/2/sc/source/core/data/drwlayer.cxx@1939", "comments": [{"message": "I doubt this is correct, ScStyleSheetPool::CopyStyleFrom() expects a ScStyleSheetPool* but for ScDrawLayer* pClipModel there's\n\n SfxStyleSheetBasePool* SdrModel::GetStyleSheetPool()\n\nand that's probably not a ScStyleSheetPool* one.", "timestamp": "2023-04-03 12:06:12.000000000"}, {"message": "ScDrawLayer's stylesheet pool is *always* ScStyleSheetPool. Please see ScDrawLayer's ctor.", "timestamp": "2023-04-03 13:06:58.000000000"}, {"message": "Sorry, I was blind and didn't see the SetStyleSheetPool() further down.", "timestamp": "2023-04-03 17:20:22.000000000"}]}
{"thread_id": "44087fe0_0b5344e4", "url": "https://gerrit.libreoffice.org/#/c/core/+/149184/3/sc/source/core/data/stlsheet.cxx@238", "comments": [{"message": "This started to fail `UITest_conditional_format UITEST_TEST_NAME=tdf117899.Tdf117899.test_tdf117899` at <https://ci.libreoffice.org/job/lo_ubsan/2730/> etc.,\n\n  /sc/source/core/data/stlsheet.cxx:238:53: runtime error: reference binding to null pointer of type 'SfxItemPool'\n      #0 0x7f2bc124c0ce in ScStyleSheet::GetItemSet() /sc/source/core/data/stlsheet.cxx:231:28\n      #1 0x7f2bc122b2e3 in ScStyleSheetPool::CopyStyleFrom(SfxStyleSheetBasePool*, rtl::OUString const&, SfxStyleFamily, bool) /sc/source/core/data/stlpool.cxx:144:40\n      #2 0x7f2bc122f285 in ScStyleSheetPool::CopyStdStylesFrom(ScStyleSheetPool*) /sc/source/core/data/stlpool.cxx:223:5\n      #3 0x7f2bc017bd51 in ScDocument::CopyStdStylesFrom(ScDocument const&) /sc/source/core/data/documen8.cxx:292:35\n      #4 0x7f2bc3958d7c in ScTransferObj::InitDocShell(bool) /sc/source/ui/app/transobj.cxx:683:14\n      #5 0x7f2bc3956490 in ScTransferObj::GetData(com::sun::star::datatransfer::DataFlavor const&, rtl::OUString const&) /sc/source/ui/app/transobj.cxx:443:13\n      #6 0x7f2c1e6f2c60 in TransferableHelper::getTransferData2(com::sun::star::datatransfer::DataFlavor const&, rtl::OUString const&) /vcl/source/treelist/transfer.cxx:385:17\n      #7 0x7f2c1e6f5c06 in non-virtual thunk to TransferableHelper::getTransferData2(com::sun::star::datatransfer::DataFlavor const&, rtl::OUString const&) /vcl/source/treelist/transfer.cxx\n      #8 0x7f2c1e713c6c in TransferableDataHelper::GetAny(com::sun::star::datatransfer::DataFlavor const&, rtl::OUString const&) const /vcl/source/treelist/transfer.cxx:1420:40\n      #9 0x7f2c1e71dd91 in TransferableDataHelper::GetSequence(com::sun::star::datatransfer::DataFlavor const&, rtl::OUString const&) const /vcl/source/treelist/transfer.cxx:2019:22\n      #10 0x7f2c1e72023f in TransferableDataHelper::GetInputStream(com::sun::star::datatransfer::DataFlavor const&, rtl::OUString const&) const /vcl/source/treelist/transfer.cxx:2060:31\n      #11 0x7f2c1e71ff5a in TransferableDataHelper::GetInputStream(SotClipboardFormatId, rtl::OUString const&) const /vcl/source/treelist/transfer.cxx:2055:12\n      #12 0x7f2b7c37fbea in SwTransferable::PasteOLE(TransferableDataHelper&, SwWrtShell&, SotClipboardFormatId, SotExchangeActionFlags, bool) /sw/source/uibase/dochdl/swdtflvr.cxx:2276:23\n      #13 0x7f2b7c36582c in SwTransferable::PasteData(TransferableDataHelper&, SwWrtShell&, unsigned char, SotExchangeActionFlags, SotClipboardFormatId, SotExchangeDest, bool, bool, Point const*, signed char, bool, RndStdIds, bool, SwPasteContext*, PasteTableType) /sw/source/uibase/dochdl/swdtflvr.cxx:1974:20\n      #14 0x7f2b7c39ca5a in SwTransferable::PasteFormat(SwWrtShell&, TransferableDataHelper&, SotClipboardFormatId) /sw/source/uibase/dochdl/swdtflvr.cxx:3430:20\n      #15 0x7f2b7cc97e2b in SwBaseShell::ExecClpbrd(SfxRequest&) /sw/source/uibase/shells/basesh.cxx:393:25\n      #16 0x7f2b7cc950a4 in SfxStubSwBaseShellExecClpbrd(SfxShell*, SfxRequest&) /workdir/SdiTarget/sw/sdi/swslots.hxx:2199:1\n      #17 0x7f2c447594d9 in SfxDispatcher::Call_Impl(SfxShell&, SfxSlot const&, SfxRequest&, bool) /sfx2/source/control/dispatch.cxx:254:9\n      #18 0x7f2c4476f16d in SfxDispatcher::Execute_(SfxShell&, SfxSlot const&, SfxRequest&, SfxCallMode) /sfx2/source/control/dispatch.cxx:753:9\n      #19 0x7f2c44770002 in SfxDispatcher::Execute(unsigned short, SfxCallMode, SfxItemSet const*, SfxItemSet const*, unsigned short) /sfx2/source/control/dispatch.cxx:813:9\n      #20 0x7f2c44b1290c in SfxDispatchController_Impl::dispatch(com::sun::star::util::URL const&, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&, com::sun::star::uno::Reference<com::sun::star::frame::XDispatchResultListener> const&) /sfx2/source/control/unoctitm.cxx:668:46\n      #21 0x7f2c44b0d87d in SfxOfficeDispatch::dispatch(com::sun::star::util::URL const&, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&) /sfx2/source/control/unoctitm.cxx:250:20\n      #22 0x7f2c567db205 in comphelper::dispatchCommand(rtl::OUString const&, com::sun::star::uno::Reference<com::sun::star::frame::XFrame> const&, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&, com::sun::star::uno::Reference<com::sun::star::frame::XDispatchResultListener> const&) /comphelper/source/misc/dispatchcommand.cxx:61:12\n      #23 0x7f2c567db92e in comphelper::dispatchCommand(rtl::OUString const&, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&, com::sun::star::uno::Reference<com::sun::star::frame::XDispatchResultListener> const&) /comphelper/source/misc/dispatchcommand.cxx:76:12\n      #24 0x7f2c20c54e64 in UITest::executeCommandWithParameters(rtl::OUString const&, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&) /vcl/source/uitest/uitest.cxx:44:12\n      #25 0x7f2c20c6e36b in (anonymous namespace)::UITestUnoObj::executeCommandWithParameters(rtl::OUString const&, com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue> const&) /vcl/source/uitest/uno/uitest_uno.cxx:70:12\n      #26 0x7f2beece842c in gcc3::callVirtualMethod(void*, unsigned int, void*, _typelib_TypeDescriptionReference*, bool, unsigned long*, unsigned int, unsigned long*, double*) /bridges/source/cpp_uno/gcc3_linux_x86-64/callvirtualmethod.cxx:75:5\n      #27 0x7f2beece2812 in cpp_call(bridges::cpp_uno::shared::UnoInterfaceProxy*, bridges::cpp_uno::shared::VtableSlot, _typelib_TypeDescriptionReference*, int, _typelib_MethodParameter*, void*, void**, _uno_Any**) /bridges/source/cpp_uno/gcc3_linux_x86-64/uno2cpp.cxx:233:13\n      #28 0x7f2beecdf668 in unoInterfaceProxyDispatch /bridges/source/cpp_uno/gcc3_linux_x86-64/uno2cpp.cxx:413:13\n      #29 0x7f2be9781c05 in binaryurp::IncomingRequest::execute_throw(binaryurp::BinaryAny*, std::__debug::vector<binaryurp::BinaryAny, std::allocator<binaryurp::BinaryAny> >*) const /binaryurp/source/incomingrequest.cxx:236:13\n      #30 0x7f2be977ba46 in binaryurp::IncomingRequest::execute() const /binaryurp/source/incomingrequest.cxx:79:26\n      #31 0x7f2be9844662 in request /binaryurp/source/reader.cxx:86:9\n      #32 0x7f2c5504c69b in cppu_threadpool::JobQueue::enter(void const*, bool) /cppu/source/threadpool/jobqueue.cxx:100:17\n      #33 0x7f2c5506ce34 in cppu_threadpool::ORequestThread::run() /cppu/source/threadpool/thread.cxx:165:31\n      #34 0x7f2c55077c34 in threadFunc /include/osl/thread.hxx:189:15\n      #35 0x7f2c5ef150ef in osl_thread_start_Impl(void*) /sal/osl/unx/thread.cxx:239:9\n      #36 0x7f2c5cd84ea4 in start_thread /usr/src/debug/glibc-2.17-c758a686/nptl/pthread_create.c:307\n      #37 0x7f2c5c48bb0c in clone /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:111", "timestamp": "2023-04-03 09:37:11.000000000"}, {"message": "Probable cause: https://gerrit.libreoffice.org/c/core/+/149921/comment/77e47231_8c7736f2/", "timestamp": "2023-04-03 12:06:58.000000000"}, {"message": "> Probable cause: https://gerrit.libreoffice.org/c/core/+/149921/comment/77e47231_8c7736f2/\n\nlocally reverting that <https://git.libreoffice.org/core/+/ae1285a593173cddf002f9b9ca9a6f1003f49285%5E%21> \"Try a different approach for cid#1524623\" does not fix my issue, though", "timestamp": "2023-04-03 12:22:51.000000000"}, {"message": "Hopefully should be fixed by https://gerrit.libreoffice.org/c/core/+/149966", "timestamp": "2023-04-03 13:42:57.000000000"}, {"message": "> Hopefully should be fixed by https://gerrit.libreoffice.org/c/core/+/149966\n\nyes, thanks; seen that fix it locally for me", "timestamp": "2023-04-03 14:14:09.000000000"}]}
{"thread_id": "6c6e42b7_69505592", "url": "https://gerrit.libreoffice.org/#/c/core/+/120433/7/sw/source/core/crsr/crsrsh.cxx@2123", "comments": [{"message": "Noel, the extractData looks dangerous, and its use likely leaks. Compare this use (where it's freed after passing to libreOfficeKitViewCallback), with e.g. TextFieldmark::~TextFieldmark implemented in https://gerrit.libreoffice.org/c/core/+/146014, where its ownership is passed to the libreOfficeKitViewCallback.\n\nIn lcl_LOKGetCommentPayload (https://gerrit.libreoffice.org/c/core/+/132808) it's leaked by converting to the returned std::string.\n\nIt definitely looks like the API is not used properly :)", "timestamp": "2023-04-03 06:40:23.000000000"}, {"message": "Yeah, I tried to make it integrate into the LOK stuff in desktop, and be reasonably performant i.e. not do too many allocations and de-allocations.\n\nI see now that was wasting my time, the desktop stuff copies the JSON memory buffers repeatedly, mostly because the underlying API (LOK) use char* everywhere.\n\nWe should really consider moving the LOK API out of the dark ages and use actual memory-managed types there.", "timestamp": "2023-04-03 07:50:27.000000000"}, {"message": "Possibly basing it on OStringBuffer could make sense then, it would at least make extracting OString more efficient.", "timestamp": "2023-04-03 08:23:56.000000000"}, {"message": "Note https://gerrit.libreoffice.org/c/core/+/149951 btw, just FYI if you decide to implement the memory-managed types approach - I wouldn't want that you wasted time because my changes there required you to re-do the work later.", "timestamp": "2023-04-03 08:26:31.000000000"}, {"message": "leak fix here: https://gerrit.libreoffice.org/c/core/+/149963", "timestamp": "2023-04-03 12:46:45.000000000"}]}
{"thread_id": "638944d6_633afd4b", "url": "https://gerrit.libreoffice.org/#/c/core/+/148752/2/sc/source/core/data/table6.cxx@260", "comments": [{"message": "I didn't try, but I think this could now replace a formula cell (that can have embedded line breaks and for which was bMultiLine=false) with an edit cell that certainly is not wanted.", "timestamp": "2023-03-17 18:06:10.000000000"}, {"message": "You are correct. Checked the various cases again now and I hope I did not forget any case. So this change gives the desired change.", "timestamp": "2023-03-20 08:53:23.000000000"}, {"message": "Done", "timestamp": "2023-04-03 06:43:10.000000000"}]}
{"thread_id": "4b3dcbfe_7aa8bfb9", "url": "https://gerrit.libreoffice.org/#/c/core/+/148752/5/sc/source/core/data/table6.cxx@260", "comments": [{"message": "As a general rule, in a short-circuited boolean expression, least expensive subexpressions should be executed first, so this should be\n\n    else if (eCellType != CELLTYPE_FORMULA && aString.indexOf('\\n') != -1)", "timestamp": "2023-04-03 10:53:30.000000000"}, {"message": "Addressed in the follow-up", "timestamp": "2023-04-03 11:00:15.000000000"}]}
{"thread_id": "222efd3f_ee94459e", "url": "https://gerrit.libreoffice.org/#/c/core/+/149682/1/svx/source/sdr/primitive2d/sdrattributecreator.cxx@448", "comments": [{"message": "The naming bSingleColor is confusing. You inspect a transparency gradient here. At least I didn't got it on first reading.", "timestamp": "2023-03-29 11:06:53.000000000"}, {"message": "No, rGradient here is already XGradient and contains RGB. It is the usage inside a XFillFloatTransparenceItem that makes this a transparence gradient, so consequently luminance() is used. From my POV all is correct.", "timestamp": "2023-03-29 12:11:43.000000000"}]}
{"thread_id": "6f3235a8_b4d452f7", "url": "https://gerrit.libreoffice.org/#/c/core/+/149682/1/svx/source/sdr/primitive2d/sdrattributecreator.cxx@924", "comments": [{"message": "Same as above.", "timestamp": "2023-03-29 11:06:53.000000000"}, {"message": "See above, too ;-)", "timestamp": "2023-03-29 12:11:43.000000000"}, {"message": "Ah, forgot resolved flag, sorry", "timestamp": "2023-03-29 12:13:12.000000000"}]}
{"thread_id": "f4c73c12_b0683aa1", "url": "https://gerrit.libreoffice.org/#/c/core/+/149899/1/svx/source/svdraw/svdobj.cxx@3226", "comments": [{"message": "eeek :-)\nCan't we rather create a new SdrObjKind::Empty identifier to use there?", "timestamp": "2023-04-01 07:08:41.000000000"}, {"message": "Yes, I know, but that's consistent with how SdrObject was used before. \n\nThe idea was to create a SdrObjKind::NewFrame, because an instance of plain SdrObject was used for frame creation and only that, but then there are a bunch of if (... == SdrObjKind::NONE) in writer that needs to be analyzed, if it means new frame creation or it means that SdrObjKind::NONE is used. But first would be good to fix the regression.", "timestamp": "2023-04-01 08:15:20.000000000"}, {"message": "Done", "timestamp": "2023-04-01 09:32:21.000000000"}]}
{"thread_id": "fda87003_7df8c862", "url": "https://gerrit.libreoffice.org/#/c/core/+/149207/10/svx/source/svdraw/svdotext.cxx@1278", "comments": [{"message": "Looking at cid#1524600 Logically dead code, then\n\nif it bIsVerticalWriting is false then we always return here", "timestamp": "2023-03-29 11:46:03.000000000"}, {"message": "Done", "timestamp": "2023-03-30 20:18:42.000000000"}, {"message": "Ah yes... the goal was to replace the also replace the algorithm for vertical writing, but first wanted to get it in for the usual case and later add tests and implementation for vertical writing.", "timestamp": "2023-03-31 14:46:28.000000000"}]}
{"thread_id": "a242a944_0ec1d493", "url": "https://gerrit.libreoffice.org/#/c/core/+/149207/10/svx/source/svdraw/svdotext.cxx@1293", "comments": [{"message": "so this must be equivalent to if (true) I presume", "timestamp": "2023-03-29 11:46:03.000000000"}, {"message": "Done", "timestamp": "2023-03-30 20:18:42.000000000"}]}
{"thread_id": "e1e3d830_d86e690b", "url": "https://gerrit.libreoffice.org/#/c/core/+/149207/10/svx/source/svdraw/svdotext.cxx@1300", "comments": [{"message": "and this else is deadcode ?", "timestamp": "2023-03-29 11:46:03.000000000"}, {"message": "Done", "timestamp": "2023-03-30 20:18:42.000000000"}]}
{"thread_id": "e4e2f758_828a5ba3", "url": "https://gerrit.libreoffice.org/#/c/core/+/148142/4/svx/source/tbxctrls/bulletsnumbering.cxx@113", "comments": [{"message": "You could move these lines out of the if-else thing. Or comment that this is a temporary solution and you keep it to make it easy to revert.", "timestamp": "2023-03-06 13:54:13.000000000"}, {"message": "Done", "timestamp": "2023-03-06 19:10:16.000000000"}]}
{"thread_id": "20a3813c_e664b5b8", "url": "https://gerrit.libreoffice.org/#/c/core/+/148142/8/svx/source/tbxctrls/bulletsnumbering.cxx@114", "comments": [{"message": "Why these commented lines are present?", "timestamp": "2023-03-09 11:02:59.000000000"}, {"message": "Heiko Tiezte told to keep these comments as these are temporary changes, so kept the comments if these changes need to be reverted.", "timestamp": "2023-03-09 11:04:15.000000000"}, {"message": "Said \"if the changes are temporary\"... and \"I still think removing all the code is better\".", "timestamp": "2023-03-09 12:53:33.000000000"}, {"message": "Arvind: can you remove the comments?", "timestamp": "2023-03-28 15:28:52.000000000"}, {"message": "Done", "timestamp": "2023-03-29 10:48:52.000000000"}, {"message": "Sorry just, read the mail was about to change it.", "timestamp": "2023-03-29 12:55:29.000000000"}]}
{"thread_id": "f87cf579_81651539", "url": "https://gerrit.libreoffice.org/#/c/core/+/148528/10/writerfilter/source/dmapper/DomainMapper.cxx@3436", "comments": [{"message": "Do we really need this? This removes commands of the fields in deleted text.", "timestamp": "2023-03-27 12:46:51.000000000"}, {"message": "Ack", "timestamp": "2023-03-29 14:58:32.000000000"}]}
{"thread_id": "5388dd6c_d0cac0ff", "url": "https://gerrit.libreoffice.org/#/c/core/+/148528/4/writerfilter/source/dmapper/DomainMapper_Impl.cxx@5345", "comments": [{"message": "This code doesn't care about the order of the w:ins and w:del, i.e. it keeps always the first one (by the way, Google Docs does the opposite). The bigger problem that it doesn't care about track changes, so it could result a regression at e.g. an index field, where the text argument of the command contains multiple \"HYPERLINK\" in multiple runs.", "timestamp": "2023-03-10 13:39:25.000000000"}, {"message": "Done", "timestamp": "2023-03-17 10:09:18.000000000"}]}
{"thread_id": "2b6a386c_caf68600", "url": "https://gerrit.libreoffice.org/#/c/core/+/148528/7/writerfilter/source/dmapper/DomainMapper_Impl.cxx@5417", "comments": [{"message": "Why do we want to include deleted parts? This results broken hyperlinks, when w:del is there before w:ins in the DOCX file.", "timestamp": "2023-03-17 09:43:49.000000000"}, {"message": "If the command line is empty or contains only a space, the item not deleted must be added. Of course, this is only necessary for change tracking, otherwise you don't need to check anything, just add it.", "timestamp": "2023-03-17 12:23:40.000000000"}, {"message": "I have attached a new test document to the bug report (created in MSO), which shows the remaining problem. When I checked the first commit, I noticed, that m_nToken cleared before processing all parts of the comment, so we must keep it somehow, maybe using delInstText.", "timestamp": "2023-03-17 16:03:38.000000000"}, {"message": "Ack", "timestamp": "2023-03-29 14:58:32.000000000"}]}
{"thread_id": "1ccb56f2_20c3a077", "url": "https://gerrit.libreoffice.org/#/c/core/+/148528/8/writerfilter/source/dmapper/DomainMapper_Impl.cxx@5420", "comments": [{"message": "I described here how can we keep change tracking later. It works in Writer, so likely in MSO, too.", "timestamp": "2023-03-17 10:06:24.000000000"}, {"message": "Ack", "timestamp": "2023-03-29 14:58:32.000000000"}]}
{"thread_id": "ca9bfef5_94ae3595", "url": "https://gerrit.libreoffice.org/#/c/core/+/148528/10/writerfilter/source/dmapper/DomainMapper_Impl.cxx@6655", "comments": [{"message": "This results the rejection of the deleted commands of fields, which doesn't contain inserted or plain command (empty command).\n\nIt seems, this condition is only for the unnecessary \"case NS_ooxml::LN_EG_RunInnerContent_delText\" of DomainMapper.cxx.\n\nBut likely at the end of the function, we need to set back the state to the normal by pContext->SetCommandType(false).", "timestamp": "2023-03-27 12:46:51.000000000"}, {"message": "If both command lines contain elements, the last one entered will be executed. Such is the case for this unit test document, ins, del then separate, win is del.\n\nIn the tdf150086 test it fails if it rejects the assembly of the deleted commands, but there are separate ones for processing the two types of commands.\nI'm still working on it.", "timestamp": "2023-03-27 14:00:58.000000000"}, {"message": "Done", "timestamp": "2023-03-29 14:58:32.000000000"}]}
{"thread_id": "7caee08e_3f65bad2", "url": "https://gerrit.libreoffice.org/#/c/core/+/149059/7/svtools/source/config/colorcfg.cxx@396", "comments": [{"message": "I don't know why, but even after choosing \"Dark\" I'm getting a much lighter color for the Calc grid (using KDE, clear profile). The color I'm getting in the grid is #C0C0C0. The background goes to a dark color as expected.\n\nFTR, when using LO 7.5.1 (the official release) I do get #666666.", "timestamp": "2023-03-22 23:57:04.000000000"}, {"message": "Maybe it has changed recently. Easy to update, thanks for catching.", "timestamp": "2023-03-23 07:17:00.000000000"}, {"message": "The grid color was set for some reason to be not smart. Meaning COL_AUTO reads the value effectively from #define SC_STD_GRIDCOLOR COL_LIGHTGRAY. Now it is smart and COL_AUTO converted into the default color (now depending on the theme). SC_STD_GRIDCOLOR is obsolete now for the grid but still used on tools > options > calc > view > visual aids.", "timestamp": "2023-03-28 15:59:17.000000000"}]}
{"thread_id": "e5583848_c64d5b1e", "url": "https://gerrit.libreoffice.org/#/c/core/+/149175/2/basic/source/classes/sb.cxx@1852", "comments": [{"message": "It is best to use const auto& [...], because Coverity will warn about unintended copy that impacts performance (oy-oy, copy of a 8-byte struct, what could be more disastrous ;))", "timestamp": "2023-03-21 16:11:34.000000000"}, {"message": "I will change it where ever it is possible to change. Here, I get a compiler error.", "timestamp": "2023-03-22 08:15:56.000000000"}]}
{"thread_id": "c9d7e7ff_3a51255e", "url": "https://gerrit.libreoffice.org/#/c/core/+/149175/2/basic/source/classes/sb.cxx@1855", "comments": [{"message": "This is equivalent to\n\n    return {false, nVersion};\n\nbecause the return type is known.\n\nAdditionally, whenever a failure is explicitly returned, I'd prefer if we returned 0 as the version, so that it shows that the second parameter has no meaning in this case.", "timestamp": "2023-03-21 16:11:34.000000000"}, {"message": "Ack", "timestamp": "2023-03-22 08:15:56.000000000"}]}
{"thread_id": "520f0908_f9ea1e01", "url": "https://gerrit.libreoffice.org/#/c/core/+/149175/1/basic/source/classes/sbxmod.cxx@2018", "comments": [{"message": "nStart is sal_uInt32. This assignment can overflow the destination, and will give a sanitizer warning.\n\nYou need to do a conditional assignment: if nStart >= nMax then ... else sal_Int16 nStartTemp = nStart\n\nNote also that \"nStart % nMax\" also does not allow a situation when nStartTemp == nMax: in this case, nStart % nMax will return 0. So it must be >=, not >.", "timestamp": "2023-03-20 18:41:01.000000000"}, {"message": "Or keep the previous code, taking into account that for any nStart < nMax, it will produce nStartTemp = nStart, and nDebugFlagsTemp = 0; and only detect the fact of \"overflow\" (when nDebugFlagsTemp != 0), telling the outer code that indeed, we must write version 13. So that after writing all the methods, we can decide if the header would need v13 or v12.", "timestamp": "2023-03-21 06:49:15.000000000"}, {"message": "Should we set a flag in the method itself and check this flag for all the methods in SbModule::StoreBinaryData?", "timestamp": "2023-03-21 08:53:20.000000000"}, {"message": "Or pass down a variable to SbxObject::StoreData(rStrm), i.e., changing it to SbxObject::StoreData(rStrm, nVer) and change all the affected positions.", "timestamp": "2023-03-21 09:43:11.000000000"}, {"message": "Either way would work - but personally I'd prefer the third way ;-) - i.e., return a std::pair<bool, bool>, which would mean \"success, needed to use v.13\", or std::pair<bool, sal_uInt32> for \"success, version\". I dislike the by-reference out arguments (but it's just my personal preference ;))", "timestamp": "2023-03-21 09:54:14.000000000"}, {"message": "By the way, here are some thoughts I wanted to share:\n\n1. Maybe drop the default argument value from SbiImage::Save. This would enable you to make sure that we didn't miss any single place where the version is stored.\n2. In this code, please add a warning (or maybe even an assert) that the value of nStart is no larger than 0xffff*0x7fff (since 0x8000 in nDebugFlagsTemp is used as a flag, and we strip it away when reading in SbMethod::LoadData, any larger value would not work).", "timestamp": "2023-03-21 10:37:17.000000000"}, {"message": "The assertion still misses", "timestamp": "2023-03-21 15:46:34.000000000"}, {"message": "Sorry, which assertion misses? Could you please create a changeset with such a failing assertion?", "timestamp": "2023-03-21 16:11:34.000000000"}, {"message": "The assertion of your reply before:\n2. In this code, please add a warning (or maybe even an assert) that the value of nStart is no larger than 0xffff*0x7fff (since 0x8000 in nDebugFlagsTemp is used as a flag, and we strip it away when reading in SbMethod::LoadData, any larger value would not work).", "timestamp": "2023-03-21 16:20:40.000000000"}, {"message": "OK, but please show the specific code that fails.", "timestamp": "2023-03-21 17:33:52.000000000"}, {"message": "Ack", "timestamp": "2023-03-22 08:16:11.000000000"}]}
{"thread_id": "f0aca565_5d072c46", "url": "https://gerrit.libreoffice.org/#/c/core/+/149175/2/basic/source/classes/sbxmod.cxx@1653", "comments": [{"message": "Do we return a B_LEGACYVERSION somewhere? Otherwise, it seems we loose this, and I'd better avoid this change of functionalituy here - it is unrelated, so if wanted, we could do it separately.", "timestamp": "2023-03-21 16:11:34.000000000"}, {"message": "The above const auto [bSuccess, nVersion] = SbxObject::StoreData(rStrm); returns the correct version.", "timestamp": "2023-03-22 08:15:56.000000000"}, {"message": "What is the correct version? Does it return B_LEGACYVERSION here? And *can* it return a later (or older) version here in some circumstances? I ask because it *looks* now like it can be different here, at least sometimes, other than B_LEGACYVERSION that was hardcoded here before.", "timestamp": "2023-03-22 08:20:30.000000000"}, {"message": "It depends on the SbxObject::StoreData, either version 12 or version 13 depending on saving the methods.", "timestamp": "2023-03-22 08:26:10.000000000"}, {"message": "Possibly you are right, and we could just go ahead and drop writing the legacy version format here (and elsewhere)... That was the idea behind the version 12 anyway.", "timestamp": "2023-03-22 08:56:21.000000000"}, {"message": "Ack", "timestamp": "2023-03-24 13:12:29.000000000"}]}
{"thread_id": "541f4228_586df6c4", "url": "https://gerrit.libreoffice.org/#/c/core/+/149175/2/basic/source/classes/sbxmod.cxx@2027", "comments": [{"message": "The \"B_CURVERSION\" name is IMO bad. Maybe rename it to a more semantically meaningful one, like B_LARGE_METHOD_ADDRESS_VERSION? Or even simply B_IMG_VERSION_13 (and the two other to B_IMG_VERSION_12 and _11)", "timestamp": "2023-03-21 16:11:34.000000000"}, {"message": "Thank you for your replies! Should we add some B_IMG_VERSION_NONE 0x00000...?", "timestamp": "2023-03-21 16:20:40.000000000"}, {"message": "No, a plain 0 literal is OK for cases when we return false.", "timestamp": "2023-03-21 17:33:52.000000000"}, {"message": "Ack", "timestamp": "2023-03-22 08:16:11.000000000"}]}
{"thread_id": "614cddad_deedf662", "url": "https://gerrit.libreoffice.org/#/c/core/+/149175/5/basic/source/classes/sbxmod.cxx@2021", "comments": [{"message": "You didn't address my concern about the overflow, and the use of >= instead of >.\n\nThe code could look like:\n\n    sal_Int16 nStartTemp = nStart % nMax;\n    sal_uInt16 nDebugFlagsTemp = static_cast<sal_uInt16>(nDebugFlags);\n    if (nStart >= nMax)\n    {\n        nDebugFlagsTemp = (nStart / nMax) | 0x8000;\n        nVersion = B_IMG_VERSION_13;\n    }\n\nbecause when nStart < nMax, nStart % nMax is equal to nStart anyway, and no disambiguation is needed.\n\nAnd did you post a code with the assert I asked? In which change set please?", "timestamp": "2023-03-23 19:16:05.000000000"}, {"message": "Hi Mike, thank you for yor feedback. I did not find the time during my daily work to adjust the code yet. I hope I can change it in the next days. IMHO, the assertion is not needed anymore after your change anymore?", "timestamp": "2023-03-23 21:49:17.000000000"}, {"message": "Why? I don't see what prevents nStart to be larger than 0x0000ffff * 0x00007fff?", "timestamp": "2023-03-24 04:38:30.000000000"}, {"message": "Ack", "timestamp": "2023-03-24 13:12:29.000000000"}]}
{"thread_id": "0aa986c4_9ed4c5c3", "url": "https://gerrit.libreoffice.org/#/c/core/+/149175/2/basic/source/sbx/sbxarray.cxx@379", "comments": [{"message": "This nVersion will shadow the one declared above on line 372, not update it. Additionally, if it would update it, it would overwrite the value with the result of the next invocation - while you need to make sure that the highest value is used as the end result.", "timestamp": "2023-03-21 16:11:34.000000000"}, {"message": "Done", "timestamp": "2023-03-22 08:15:56.000000000"}]}
{"thread_id": "efa9c65f_be0524d3", "url": "https://gerrit.libreoffice.org/#/c/core/+/149574/2/sw/source/core/doc/DocumentContentOperationsManager.cxx@302", "comments": [{"message": "I don't really know the rules about when const_cast should not be used.\n\nIn this case, I expect that it was marked as const just because the expectation was that there was no intention to change it. I could easily change pMark to be non-const if necessary.\n\nAs a pointer, it shouldn't hurt to just \"make it modifiable\". PatchSet 1 used a findMark instead - but that is a lot of work to just get back the same pointer.", "timestamp": "2023-03-25 09:42:58.000000000"}, {"message": "If possible, you should always try to avoid const_cast. But the fix is probably not to use findMark() but to make sure pMark is not const in the first place. Probably it was const here to make sure you don't modify its start/end without sorting marks, but you want it as non-const to rename it. So at the end this is probably fine here.", "timestamp": "2023-03-27 21:12:39.000000000"}]}
{"thread_id": "ca47e9e4_630f7ebe", "url": "https://gerrit.libreoffice.org/#/c/core/+/149589/2/sc/source/ui/unoobj/docuno.cxx@3740", "comments": [{"message": "Hi Olivier, shouldn't these messages be localizable?\n\nWhat I'm asking is not specific to this patch, but a more general comment. I did a quick search in the code and noticed that these `RuntimeException` messages aren't localizable, and in many cases these exceptions don't even have messages.", "timestamp": "2023-03-27 00:03:51.000000000"}, {"message": "i dont think translators would be terribly happy about translation 10000 error messages without context - many of which are going to be inscrutable without the surrounding C++ code.\n\nas a developer i'd rather get a non-translated error message in a bug report.", "timestamp": "2023-03-27 11:17:29.000000000"}, {"message": "I meant that because this error message will be shown when writing Basic scripts.\n\nBut I agree with you, in bug reports it'd better to have the message in English.", "timestamp": "2023-03-27 11:23:02.000000000"}]}
{"thread_id": "b7ac11da_3a891027", "url": "https://gerrit.libreoffice.org/#/c/core/+/149185/5/sw/source/core/table/swtable.cxx@1622", "comments": [{"message": "just assert(pBoxFormula) here", "timestamp": "2023-03-26 17:10:32.000000000"}, {"message": "Done", "timestamp": "2023-03-27 07:15:36.000000000"}]}
{"thread_id": "4d53955d_33432ada", "url": "https://gerrit.libreoffice.org/#/c/core/+/148739/5/sw/source/core/table/swtable.cxx@1627", "comments": [{"message": "I would say you should just\n    assert(pBoxFormula)\nhere", "timestamp": "2023-03-26 17:08:48.000000000"}, {"message": "Done", "timestamp": "2023-03-26 22:24:25.000000000"}]}
{"thread_id": "fed5079f_4d34eb2b", "url": "https://gerrit.libreoffice.org/#/c/core/+/149536/1/drawinglayer/source/processor2d/vclpixelprocessor2d.cxx@b1015", "comments": [{"message": "Rather \"needed\" I suppose but I still don't understand the sentence.", "timestamp": "2023-03-24 17:59:36.000000000"}, {"message": "...is always a good hint OF what is needed...", "timestamp": "2023-03-26 01:28:54.000000000"}, {"message": "Indeed!", "timestamp": "2023-03-26 08:09:29.000000000"}]}
{"thread_id": "761bd71c_e2a5a208", "url": "https://gerrit.libreoffice.org/#/c/core/+/148112/30/sc/qa/unit/ucalc_solver.cxx@88", "comments": [{"message": "you call toInt32 .. so the type is sal_Int32. I would avoid types like and int, long as the byte size can differ from platform to platform.", "timestamp": "2023-03-22 01:15:59.000000000"}, {"message": "Done", "timestamp": "2023-03-22 02:44:01.000000000"}]}
{"thread_id": "6b7996b6_2d5128ab", "url": "https://gerrit.libreoffice.org/#/c/core/+/148112/26/sc/source/core/data/SolverSettings.cxx@20", "comments": [{"message": "if you don't have a valid ScTable* (put nullptr as the input paramete) you would just crash. Because of this you can just change the input parameter and the instance variable to ScTable&", "timestamp": "2023-03-16 07:43:48.000000000"}, {"message": "Fixed in PS 29.", "timestamp": "2023-03-21 15:22:04.000000000"}]}
{"thread_id": "8228ac14_88d8be61", "url": "https://gerrit.libreoffice.org/#/c/core/+/148112/2/sc/source/ui/miscdlgs/optsolver.cxx@785", "comments": [{"message": "Can use `comphelper::findValue` from include/comphelper/sequence.hxx", "timestamp": "2023-03-03 19:09:01.000000000"}, {"message": "Thanks for the tip!", "timestamp": "2023-03-03 22:54:05.000000000"}]}
{"thread_id": "309f1016_f8433d7c", "url": "https://gerrit.libreoffice.org/#/c/core/+/148540/4/xmloff/qa/unit/text.cxx@1077", "comments": [{"message": "static_cast<sal_Int32>(10000) should fix the 32bit build failure from Jenkins.", "timestamp": "2023-03-23 15:45:22.000000000"}, {"message": "Done", "timestamp": "2023-03-24 07:18:52.000000000"}]}
{"thread_id": "288c762a_ee4e966d", "url": "https://gerrit.libreoffice.org/#/c/core/+/148693/1/extensions/source/bibliography/framectr.cxx@484", "comments": [{"message": "I have tested the change with the following test:\n\n #!/usr/bin/python\n from libreoffice.uno.propertyvalue import mkPropertyValues\n from uitest.framework import UITestCase\n from uitest.uihelper.common import get_state_as_dict\n import time\n class Test(UITestCase):\n     def testUNO(self):\n             time.sleep(5)\n             print(self.xUITest.executeCommand(\".uno:CloseDoc\")\n\nit works but when I change the line to:\n else if( _rURL.Complete == \"\" || aCommand == \"\" )\n\ntest still passes and doesn't fail.", "timestamp": "2023-03-12 08:08:56.000000000"}, {"message": "What will be displayed without your patch? What is the difference? What should happen when you change your commands. Does it execute correctly when you set a break point in the C++ implementation?", "timestamp": "2023-03-15 15:03:59.000000000"}, {"message": "Hi Andreas,\n\nI have tested manually for hours (actually since yesterday... with help of SAL_DEBUG() and break points), I noticed that the `else if` line is never(?) called. That's why(?) removing the \".uno:CloseDoc\" and \"CloseDoc\" do nothing.\n\n(Steps: `Writer` -> `Tools` -> `Bibliography Database` -> `Tools` -> `Customize...` -> add `Close(.uno:CloseDoc)` to the Assigned Commands and save. Then run it under the `File`)\n\nAlso, the python test I provided above is actually wrong. It should open a Bibliography Database from `writer`->`Tools`, and call `.uno:CloseDoc` from there, and so on...\nBut we don't need it at this time since I called `.uno:CloseDoc` from Bibliography Database window manually; it works, it closes the window/document, but it never calls the `else if` line. Maybe the `else if` redundant here? I'm not sure.\n\nWhat is the best action we should take here?\n\nThanks :)", "timestamp": "2023-03-16 12:56:46.000000000"}, {"message": "Tried to trigger the .uno:CloseDoc command from the UI, but without any luck. Maybe it is called from a macro or something?", "timestamp": "2023-03-17 14:47:07.000000000"}, {"message": "I tried to call .uno:CloseDoc from a macro but still `else if` line never executed.\n\nI removed the line inside of `else if` and put it inside the `if(aCommand == \"Bib/Mapping\")` (line #383) as:\n\n    if(aCommand == \"Bib/Mapping\")\n    {\n        // m_xDatMan->CreateMappingDialog(pParent);\n        Application::PostUserEvent( LINK( this, BibFrameController_Impl,\n                                    DisposeHdl ) );\n    }\n\nand run it by clicking `Column Arrangement` to see if it closes the window or not.\n> it closes the window and gives the same warnings as when we press the close button (which is located at right-top of the window):\n\n`\nwarn:unotools.config:54076:54076:unotools/source/config/configitem.cxx:500: Exception from PutProperties com.sun.star.lang.IllegalArgumentException message: \"configmgr inappropriate property value at /run/media/cicek/D/lo/core/configmgr/source/access.cxx:1518\" ArgumentPosition: -1\nwarn:unotools.config:54076:54076:unotools/source/config/configitem.cxx:500: Exception from PutProperties com.sun.star.lang.IllegalArgumentException message: \"configmgr inappropriate property value at /run/media/cicek/D/lo/core/configmgr/source/access.cxx:1518\" ArgumentPosition: -1\nwarn:legacy.osl:54076:54076:unotools/source/config/configpaths.cxx:250: Path does not start with expected prefix\nwarn:legacy.osl:54076:54076:unotools/source/config/configpaths.cxx:250: Path does not start with expected prefix\nwarn:legacy.osl:54076:54076:unotools/source/config/configpaths.cxx:250: Path does not start with expected prefix\nwarn:unotools.config:54076:54076:unotools/source/config/configitem.cxx:953: Exception from SetSetProperties com.sun.star.lang.IllegalArgumentException message: \"at /run/media/cicek/D/lo/core/configmgr/source/access.cxx:1136\" ArgumentPosition: 0\n`", "timestamp": "2023-03-19 13:56:50.000000000"}, {"message": "I could not reproduce the exectued command but imho it should work since the command was replaced so I would wait for future bug reports which imho will not arrise.", "timestamp": "2023-03-23 10:37:17.000000000"}, {"message": "I think so.", "timestamp": "2023-03-23 17:56:51.000000000"}]}
{"thread_id": "706fa7b3_6f5f219d", "url": "https://gerrit.libreoffice.org/#/c/core/+/148693/2/extensions/source/bibliography/framectr.cxx@484", "comments": [{"message": "The first check basically repeats the second now. When the full URI is \".uno:CloseDoc\", the \"Path\" of this URI is \"CloseDoc\", and that is what will then be in the aCommand.\n\nSo *if* the old slot URL was unneeded (which needs testing), then the respective test should had been removed, not changed.", "timestamp": "2023-03-23 12:51:36.000000000"}, {"message": "When I tested manually(UI), called uno command/(or old slot) from macro and from Python UI test; it doesn't even execute the function containing the `else if` which is at the line #373:\n //class XDispatch\n void BibFrameController_Impl::dispatch(/* */)\n\nLet's see if there will be any problems/bugs in the future.\n\nThank you all for your valuable comments!", "timestamp": "2023-03-23 17:56:51.000000000"}]}
{"thread_id": "8685d7a8_01cba22b", "url": "https://gerrit.libreoffice.org/#/c/core/+/149072/2/vcl/source/font/fontmetric.cxx@186", "comments": [{"message": "For backwards compatibility of (user-modifiable) configuration data, should this code cater for cases where FontsDontUseUnderlineMetrics items still contain additional, comma-separated size and offset data?", "timestamp": "2023-03-20 07:41:45.000000000"}, {"message": "`FontsDontUseUnderlineMetrics` was introduced late in 7.5 cycle, and I don\u2019t think it was advertised anywhere. Also editing it in expert configuration dialog was broken because of the use of commas as after editing extra space would be inserted before each comma and the strings would no longer match, making it unusable for users to edit.", "timestamp": "2023-03-23 11:57:35.000000000"}, {"message": "Done", "timestamp": "2023-03-23 12:47:12.000000000"}]}
{"thread_id": "2effd04f_552cdbf1", "url": "https://gerrit.libreoffice.org/#/c/core/+/148600/7/dbaccess/source/ui/app/AppController.cxx@1028", "comments": [{"message": "This was done already in https://gerrit.libreoffice.org/c/core/+/148335 Let's rebase and see what happens", "timestamp": "2023-03-19 07:57:19.000000000"}]}
{"thread_id": "0e49e3b8_a118469a", "url": "https://gerrit.libreoffice.org/#/c/core/+/148600/5/reportdesign/source/ui/dlg/Navigator.cxx@574", "comments": [{"message": "Could be simply int", "timestamp": "2023-03-13 14:59:42.000000000"}, {"message": "Done", "timestamp": "2023-03-23 09:53:43.000000000"}]}
{"thread_id": "e8c94322_f5255e3b", "url": "https://gerrit.libreoffice.org/#/c/core/+/149221/1/sw/qa/core/layout/layout.cxx@271", "comments": [{"message": "The mac failure is:\n\nhttps://ci.libreoffice.org/job/gerrit_mac/142249/console\n\n- Expected: 8051\n- Actual  : 8855\n\nSo perhaps assert that the new left is >8000 to be more tolerant?\n\nWindows is similar:\n\n- Expected: 8051\n- Actual  : 8832", "timestamp": "2023-03-22 07:33:41.000000000"}, {"message": "You can do that using getXPath(), see e.g.\n\nhttps://github.com/libreoffice/core/blob/403ea882af35337431e0f67aa973c5f046deb630/sw/qa/extras/layout/layout2.cxx#L1169-L1172", "timestamp": "2023-03-22 08:06:04.000000000"}, {"message": "Done", "timestamp": "2023-03-22 16:49:21.000000000"}]}
{"thread_id": "f93d897a_d3a9c051", "url": "https://gerrit.libreoffice.org/#/c/core/+/149221/2/sw/qa/core/layout/layout.cxx@269", "comments": [{"message": "Nit: I think it was useful to have your original comment here, so we know what was the good value, what is the bad (at least on your machine) and then see that 7000 was selected as a limit. Not a huge problem, but I would say your original comment was nicer. :-)", "timestamp": "2023-03-22 09:56:55.000000000"}, {"message": "Done", "timestamp": "2023-03-22 16:49:21.000000000"}]}
{"thread_id": "b1dd2503_da24e5a6", "url": "https://gerrit.libreoffice.org/#/c/core/+/149012/3/sw/qa/extras/uiwriter/uiwriter3.cxx@1770", "comments": [{"message": "Next time you need to assert something like this, you could assert the position of the shape (from the layout dump) before and after, and make sure it doesn't change.\n\nThat's a bit more precise than just looking at the page count.", "timestamp": "2023-03-22 10:39:48.000000000"}, {"message": "That precision is exactly the problem. I don't trust that anything about the exact position of an anchored anything is either true or reliable across platforms, so I prefer to develop visually obvious tests that have safe(r) testing assumptions.\n\nI can just imagine the horror of trying to correct some anchoring placement and having hundreds of unit tests \"failing\".", "timestamp": "2023-03-22 11:05:09.000000000"}, {"message": "Nah, what I had mind is you record the old position, you change the anchor and you assert that the new one is the same. I would hope that is actually true.\n\nI agree that hardcoding some exact position is not great if you can't prove it's the correct value. :-)", "timestamp": "2023-03-22 13:07:00.000000000"}]}
{"thread_id": "988a103f_b8b22737", "url": "https://gerrit.libreoffice.org/#/c/core/+/149012/1/sw/source/core/doc/docfly.cxx@375", "comments": [{"message": "If this doesn't exist, then ALL the settings come from aOldH, so no need to change nPos at all. That is the heart of this fix.", "timestamp": "2023-03-17 00:13:48.000000000"}]}
{"thread_id": "0776225d_322c4e8a", "url": "https://gerrit.libreoffice.org/#/c/core/+/149012/1/sw/source/core/doc/docfly.cxx@410", "comments": [{"message": "This means that it is \"From Left\", the only time that GetPos has meaning. Adding this is a minor optimization.", "timestamp": "2023-03-17 00:13:48.000000000"}, {"message": "OK - LEFT is for hori. This is \"from Top/from bottom\" for Vert. Same diff.", "timestamp": "2023-03-22 00:00:47.000000000"}]}
{"thread_id": "2e348338_8c271147", "url": "https://gerrit.libreoffice.org/#/c/core/+/149012/2/sw/source/core/doc/docfly.cxx@366", "comments": [{"message": "If there are no position attributes coming in, then nothing should need to be corrected. That means that the old settings are still valid with the new anchor, and thus have no meaning difference and shouldn't be modified. This is what the bug report is proving. (I leave the comment in place because it is true enough if this means \"no change in GetPos()\".)", "timestamp": "2023-03-22 00:00:47.000000000"}]}
{"thread_id": "c7cc2ea5_005d0b2e", "url": "https://gerrit.libreoffice.org/#/c/core/+/149012/2/sw/source/core/doc/docfly.cxx@368", "comments": [{"message": "This is basically saying the same thing. If only RES_ANCHOR changes, then that by definition means that we have no pHoriOrientItem - and thus a valid position that shouldn't be changed. A \"to character\" position knows about paragraph and page coordinates and if those don't change, they are still valid as is without adjustment to the anchor position.\n\nThe only time we have a problem to fix AFAICS is when the anchor changes and the RelationOrient is no longer appropriate. In that case we always get a new p*OrientItem. If GetPos changed, then that means the user (or earlier algorithm) already adjusted for the change. If there is no difference in GetPos even though the relation changed, then that is the only time we (likely) need to recalculate.\n\nSo the typical example would be a change from \"to paragraph\" at position 0 to a \"to page\" anchor. When the orientation is specifies a numbered offset (Get*Orient() == NONE), then the unchanged offset needs to factor in the moved anchor position.\n\nOf course, in case the dialog user actually WANTED to have the fly at page position 0, then we will (still) frustrate their attempt and they will have to make the adjustment a second time (without changing the anchor, and thus it will work). A small price to pay. The normal situation will just be a menu \"change anchor to ...\" in which the positioning is all automatic.\n\nAgain, I leave the comment because the only time this is needed is when there is an anchor change, and that is the basic idea that I get when reading it. It is just the term \"also\" that throws me off.\n\nIf I had to reword the comment, I would say:\nIf only the anchor type has changed (char -> para -> page) and the absolute position is unchanged even though there is a new relative orientation (likely because the old orientation is not valid for the new anchor type), then adjust the position to account for the moved anchor position.", "timestamp": "2023-03-22 00:00:47.000000000"}]}
{"thread_id": "061375c9_ccdfe77f", "url": "https://gerrit.libreoffice.org/#/c/core/+/149223/2/sw/source/ui/chrdlg/swuiccoll.cxx@129", "comments": [{"message": "I'd move this clear before the early return", "timestamp": "2023-03-22 10:17:16.000000000"}, {"message": "Done", "timestamp": "2023-03-22 10:31:08.000000000"}]}
{"thread_id": "e609c475_9604a26b", "url": "https://gerrit.libreoffice.org/#/c/core/+/149223/2/sw/source/ui/chrdlg/swuiccoll.cxx@206", "comments": [{"message": "ditto", "timestamp": "2023-03-22 10:17:16.000000000"}, {"message": "Done", "timestamp": "2023-03-22 10:31:08.000000000"}]}
{"thread_id": "9bb1b134_615b2925", "url": "https://gerrit.libreoffice.org/#/c/core/+/149121/3/sw/source/core/doc/DocumentFieldsManager.cxx@605", "comments": [{"message": "here pHt && !pUpdateField is valid", "timestamp": "2023-03-21 10:15:15.000000000"}, {"message": "Done", "timestamp": "2023-03-21 18:17:31.000000000"}]}
{"thread_id": "9f2f4331_23f40502", "url": "https://gerrit.libreoffice.org/#/c/core/+/149121/3/sw/source/core/doc/DocumentFieldsManager.cxx@642", "comments": [{"message": "here pHt && !pUpdateField is a crash", "timestamp": "2023-03-21 10:15:15.000000000"}, {"message": "Ack", "timestamp": "2023-03-21 18:17:31.000000000"}]}
{"thread_id": "d3026a08_86d8d837", "url": "https://gerrit.libreoffice.org/#/c/core/+/149088/1/bridges/source/cpp_uno/gcc3_linux_mips64/except.cxx@157", "comments": [{"message": "* This would at most be a `SAL_INFO` (see e.g. similar code in `RTTI::getRTTI` in `bridges/source/cpp_uno/gcc3_linux_x86-64/rtti.cxx`).\n\n* There is a spurious \"c\" before \"generated\".\n\n* There is a space missing after \"for\".", "timestamp": "2023-03-21 14:16:04.000000000"}, {"message": "Done", "timestamp": "2023-03-22 07:54:50.000000000"}]}
{"thread_id": "4997352d_06b14bf9", "url": "https://gerrit.libreoffice.org/#/c/core/+/149115/1/extensions/qa/update/test_update.cxx@112", "comments": [{"message": "Did you see this modified test code actually being executed?  (It is only executed in `--enable-online-update` builds, cf. `extensions/Module_extensions.mk`, and none of the <https://ci.libreoffice.org/job/gerrit_master/> run such a configuration).\n\nThis string must match the hardcoded value given in the `extensions/qa/update/simple.xml` test file.  (And I think it is not a good idea to introduce a configuration property for such a value that is only used during testing in the first place.)", "timestamp": "2023-03-20 08:00:32.000000000"}, {"message": "Ok. So there is no need to introduce the new DownloadURL property? \nand also most of the hardcoded url still left in the source files are inside test functions or instances or openoffice.org and these are not to be moved.", "timestamp": "2023-03-20 22:21:40.000000000"}, {"message": "Done", "timestamp": "2023-03-21 12:04:24.000000000"}]}
{"thread_id": "64585c52_d19be78a", "url": "https://gerrit.libreoffice.org/#/c/core/+/149115/1/svx/source/dialog/SafeModeDialog.cxx@87", "comments": [{"message": "Shouldn't this be \"version\"?", "timestamp": "2023-03-20 08:00:32.000000000"}, {"message": "Ack", "timestamp": "2023-03-20 22:23:29.000000000"}]}
{"thread_id": "4bda4992_d170d12a", "url": "https://gerrit.libreoffice.org/#/c/core/+/149078/4/sc/qa/unit/subsequent_filters_test4.cxx@989", "comments": [{"message": "Which loop?", "timestamp": "2023-03-18 16:30:19.000000000"}, {"message": "This is a useless comment from another test that I forget to delete.", "timestamp": "2023-03-18 16:33:12.000000000"}]}
{"thread_id": "3b1f6c9b_11e1782d", "url": "https://gerrit.libreoffice.org/#/c/core/+/149078/5/sc/qa/unit/subsequent_filters_test4.cxx@1004", "comments": [{"message": "Is there a reason why we *require* that it selects the \"Bad\" not \"bad\" here? Imo, it maybe enough just assert that something is found, and is not \"BAD\", so indeed case-insensitive search succeeded.", "timestamp": "2023-03-20 17:28:46.000000000"}, {"message": "By implementation in https://gerrit.libreoffice.org/c/core/+/146747/2/sc/source/core/data/stlpool.cxx#421:~:text=first%20%3D%20static_cast%3CScStyleSheet*%3E(pFound)%3B, it returns the first element in case-insensitive search. I suppose it is expected behavior to return the first element in case-insensitive search.\n\nIf not, I will change the test.", "timestamp": "2023-03-20 17:38:54.000000000"}, {"message": "You are right that the implementation uses the first one. And maybe it is even important - in the sense that if this suddenly starts to give a different choice, some existing documents would break.\n\nHowever, this is not in the frame of this bug. For this but, it is irrelevant and is an implementation detail.\n\nWe don't even know what \"the first\" means: is the list e.g. sorted? Then it would not match the order in which the entries appear in the file.\n\nThe \"Bad\" happened to be the name of a pre-defined style, and that resulted in the problem. However, I would ask you to use a name that is not assigned to any pre-defined styles; and order them in the file in the order not matching their sort order (let a name starting from capital letter go after the name using all small letters). This would make the test better suited. And please, just make sure that in the last, case-insensitive match, we only test that (1) the search succeeds; (2) the name of the style is not equal to the search string; and (3) that the found name matches the search string case-insensitively (using OUString::equalsIgnoreAsciiCase).", "timestamp": "2023-03-20 18:29:28.000000000"}]}
{"thread_id": "ef90017f_ad6e67c1", "url": "https://gerrit.libreoffice.org/#/c/core/+/148252/4/sw/source/core/doc/DocumentFieldsManager.cxx@b622", "comments": [{"message": "do we want to update fields outside of tables too?\n\nit would be better to do that in a separate commit not here in this mostly reformatting one?", "timestamp": "2023-03-17 10:49:06.000000000"}, {"message": "Yeah, ok: Leaving it in for now. First need to untangle this mess some more.", "timestamp": "2023-03-20 18:42:46.000000000"}]}
{"thread_id": "a8135244_f9226d41", "url": "https://gerrit.libreoffice.org/#/c/core/+/148252/4/sw/source/core/doc/DocumentFieldsManager.cxx@641", "comments": [{"message": "pUpdateField could be null here?", "timestamp": "2023-03-17 10:49:06.000000000"}, {"message": "Split off into follow-up commit at https://gerrit.libreoffice.org/c/core/+/149121/1.", "timestamp": "2023-03-20 18:42:46.000000000"}]}
{"thread_id": "ca93ad30_c91d512a", "url": "https://gerrit.libreoffice.org/#/c/core/+/148252/4/sw/source/core/doc/DocumentFieldsManager.cxx@666", "comments": [{"message": "here is still a check if the field is in a table", "timestamp": "2023-03-17 10:49:06.000000000"}, {"message": "Ack", "timestamp": "2023-03-20 18:42:46.000000000"}]}
{"thread_id": "6b68bef1_7859d6a3", "url": "https://gerrit.libreoffice.org/#/c/core/+/149004/1/oox/qa/unit/export.cxx@1255", "comments": [{"message": "Here is a little typo", "timestamp": "2023-03-17 13:37:31.000000000"}, {"message": "Done", "timestamp": "2023-03-17 14:24:43.000000000"}]}
{"thread_id": "7abe5f4d_22f760b3", "url": "https://gerrit.libreoffice.org/#/c/core/+/149156/2/scripting/java/com/sun/star/script/framework/io/XInputStreamImpl.java@44", "comments": [{"message": "(I think I wouldn't reformat this added part from <https://github.com/apache/openoffice/commit/7e29bacc90c4b1b9788c3b71dfacd17daecde7a7> \"Fix some errors in the scripting module's XInputStreamImpl:\"'s\n\n  ( nBytesToRead > 0 )\n\n.)", "timestamp": "2023-03-20 12:38:30.000000000"}, {"message": "Done", "timestamp": "2023-03-20 13:06:07.000000000"}]}
{"thread_id": "69a38d8b_28266be7", "url": "https://gerrit.libreoffice.org/#/c/core/+/149156/2/scripting/java/com/sun/star/script/framework/io/XInputStreamImpl.java@45", "comments": [{"message": "This part is deliberately dropped by <https://github.com/apache/openoffice/commit/7e29bacc90c4b1b9788c3b71dfacd17daecde7a7> \"Fix some errors in the scripting module's XInputStreamImpl:\".", "timestamp": "2023-03-20 12:38:30.000000000"}, {"message": "Done", "timestamp": "2023-03-20 13:06:07.000000000"}]}
{"thread_id": "13e7ab42_aa8a4f34", "url": "https://gerrit.libreoffice.org/#/c/core/+/149156/2/scripting/java/com/sun/star/script/framework/io/XInputStreamImpl.java@49", "comments": [{"message": "Why reformat this line from <https://github.com/apache/openoffice/commit/7e29bacc90c4b1b9788c3b71dfacd17daecde7a7> \"Fix some errors in the scripting module's XInputStreamImpl:\"'s\n\n              if ( totalBytesRead < aData[ 0 ].length )\n\n?", "timestamp": "2023-03-20 12:38:30.000000000"}, {"message": "Done", "timestamp": "2023-03-20 13:06:07.000000000"}]}
{"thread_id": "9cc3e72f_5c727dd6", "url": "https://gerrit.libreoffice.org/#/c/core/+/148792/5/bridges/source/cpp_uno/gcc3_linux_sparc64/cpp2uno.cxx@373", "comments": [{"message": "Add whitespace between the <<", "timestamp": "2023-03-18 06:59:06.000000000"}, {"message": "Done", "timestamp": "2023-03-18 16:39:22.000000000"}]}
{"thread_id": "3bbc4d6d_91e82a45", "url": "https://gerrit.libreoffice.org/#/c/core/+/148792/6/bridges/source/cpp_uno/gcc3_linux_sparc64/cpp2uno.cxx@373", "comments": [{"message": "Add whitespace after \"bridges\", and remove after nFunctionIndex so the formatting is harmonious", "timestamp": "2023-03-18 10:24:21.000000000"}, {"message": "Done", "timestamp": "2023-03-18 16:39:22.000000000"}]}
{"thread_id": "8d5c8a59_939b889b", "url": "https://gerrit.libreoffice.org/#/c/core/+/148792/10/bridges/source/cpp_uno/gcc3_linux_sparc64/cpp2uno.cxx@373", "comments": [{"message": "* What is reported here is not something unusual that should be reported with a `SAL_WARN`.  (It is arguably not even something that should be reported with a `SAL_INFO`.  This debug code is present ever since the surrounding code got introduced in <https://git.libreoffice.org/core/+/3cb45765f2accfa749cc56a087059600ec467f28%5E!/> \"(initial) sparc64 port\", and looks like it got blindly copied from any of the pre-existinging `bridges/source/cpp_uno/gcc3_{linux_mips,linux_mips64,linux_sparc,solaris_sparc}/cpp2uno.cxx`.)\n\n* Unconditionally (i.e., regardless of the `--enable-sal-log` configuration setting) constructing an `OString cstr` here is not efficient, and is not needed in the first place (as `SAL_WARN` knows how to emit `OUString` values directly).\n\nI would suggest to either revert this modification, or drop this part of the code completely.", "timestamp": "2023-03-20 09:51:07.000000000"}, {"message": "Ekta: I submitted https://gerrit.libreoffice.org/c/core/+/149157", "timestamp": "2023-03-20 12:29:23.000000000"}]}
{"thread_id": "8fd87775_54f50c44", "url": "https://gerrit.libreoffice.org/#/c/core/+/148792/5/sc/source/filter/excel/xestream.cxx@598", "comments": [{"message": "You don't need to add a newline at the end with \"\\n\" here", "timestamp": "2023-03-18 06:59:06.000000000"}, {"message": "You removed a blank line. That is not what I meant. Please read more carefully.", "timestamp": "2023-03-18 10:24:21.000000000"}, {"message": "Done", "timestamp": "2023-03-18 16:39:22.000000000"}]}
{"thread_id": "0062473b_ffe75abe", "url": "https://gerrit.libreoffice.org/#/c/core/+/148849/8/drawinglayer/source/processor2d/vclpixelprocessor2d.cxx@941", "comments": [{"message": "Step -> Stop", "timestamp": "2023-03-17 15:41:32.000000000"}, {"message": "Yes, got it.", "timestamp": "2023-03-17 19:49:32.000000000"}]}
{"thread_id": "7388edfe_a16086d2", "url": "https://gerrit.libreoffice.org/#/c/core/+/149034/1/desktop/source/app/dispatchwatcher.cxx@b293", "comments": [{"message": "Likely I have confused you; sorry for that.\n\nMy point was, that *either* you use UNO_QUERY_THROW, expressing that null is not a proper result, and then you don't need additional checks below (it would throw if the reference was null - and this must be caught and handled elsewhere), *or* you use UNO_QUERY, anticipating the null as a valid outcome, and then check that.\n\nAs I also mentioned, in this case the THROW is not OK, so you need to use UNO_QUERY + check. So please keep the check; to avoid large indented conditional blocks, check for null, and then return early.\n\nAdditionally, there is no need to call .is() explicitly; since long time already, uno::Reference has an operator bool, which is equivalent, so you can simply call\n\n    if (!xModel)\n        return {};", "timestamp": "2023-03-17 05:48:04.000000000"}, {"message": "Done", "timestamp": "2023-03-17 18:16:37.000000000"}]}
{"thread_id": "1c095440_dad76790", "url": "https://gerrit.libreoffice.org/#/c/core/+/149034/1/desktop/source/app/dispatchwatcher.cxx@294", "comments": [{"message": "I'd split this, because the master documents have different export filter range - and this is the reason of the patch, to show why the conversion could potentially fail. So in case of com.sun.star.text.GlobalDocument, I'd return \"Writer master\".", "timestamp": "2023-03-17 05:48:04.000000000"}, {"message": "Done", "timestamp": "2023-03-17 18:16:37.000000000"}]}
{"thread_id": "8ebcb578_cc89a8af", "url": "https://gerrit.libreoffice.org/#/c/core/+/149034/1/desktop/source/app/dispatchwatcher.cxx@700", "comments": [{"message": "Please note that you can return an empty string. Please use a check to output the added diagnostic *only when the string is not empty*.", "timestamp": "2023-03-17 05:48:04.000000000"}, {"message": "Done", "timestamp": "2023-03-17 18:21:07.000000000"}]}
{"thread_id": "1ce88ede_84118cb3", "url": "https://gerrit.libreoffice.org/#/c/core/+/149034/2/desktop/source/app/dispatchwatcher.cxx@704", "comments": [{"message": "For the future, remember that you can use the C++17 syntax, where 'if' allows initialization block:\n\n    if (OUString name = getName(xDoc); name != \"\")\n        ...\n\nThe benefit is that you limit the scope of the variable only to where it's actually used.\n\nYou do not need to change it here, I just wanted to mention it in the hope it could be useful to you in the future.", "timestamp": "2023-03-17 18:21:07.000000000"}]}
{"thread_id": "4d12a07d_fd886401", "url": "https://gerrit.libreoffice.org/#/c/core/+/149043/2/forms/source/xforms/convert.cxx@134", "comments": [{"message": "If only appendAscii could take std::string_view, the call to c_str could be eliminated, to use the known length from the std::string.", "timestamp": "2023-03-17 10:38:30.000000000"}]}
{"thread_id": "f0ac7971_8ee6ae9b", "url": "https://gerrit.libreoffice.org/#/c/core/+/148527/1/chart2/source/tools/InternalData.cxx@512", "comments": [{"message": "Can't use range-based for loop here. `nCol` is `vector<Any>` now but `GridPrinter::set()` expects `size_t`.", "timestamp": "2023-03-09 18:15:33.000000000"}, {"message": "Done", "timestamp": "2023-03-17 14:26:11.000000000"}]}
{"thread_id": "cbd1a274_7821b6db", "url": "https://gerrit.libreoffice.org/#/c/core/+/148527/1/chart2/source/tools/InternalData.cxx@527", "comments": [{"message": "Same here.", "timestamp": "2023-03-09 18:15:33.000000000"}, {"message": "Okay, got that. I'll change the loop in some other file.", "timestamp": "2023-03-11 14:09:06.000000000"}, {"message": "Done", "timestamp": "2023-03-17 14:26:11.000000000"}]}
{"thread_id": "5ed21d6f_01491a35", "url": "https://gerrit.libreoffice.org/#/c/core/+/148527/4/idl/source/objects/object.cxx@111", "comments": [{"message": "Can we use `pS` as loop variable?", "timestamp": "2023-03-13 22:08:34.000000000"}, {"message": "I had the same idea. I'll try it.", "timestamp": "2023-03-14 03:38:42.000000000"}, {"message": "I would just rename the variable pS to pAttr in the for loop and drop the line with pS.", "timestamp": "2023-03-15 13:34:00.000000000"}, {"message": "I tried that in Patchset 5. But a unit test failed, so I restored that change.", "timestamp": "2023-03-15 20:22:16.000000000"}, {"message": "Imo, it has nothing todo with your patch set. If there is an error on a build, check if the error is related to your patch. If not, try to rebase the patch on top of the master build.", "timestamp": "2023-03-16 10:33:30.000000000"}, {"message": "It seems you were right. The failed unit test was unrelated to this patch. The build works fine now.", "timestamp": "2023-03-17 13:05:03.000000000"}, {"message": "Btw. rather than rebasing, better to ask in the dev chat, so someone can resume the build.", "timestamp": "2023-03-17 14:37:11.000000000"}, {"message": "Was my fault, sry", "timestamp": "2023-03-17 14:45:17.000000000"}]}
{"thread_id": "0622dee6_7e593ce4", "url": "https://gerrit.libreoffice.org/#/c/core/+/148483/8/sw/qa/uitest/writer_tests4/tdf151741.py@46", "comments": [{"message": "But here, no chance to edit the tree item back.", "timestamp": "2023-03-13 13:52:59.000000000"}, {"message": "It seems I don't get the focus here anymore", "timestamp": "2023-03-13 13:58:59.000000000"}, {"message": "Done", "timestamp": "2023-03-17 14:22:48.000000000"}]}
{"thread_id": "6b33475b_5f65ae8e", "url": "https://gerrit.libreoffice.org/#/c/core/+/148896/3/svx/source/tbxctrls/tbcontrl.cxx@4029", "comments": [{"message": "Surrounding code always breaks the \"return\" statement into a new line.", "timestamp": "2023-03-16 08:23:36.000000000"}]}
{"thread_id": "99f58464_5dab1fe9", "url": "https://gerrit.libreoffice.org/#/c/core/+/148995/1/codemaker/source/cppumaker/cpputype.cxx@1689", "comments": [{"message": "use OUString and avoid the additional FileStream operator << overload?", "timestamp": "2023-03-16 14:15:34.000000000"}, {"message": "Yeah, probably best. Any code that uses UNO-generated headers is LO code anyway, and uses OUString already.", "timestamp": "2023-03-16 14:34:10.000000000"}, {"message": "(Note, this is about using std::string in the implementation here in codemaker, not about std::string as used by the generated to_string functions.  I don't have a std::string vs. OUString preference for the latter.)", "timestamp": "2023-03-16 14:36:33.000000000"}, {"message": "Ack", "timestamp": "2023-03-16 14:56:46.000000000"}]}
{"thread_id": "e457e991_2d4ed9bf", "url": "https://gerrit.libreoffice.org/#/c/core/+/148995/1/codemaker/source/cppumaker/cpputype.cxx@1832", "comments": [{"message": "here and elsewhere, you can combine the handledValues count() and insert() calls into just insert() and check the return value", "timestamp": "2023-03-16 14:15:34.000000000"}, {"message": "Ah, clever!", "timestamp": "2023-03-16 14:34:10.000000000"}, {"message": "Done", "timestamp": "2023-03-17 07:20:59.000000000"}]}
{"thread_id": "88fa7e6d_78326571", "url": "https://gerrit.libreoffice.org/#/c/core/+/148995/3/codemaker/source/cppumaker/cpputype.cxx@1814", "comments": [{"message": "or just unconditionally always call `includes.addRtlUstringHxx()` in `ConstantGroup::dumpHdlFile` and be done with it", "timestamp": "2023-03-16 20:05:55.000000000"}, {"message": "Done", "timestamp": "2023-03-17 07:20:59.000000000"}]}
{"thread_id": "de25e234_6584c6e4", "url": "https://gerrit.libreoffice.org/#/c/core/+/148995/9/codemaker/source/cppumaker/cpputype.cxx@1824", "comments": [{"message": "curious: why treat zero separately?", "timestamp": "2023-03-17 07:20:59.000000000"}, {"message": "Just an idea, but I can drop it, sure.", "timestamp": "2023-03-17 07:51:06.000000000"}, {"message": "Done", "timestamp": "2023-03-17 09:20:34.000000000"}]}
{"thread_id": "4c425a48_5757cf49", "url": "https://gerrit.libreoffice.org/#/c/core/+/148943/2/sw/source/core/view/viewsh.cxx@b2217", "comments": [{"message": "Do you know if it's safe to remove this unconditionally? I'm not sure if the non-LOK case still needs this or not. Perhaps you do.", "timestamp": "2023-03-16 15:55:13.000000000"}, {"message": "So yes this was added on my previous patch (De-static-izing colors in SwViewOption) because I thought it was needed in order to change the color in all windows, but the colors are already copied over to other windows in apphdl.cxx when bOnlyInvalidateCurrentView=false (in non-LOK case) because it iterates all the viewshells. I tried changing the theme when multiple windows were open and the colors got updated in all windows.", "timestamp": "2023-03-16 19:43:41.000000000"}]}
{"thread_id": "ffe8339d_932fe5a3", "url": "https://gerrit.libreoffice.org/#/c/core/+/148943/2/sw/source/uibase/uno/unotxdoc.cxx@3419", "comments": [{"message": "Given that currently the non-dark and the dark scheme only differs by name, this looks reasonable for now.", "timestamp": "2023-03-16 15:55:13.000000000"}, {"message": "I'll remove the FIXME and make it not use a hardcoded name in an upcoming patch", "timestamp": "2023-03-16 19:47:41.000000000"}]}
{"thread_id": "ff3c748e_dc1201b7", "url": "https://gerrit.libreoffice.org/#/c/core/+/148905/1/desktop/source/app/dispatchwatcher.cxx@299", "comments": [{"message": "This either needs to be declared static or inside an anonymous namespace, so that it is not visible outside this file.", "timestamp": "2023-03-15 07:23:54.000000000"}, {"message": "I put it in an anonymous namespace in the update.", "timestamp": "2023-03-15 17:09:45.000000000"}]}
{"thread_id": "82f228fd_49b6d062", "url": "https://gerrit.libreoffice.org/#/c/core/+/148905/4/desktop/source/app/dispatchwatcher.cxx@288", "comments": [{"message": "And it's better to take a reference to XInterface. Any interface is convertible to XInterface; and the detail that the xDoc is XPrintable in the DispatchWatcher::executeDispatchRequests is not important for us. We need a different interface anyway.", "timestamp": "2023-03-16 08:59:56.000000000"}, {"message": "It will be updated.", "timestamp": "2023-03-16 20:49:47.000000000"}]}
{"thread_id": "7ab9f8b4_58edb211", "url": "https://gerrit.libreoffice.org/#/c/core/+/148905/4/desktop/source/app/dispatchwatcher.cxx@291", "comments": [{"message": "This intermediate interface is not needed. The passed xDoc should be directly queried for XServiceInfo.", "timestamp": "2023-03-16 07:39:36.000000000"}, {"message": "Got it, but I'm wondering how to use xServiceInfo to obtain the service name. From my understanding, I can only do \"OUString aDocService=xServiceInfo.get()->getImplementationName();\" to obtain the implementation name, but it's different from \"aMediaDesc.getUnpackedValueOrDefault(utl::MediaDescriptor::PROP_DOCUMENTSERVICE, OUString() );\"'s output.", "timestamp": "2023-03-16 20:47:32.000000000"}, {"message": "Do you know how to use xServiceInfo to obtain the service name?", "timestamp": "2023-03-16 20:49:31.000000000"}, {"message": "I'll post an update with xModel, but no xServiceInfo. Please correct me if there is an eaier way using xServiceInfo.", "timestamp": "2023-03-16 21:03:18.000000000"}, {"message": "Ah - sorry, I got confused. Indeed, in your implementation, it's xServiceInfo that is unneeded.\n\nBut imo, more canonical is using ServiceInfo, like here:\n\nhttps://opengrok.libreoffice.org/xref/core/filter/source/pdf/pdfexport.cxx?r=62f8bf1f#453", "timestamp": "2023-03-16 21:23:10.000000000"}, {"message": "Hi, can we chat on IRC for a bit about how to submit a new patch to this?", "timestamp": "2023-03-16 21:24:15.000000000"}, {"message": "My main question is that I can't push new commits to this fix. Should I open a new gerrit fix, or there is a better way to fix this?", "timestamp": "2023-03-16 21:26:30.000000000"}]}
{"thread_id": "2a641546_d423edcf", "url": "https://gerrit.libreoffice.org/#/c/core/+/148905/4/desktop/source/app/dispatchwatcher.cxx@292", "comments": [{"message": "This \"_THROW\" looks strange. You are creating a string for informational purposes; inability to get the string would only mean that the diagnostic would not contain the extra bit of information, but should not result in conversion failure.\n\nBetter use UNO_QUERY, and in case of empty reference, just return an empty string, in which case, the diagnostic should be as before.", "timestamp": "2023-03-16 07:39:36.000000000"}, {"message": "I'll probably remove this line, since here I get service name from aMediaDesc, which depends only on xModel.", "timestamp": "2023-03-16 20:49:31.000000000"}]}
{"thread_id": "036ddcf5_7b590dc9", "url": "https://gerrit.libreoffice.org/#/c/core/+/148905/4/desktop/source/app/dispatchwatcher.cxx@293", "comments": [{"message": "And this check after the UNO_QUERY_THROW is useless (the _THROW guarantees that you have a valid reference here).", "timestamp": "2023-03-16 07:39:36.000000000"}, {"message": "Should I remove this check if I remove line 292.", "timestamp": "2023-03-16 20:49:31.000000000"}]}
{"thread_id": "56ca096d_da4759ee", "url": "https://gerrit.libreoffice.org/#/c/core/+/148905/4/desktop/source/app/dispatchwatcher.cxx@298", "comments": [{"message": "Why this conversion? You can compare OUString to the literals directly, and avoid the operation (getting encoding, additional allocation, conversion, deallocation).", "timestamp": "2023-03-16 07:39:36.000000000"}, {"message": "I'll abandon this conversion.", "timestamp": "2023-03-16 20:47:32.000000000"}]}
{"thread_id": "c72eb2d0_8cc96486", "url": "https://gerrit.libreoffice.org/#/c/core/+/148905/4/desktop/source/app/dispatchwatcher.cxx@708", "comments": [{"message": "Note that you are only adding the new diagnostic here inside a \"!bMultiFileTarget\" condition, which means that it would be missing when bMultiFileTarget is true. But this is not OK, since the bMultiFileTarget is for export, while our new diagnostic is for import. So better add the new diagnostic between line 706 and 707, conditionally only on the name being not empty.", "timestamp": "2023-03-16 07:44:10.000000000"}, {"message": "I can put it outside the \"if\".", "timestamp": "2023-03-16 20:50:20.000000000"}]}
{"thread_id": "c0df1dac_336ca41c", "url": "https://gerrit.libreoffice.org/#/c/core/+/147914/1/sc/source/ui/view/output.cxx@2457", "comments": [{"message": "This entire function is more or less a copy-paste of the above ScOutputData::DrawNoteMarks(). Factoring out the common code and using a lambda function or other context switch instead would be much preferable.", "timestamp": "2023-02-28 16:38:04.000000000"}, {"message": "Thank you for review. Yeah, I followed wise Heiko's advice in Bugzilla that propotype of implementation can be gotten from DrawNoteMarks. Initially I thought to utilize and extend the original function but finally did copy&paste for 2 reasons:\n\n1. factoring will require a higher level of expertise in understanding of LibreOffice code to intrude into existing code for improvements, I do not meet that level at now. \n\n2. There is also a comment for DrawNoteMarks code that said (citation):\n\n> //TODO: moggi Need to check if this can't be written simpler\n\nThat means that original function is already a subject of change. I don't know who are moggy, but it seems he is willing (and might know better how) to enhance original function and that will lead to factoring of this one.\n\n---\nIf current approach is a patch blocker, I will think that I can do with that. But I, personally, would like to keep things as is because of the above. Please let me know.", "timestamp": "2023-02-28 17:00:43.000000000"}, {"message": "Moggi is a former core developer, but that comment is in already since\n\n commit c06dbbe7594c2a0b5a5b19f8e183d9c421e6e094\n CommitDate: Wed Feb 29 23:37:51 2012 +0100\n\nand if that could really be written simpler then the same would probably be true for the copy-pasted code, so a common function for both would actually benefit.\n\nI wouldn't say this is a patch blocker. If you agree we could first merge the patch and then factor out in a follow-up change, but I'd wouldn't like to keep the duplication for longer.", "timestamp": "2023-03-04 17:43:49.000000000"}, {"message": "Recently I tried to simplify it in one way or another and did not found a good way to do that. While it was initially a copy&paste, but currently they are the same only for 2 cycles that are moving through cells. But these exactly 2 cycles used in same manner in other functions as well, for example see AddPDFNotes function (that is similar to DrawNoteMarks as well) that right below these two. Everything inside these cycles are different while uses similar variable names. The difference is largely due to where the triangle is drawn and the corresponding coordinate calculation, the top corner and the bottom corner are very different in the calculations. If use lambda functions they will have so many arguments that it will not look like a simplification at all. To be honest, after I tried to simplify this matter, I realized that these functions are not duplicates as you claim. Maybe they can be united somehow without loosing the readability, but I don't know how. So I cannot promise I would be able to do that. Have you delved into their content?", "timestamp": "2023-03-05 19:03:44.000000000"}, {"message": "I didn't have time. Let's postpone re-factoring.", "timestamp": "2023-03-07 11:37:43.000000000"}]}
{"thread_id": "bdeb6170_19f5e81a", "url": "https://gerrit.libreoffice.org/#/c/core/+/148059/3/sd/qa/unit/import-tests2.cxx@1346", "comments": [{"message": "The defTabSz defined in the imported document appears to affect the Autofit font scale here.", "timestamp": "2023-03-16 11:38:44.000000000"}]}
{"thread_id": "c230d6a7_144f0ae6", "url": "https://gerrit.libreoffice.org/#/c/core/+/148492/2/sc/qa/unit/uicalc/uicalc.cxx@2216", "comments": [{"message": "Hi Paris,\nMaybe it makes sense to add an assert after each dispatchCommand to make sure it works correctly ?", "timestamp": "2023-03-09 08:50:41.000000000"}, {"message": "Done", "timestamp": "2023-03-13 11:02:00.000000000"}]}
{"thread_id": "bc35978b_9a03d71d", "url": "https://gerrit.libreoffice.org/#/c/core/+/148541/4/sw/source/filter/html/htmlatr.cxx@1667", "comments": [{"message": "Hi! You may add an OSL_ENSURE for this case (like above or below). Thank you!", "timestamp": "2023-03-15 15:13:54.000000000"}, {"message": "Done\n(Thanks for the review!)", "timestamp": "2023-03-15 21:26:12.000000000"}]}
{"thread_id": "c396d378_5ff5bf26", "url": "https://gerrit.libreoffice.org/#/c/core/+/148913/3/chart2/source/tools/ObjectIdentifier.cxx@750", "comments": [{"message": "Just for curiosity, is it ok to remove the \"-1\" ?", "timestamp": "2023-03-16 07:37:06.000000000"}, {"message": "yes. The original size of the object included the trailing zero, while getLength does not", "timestamp": "2023-03-16 07:40:09.000000000"}, {"message": "Ok thank you for the quick feedback! :-)", "timestamp": "2023-03-16 07:56:06.000000000"}]}
{"thread_id": "95b74b00_ba1a489e", "url": "https://gerrit.libreoffice.org/#/c/core/+/147311/5/desktop/source/lib/init.cxx@6920", "comments": [{"message": "Forgot to remove this?", "timestamp": "2023-02-22 15:28:05.000000000"}, {"message": "Done", "timestamp": "2023-02-22 15:42:39.000000000"}]}
{"thread_id": "e2f3d154_c83ca6e4", "url": "https://gerrit.libreoffice.org/#/c/core/+/147311/5/desktop/source/lib/init.cxx@6929", "comments": [{"message": "Forgot to remove this? Sounds like a leftover from a debug session.", "timestamp": "2023-02-22 15:28:05.000000000"}, {"message": "Done", "timestamp": "2023-02-22 15:42:39.000000000"}]}
{"thread_id": "ae71d3f5_d6c8a1bf", "url": "https://gerrit.libreoffice.org/#/c/core/+/147311/5/sfx2/source/view/viewsh.cxx@1441", "comments": [{"message": "Forgot to remove this?", "timestamp": "2023-02-22 15:28:05.000000000"}, {"message": "Done", "timestamp": "2023-02-22 15:42:46.000000000"}]}
{"thread_id": "99ee39f3_599a75fe", "url": "https://gerrit.libreoffice.org/#/c/core/+/148249/3/sw/source/core/doc/DocumentFieldsManager.cxx@b639", "comments": [{"message": "i'm not seeing what is the replacement for this call?", "timestamp": "2023-03-14 10:51:43.000000000"}, {"message": "TBL_BOXATR is never used on UpdateTableFields -- all uses have been replaced by SwTable::SwitchToInternal....", "timestamp": "2023-03-14 21:45:57.000000000"}]}
{"thread_id": "cde8c2cf_b00bd4e5", "url": "https://gerrit.libreoffice.org/#/c/core/+/148249/3/sw/source/core/doc/DocumentFieldsManager.cxx@611", "comments": [{"message": "these things are all RES_TXTATR_FIELD", "timestamp": "2023-03-14 10:51:43.000000000"}, {"message": "Ack", "timestamp": "2023-03-14 21:45:57.000000000"}]}
{"thread_id": "08fc46e4_5c2275f4", "url": "https://gerrit.libreoffice.org/#/c/core/+/148249/3/sw/source/core/doc/DocumentFieldsManager.cxx@656", "comments": [{"message": "these ones are RES_BOXATR_FORMULA", "timestamp": "2023-03-14 10:51:43.000000000"}, {"message": "Ack. Note that RES_BOXATR_FORMULA/SwTableBoxFormula and RES_TXTATR_FIELD/SwFormatField->GetField() == SwTableField, both derive from SwTableFormula.", "timestamp": "2023-03-14 21:45:57.000000000"}]}
{"thread_id": "70d3892c_b8c9e736", "url": "https://gerrit.libreoffice.org/#/c/core/+/148806/1/writerfilter/source/dmapper/DomainMapper_Impl.cxx@1661", "comments": [{"message": "a make sw.check didn't find any examples of specifically setting h = 0.", "timestamp": "2023-03-15 09:47:54.000000000"}]}
{"thread_id": "65dc47b4_83cc8c58", "url": "https://gerrit.libreoffice.org/#/c/core/+/148897/1/writerfilter/source/dmapper/DomainMapper.cxx@3638", "comments": [{"message": "Allowing this and asserting against it inside didn't find any existing unit tests in make check.", "timestamp": "2023-03-15 01:38:23.000000000"}]}
{"thread_id": "1ed83e56_6e503800", "url": "https://gerrit.libreoffice.org/#/c/core/+/115188/2/sw/source/core/layout/objectformattertxtfrm.cxx@240", "comments": [{"message": "FYI: this assert is hit by tdf#138498 comment 4's attachment 167590 \"brosjyre 8.5.docx\"", "timestamp": "2023-03-14 12:39:28.000000000"}]}
{"thread_id": "de990eb7_ce275e06", "url": "https://gerrit.libreoffice.org/#/c/core/+/52120/2/sot/qa/cppunit/test_sot.cxx@174", "comments": [{"message": "is it intentional that this is exactly the same test as the previous (\"tdf#52547 prefer BITMAP over HTML\") one?", "timestamp": "2023-03-09 10:42:06.000000000"}, {"message": "To some extent, yes. This array of preferred formats (order defines the priority) was a minefield to touch, so I wanted to turn the 4 bugreports mentioned here into a set of asserts (each human description -> one or more asserts) to make sure that all the bugs are fixed at the same time.\n\nIf you look at \"prefer BITMAP over HTML\" for one bug and then \"prefer image over html over text\" in an other bug, it was intentional to translate those into these asserts. But perhaps the tdf#78801 comment should be moved up and then the 3 asserts can be merged into just 2.\n\nThat didn't occur to me back then, but it would keep this test readable and would avoid the duplicated assert. Should I do that or you're already at it because you touch this code for other reasons?", "timestamp": "2023-03-09 13:13:43.000000000"}, {"message": "So was mostly a confusion on my part that \"BITMAP\" and \"HTML\" in the first comment shall actually mean the same things as \"imager\" (sic) and \"html\" in the second one (rather than the second code line's usage of `SotClipboardFormatId::BITMAP` being a potential copy/paste error from the first code line).\n\nPlese feel free to follow up on this yourself.  It will be a while before I touch this for good for other reasons, if at all.", "timestamp": "2023-03-09 13:40:03.000000000"}, {"message": "OK. See https://gerrit.libreoffice.org/c/core/+/148847", "timestamp": "2023-03-14 11:15:38.000000000"}]}
{"thread_id": "923a1dc9_5fa53d99", "url": "https://gerrit.libreoffice.org/#/c/core/+/148213/2/sw/source/core/table/swtable.cxx@b1652", "comments": [{"message": "are these really the same items as above? iirc RES_BOXATR_FORMULA is an item on the table itself while the fields are RES_TXTATR_FIELD that have a hint in a textnode in the table.\n\n(it is extremely unclear to me what the benefit is of 2 different ways to define table formulas)", "timestamp": "2023-03-07 10:50:19.000000000"}, {"message": "True, will fix that. :/", "timestamp": "2023-03-09 23:14:34.000000000"}, {"message": "Done", "timestamp": "2023-03-12 19:46:35.000000000"}]}
{"thread_id": "4ed53e76_92972fc9", "url": "https://gerrit.libreoffice.org/#/c/core/+/148765/2/sw/source/core/text/EnhancedPDFExportHelper.cxx@1251", "comments": [{"message": "i dont think this can be true here because there is a frame for it, but checking doesn't hurt.", "timestamp": "2023-03-13 12:51:27.000000000"}]}
{"thread_id": "a3926908_6113a19d", "url": "https://gerrit.libreoffice.org/#/c/core/+/148745/2/sc/source/ui/vba/vbaapplication.cxx@1342", "comments": [{"message": "This is incorrect conversion. Please use the same o3tl::convert as used in the Word's method. See also: https://gerrit.libreoffice.org/c/core/+/137855", "timestamp": "2023-03-13 05:31:02.000000000"}, {"message": "Done", "timestamp": "2023-03-13 14:05:52.000000000"}, {"message": "Thanks!\nNote by the way, how existing documentation may be misleading: the text on the MS help page indeed mentioned that 0.035, which was wrong.\nYou should check the *actual behavior*, not the documentation.", "timestamp": "2023-03-13 14:48:56.000000000"}]}
{"thread_id": "7f33eb99_53a6fbce", "url": "https://gerrit.libreoffice.org/#/c/core/+/148431/2/sw/source/core/text/EnhancedPDFExportHelper.cxx@b1184", "comments": [{"message": "so in that case nRealLevel is always -1 and this used to produce PDFWriter::Heading? i wonder if that was intentional, it very much looks like an accident.\n\nof course despite PDF saying you should either use PDFWriter::Heading or PDFWriter::H1.. but not mix them in same document, there is already another place here that intentionally produces PDFWriter::Heading.", "timestamp": "2023-03-13 12:36:02.000000000"}]}
{"thread_id": "c81675d6_a7d0c61f", "url": "https://gerrit.libreoffice.org/#/c/core/+/148431/2/sw/source/core/text/EnhancedPDFExportHelper.cxx@1219", "comments": [{"message": "pTextNd->IsOutline() returns true not only for nodes which give GetAttrOutlineLevel() > 0, but also for outline-numbered lists; so this assert fails now e.g. in https://ci.libreoffice.org/job/gerrit_mac/141520/console", "timestamp": "2023-03-13 11:04:29.000000000"}, {"message": "oh dear, i see you already uploaded a fix, thanks a lot...", "timestamp": "2023-03-13 12:36:02.000000000"}]}
{"thread_id": "3b0740fc_e208e5e5", "url": "https://gerrit.libreoffice.org/#/c/core/+/148635/2/comphelper/source/misc/lok.cxx@181", "comments": [{"message": "Hm, this means that existing calls to setCompatFlag() kept old flags, but now this isn't true anymore. Seeing that we do have multiple compat flags, are you sure this change is correct?\n\nIf your motivation is to be able to clear flags, perhaps add a new resetCompatFlags() function, use that from tests and revert setCompatFlag() / isCompatFlagSet() to the old behavior?\n\nThanks.", "timestamp": "2023-03-13 08:26:34.000000000"}, {"message": "Hi Miklos,\nThanks for the explanation\nDone in https://gerrit.libreoffice.org/c/core/+/148783", "timestamp": "2023-03-13 11:16:46.000000000"}]}
{"thread_id": "3fa978cc_f5ec3b27", "url": "https://gerrit.libreoffice.org/#/c/core/+/148686/3/writerfilter/source/dmapper/DomainMapper_Impl.cxx@1607", "comments": [{"message": "I always struggle with pointers - especially these special pointers. In previous patchsets, I could only get it to compile if I made copies.\n\nBut now I stumbled on the right combination to make a vector of pointers. I assume that is much better than a vector of copies. Hopefully I have done this correctly. I have a whole set of follow patches that depend on this, so please review this block of code carefully and make sure I'm not doing something memory-stupid.\n\nI would have preferred to have a vector of references, but couldn't figure out how to do that. (That's where I spent most of my time, and always got compiler errors.)", "timestamp": "2023-03-12 01:44:41.000000000"}, {"message": "My understanding is that you can't have a vector of references, because the type that a vector contains has to be assignable, and references are not assignable. So it's not your fault, this is the language rule. You can work this around with a std::reference_wrapper if you really want.", "timestamp": "2023-03-13 07:43:10.000000000"}]}
{"thread_id": "581da37e_98e1ee4a", "url": "https://gerrit.libreoffice.org/#/c/core/+/148686/3/writerfilter/source/dmapper/DomainMapper_Impl.cxx@1609", "comments": [{"message": "I think it would be useful to do a SAL_WARN() when you reach this limit, instead of giving up silently.", "timestamp": "2023-03-13 07:43:10.000000000"}]}
{"thread_id": "205dd106_28ff505f", "url": "https://gerrit.libreoffice.org/#/c/core/+/148686/3/writerfilter/source/dmapper/DomainMapper_Impl.cxx@1684", "comments": [{"message": "And because it is worth questioning anything I do relating to pointers, I assumed a \"const auto\" is better for this kind of pointer than a \"const auto&\".", "timestamp": "2023-03-12 01:44:41.000000000"}, {"message": "This is fine. In this context, pProp is currently const Foo* and const auto& would be const Foo*&. There is no value in not copying the pointer, since a pointer is small and is trivial to copy.\n\nThe way I remember this is that \"auto\" resolves like template arguments, so it removes \"const\" and \"&\" by default. You need to spell out \"auto&\" in case you want to avoid a copy. You want to avoid this for non-trivial types (classes with copy/move ctors) and no need to worry about this for trivial types.", "timestamp": "2023-03-13 07:43:10.000000000"}]}
{"thread_id": "cae745e8_4e215de5", "url": "https://gerrit.libreoffice.org/#/c/core/+/148694/1/vcl/inc/IconThemeSelector.hxx@82", "comments": [{"message": "Does this mean that when any _dark theme is installed (e.g. when elementary_dark appears), the fallback will be colibre_dark? So far, the dark theme fallback has always ended in colibre.", "timestamp": "2023-03-11 03:54:18.000000000"}, {"message": "Yep", "timestamp": "2023-03-11 18:40:23.000000000"}]}
{"thread_id": "67bbdc07_e8e6deb0", "url": "https://gerrit.libreoffice.org/#/c/core/+/148385/4/sc/qa/unit/ucalc.cxx@5920", "comments": [{"message": "I don't think these comments have any value. I think they can go", "timestamp": "2023-03-07 12:14:17.000000000"}, {"message": "Done", "timestamp": "2023-03-07 14:22:38.000000000"}]}
{"thread_id": "c9836eb1_bc8eecdb", "url": "https://gerrit.libreoffice.org/#/c/core/+/148486/2/sw/qa/core/text/text.cxx@330", "comments": [{"message": "The css::text::BaseIndex nor the css::text::DocumentIndex classes seem to be accessible, there don't seem to be associated headers that I could include.\n\nIs that correct?", "timestamp": "2023-03-09 07:09:10.000000000"}, {"message": "Fixed, thanks to sberg for explanation.", "timestamp": "2023-03-09 12:19:58.000000000"}]}
{"thread_id": "ff1e869f_afdcf338", "url": "https://gerrit.libreoffice.org/#/c/core/+/148384/1/sw/source/core/docnode/nodes.cxx@b2325", "comments": [{"message": "this line is dead, and therefore removed. Will update commit message.", "timestamp": "2023-03-07 11:23:42.000000000"}]}
{"thread_id": "1c65700f_8e894f85", "url": "https://gerrit.libreoffice.org/#/c/core/+/148497/1/sw/qa/extras/ooxmlexport/ooxmlexport12.cxx@1970", "comments": [{"message": "loading the same document in 2 tests is not ideal; it's better to combine them into 1 test and use \"isExported()\" to limit the parseExport test to run only when the DOCX export is finished.", "timestamp": "2023-03-09 10:19:22.000000000"}]}
{"thread_id": "8f241e7d_a9af6b97", "url": "https://gerrit.libreoffice.org/#/c/core/+/148296/2/oox/qa/unit/drawingml.cxx@b162", "comments": [{"message": "you don't need to initialize it to zero", "timestamp": "2023-03-06 11:02:48.000000000"}, {"message": "After removing the initialization and just declaring it ,the build got failed.\n(Patchset 3)", "timestamp": "2023-03-06 13:36:05.000000000"}, {"message": "the failure is not related", "timestamp": "2023-03-06 14:19:09.000000000"}]}
{"thread_id": "5e1166ab_a89607f0", "url": "https://gerrit.libreoffice.org/#/c/core/+/148296/2/oox/qa/unit/drawingml.cxx@b287", "comments": [{"message": "same here", "timestamp": "2023-03-06 11:02:48.000000000"}]}
{"thread_id": "b8c0ba84_29637469", "url": "https://gerrit.libreoffice.org/#/c/core/+/148284/2/sc/source/ui/view/viewfun2.cxx@2974", "comments": [{"message": "this line cant be right. ScDocument::SetPrintEntireSheet takes a SCTAB param.\nI think you want:\n\n    if (rDoc.IsPrintEntireSheet(TheTabs[j]))\n        rDestDoc.SetPrintEntireSheet(TheTabs[j]);", "timestamp": "2023-03-05 18:57:02.000000000"}, {"message": "Yep, didn't realize it \ud83d\ude04", "timestamp": "2023-03-06 08:12:05.000000000"}]}
{"thread_id": "8a9cadc1_051897fa", "url": "https://gerrit.libreoffice.org/#/c/core/+/148423/1/sw/qa/extras/accessibility/dialogs.cxx@79", "comments": [{"message": "Looks good, but do we need to also check `0`?  You can just as well change back to only use `!`, and check for that paragraph contents.\n\nIt's your call, and if you think it's best to test 2 cells, go for it.", "timestamp": "2023-03-07 13:47:02.000000000"}, {"message": "Thanks. Indeed, checking for just '!' should be enough and I've changed that accordingly in PS2.", "timestamp": "2023-03-07 14:12:00.000000000"}]}
{"thread_id": "1ae2d5e6_49195532", "url": "https://gerrit.libreoffice.org/#/c/core/+/148356/1/vcl/unx/generic/gdi/cairotextrender.cxx@306", "comments": [{"message": "Doesn't CAIRO_HINT_METRICS_OFF affect line metrics only (ascender, descender, etc.)? We don't get line metrics from cairo, so we shouldn't need to set it in the first place.", "timestamp": "2023-03-06 20:14:32.000000000"}, {"message": "I don't really know, the docs mentioned that with it ON that it \"improves the consistency of *letter* and line spacing ... however ... means that text will be laid out differently at different zoom factors\" and that sounded like the kind of thing I wanted to avoid so I toggled it explicitly to OFF.", "timestamp": "2023-03-06 20:40:39.000000000"}, {"message": "I see.", "timestamp": "2023-03-06 22:31:36.000000000"}]}
{"thread_id": "f7797172_ca0a6bd5", "url": "https://gerrit.libreoffice.org/#/c/core/+/161364/1/editeng/inc/EditPaM.hxx@49", "comments": [{"message": "This may simplified further, to make advantage of C++20 default comparisons:\n\n    bool operator==(const EditPaM& rOther) const = default;\n\nand drop the != operator - it will be auto-generated then.\nSee tdf#157664.", "timestamp": "2023-12-29 11:47:04.000000000"}, {"message": "Yes, good point.", "timestamp": "2023-12-30 14:56:40.000000000"}]}
{"thread_id": "687d426a_5638d599", "url": "https://gerrit.libreoffice.org/#/c/core/+/159511/3/sw/source/core/text/inftxt.hxx@449", "comments": [{"message": "Why the \"(*m_pSpaceAdd)[m_nSpaceIdx] < LONG_MAX/2\" condition here? And why LONG_MAX is used here? I guess, that there should be some reason for this - and then the const used here must be of the correct type.", "timestamp": "2023-12-27 02:25:58.000000000"}]}
{"thread_id": "b67d3160_66f80980", "url": "https://gerrit.libreoffice.org/#/c/core/+/159511/3/sw/source/core/text/itradj.cxx@294", "comments": [{"message": "Note that tools::Long is not long; on Windows x64, it is long long. Thus, if my LONG_MAX question was related to this, then std::numeric_limits<tools::Long>::max() should be used instead.", "timestamp": "2023-12-27 02:29:42.000000000"}, {"message": "@Mike: thanks! I think, LONG_MAX is ok for long long, too, here, because we need only a value which big enough to store the negative values (because the real negative values of the variable is already used to store the (positive) character distances, i.e. for other thing.", "timestamp": "2023-12-29 18:20:37.000000000"}]}
{"thread_id": "5d7c897e_af07bf77", "url": "https://gerrit.libreoffice.org/#/c/core/+/161128/2/drawinglayer/source/primitive2d/BufferedDecompositionPrimitive2D.cxx@74", "comments": [{"message": "There is apparently still a race here, leading to use-after-free of the `LocalCallbackTimer` instance referenced by `maCallbackTimer`, witness e.g. the ASan heap-use-after-free during `CppunitTest_sw_ooxmlexport4` reported at <https://ci.libreoffice.org//job/lo_ubsan/3023/>:\n\nThe main thread is in a call to `BufferedDecompositionPrimitive2D::getBuffered2DDecomposition` above, has moved past the `maCallbackTimer.is()` check on line 55 and is now about to call `maCallbackTimer->setRemainingTime` on line 58.\n\nIn parallel, the `salhelper::TimerManager` thread calls `LocalCallbackTimer::onShot` (and will release its reference to the `LocalCallbackTimer` instance), which calls here and releases the other reference to the `LocalCallbackTimer` instance (which will thus be destroyed, when both references to it are gone).  So the main thread's call to `maCallbackTimer->setRemainingTime` will be operating on a destroyed object.", "timestamp": "2023-12-28 09:22:11.000000000"}, {"message": "Thanks for checking! Thus I *will* have to use a mutex of some kind (std::mutex is okay...?). At least *only* when a timeout is set - sigh", "timestamp": "2023-12-28 12:25:03.000000000"}, {"message": "> std::mutex is okay...?\n\nyes", "timestamp": "2023-12-28 13:22:15.000000000"}, {"message": "Nonetheless, still thinking if it is possible without mutex, ideas:\n\n(a) Just do not delete the LocalCallbackTimer. It's only created for instances that want to use the timing. It can just 'stay' and be re-used when obj's decomp is used/created again. I guess that would just move the problem to ~BufferedDecompositionPrimitive2D...?\n\n(b) I see that salhelper::TimerManager *uses* mutex to do it's job, so wouldn't it be possible to just 'safely' stop() the timer and be safe after that, so that it cannot be triggered, but safely deleted...?\n\nwell - trying :-)", "timestamp": "2023-12-28 14:23:24.000000000"}, {"message": "> (a) Just do not delete the LocalCallbackTimer. It's only created for instances that want to use the timing. It can just 'stay' and be re-used when obj's decomp is used/created again. I guess that would just move the problem to ~BufferedDecompositionPrimitive2D...?\n\n(as `LocalCallbackTimer` holds on to `BufferedDecompositionPrimitive2D` by raw pointer, you need to make sure that the former cannot outlive the latter)\n\n> (b) I see that salhelper::TimerManager *uses* mutex to do it's job, so wouldn't it be possible to just 'safely' stop() the timer and be safe after that, so that it cannot be triggered, but safely deleted...?\n\nthere is an inherent race between one thread calling `stop` and another thread issuing `onShot`", "timestamp": "2023-12-29 15:17:30.000000000"}, {"message": "> > (a) Just do not delete the LocalCallbackTimer. It's only created for instances that want to use the timing. It can just 'stay' and be re-used when obj's decomp is used/created again. I guess that would just move the problem to ~BufferedDecompositionPrimitive2D...?\n> \n> (as `LocalCallbackTimer` holds on to `BufferedDecompositionPrimitive2D` by raw pointer, you need to make sure that the former cannot outlive the latter)\n\nYes, but that's what I try to do using\n        maCallbackTimer->stop();\n        maCallbackTimer.clear();\nin ~BufferedDecompositionPrimitive2D (and in another place). I cannot directly destroy maCallbackTimer - it's a salhelper::SimpleReferenceObject. That's why I call stop 1st to get it *un*registered so that clear() *will* delete it - before BufferedDecompositionPrimitive2D is deleted -> does not work, sigh\n\nWhat if I just keep maCallbackTimer (no clear()) and add a method to set BufferedDecompositionPrimitive2D* in LocalCallbackTimer to nullptr, e.g. in ~BufferedDecompositionPrimitive2D...?\n\nI just can use a mutex (member in BufferedDecompositionPrimitive2D) and only lock if needed, so not too bad - but I think it's worth try to avoid it...?\n\n> \n> > (b) I see that salhelper::TimerManager *uses* mutex to do it's job, so wouldn't it be possible to just 'safely' stop() the timer and be safe after that, so that it cannot be triggered, but safely deleted...?\n> \n> there is an inherent race between one thread calling `stop` and another thread issuing `onShot`", "timestamp": "2023-12-29 17:00:56.000000000"}]}
{"thread_id": "77f361e5_e78931a1", "url": "https://gerrit.libreoffice.org/#/c/core/+/160022/4/sc/source/ui/unoobj/docuno.cxx@897", "comments": [{"message": "And also here, just return an empty string.", "timestamp": "2023-12-18 13:30:13.000000000"}, {"message": "Done", "timestamp": "2023-12-19 09:48:26.000000000"}]}
{"thread_id": "0fa39856_19acf470", "url": "https://gerrit.libreoffice.org/#/c/core/+/160022/4/sd/source/ui/unoidl/unomodel.cxx@2707", "comments": [{"message": "Could you just return an empty string here? The client of this API wants to know if they got some info or not. An empty string can hint that this is not implemented. adding the x and y coordinates is just very confusing, you can't easily check for this when you call this function.", "timestamp": "2023-12-18 13:30:13.000000000"}, {"message": "Done", "timestamp": "2023-12-19 09:48:26.000000000"}]}
{"thread_id": "96c06357_c8bb0161", "url": "https://gerrit.libreoffice.org/#/c/core/+/160022/4/sw/source/uibase/uno/unotxdoc.cxx@3782", "comments": [{"message": "Same here. You can do 'int /*x*/, int /*y*/' in the function signature to avoid warnings. Please rather return an empty string till this is actually implemented.", "timestamp": "2023-12-18 13:30:13.000000000"}, {"message": "Done", "timestamp": "2023-12-19 09:48:26.000000000"}]}
{"thread_id": "d4b5d8f3_2237bf26", "url": "https://gerrit.libreoffice.org/#/c/core/+/160022/7/sw/source/uibase/uno/unotxdoc.cxx@3782", "comments": [{"message": "Not a problem here with a temporary placeholder code, already replaced later; just wanted to say that in general, we almost don't use std::string in the core, until we need to pass it to some external API. Here, the better code could had been\n\n    return OUString::number(x + y);", "timestamp": "2023-12-29 04:51:38.000000000"}, {"message": "Thanks for the opinion Mike, i will use this option next time :)", "timestamp": "2023-12-29 08:04:21.000000000"}]}
{"thread_id": "328f58a4_f1f1b8b7", "url": "https://gerrit.libreoffice.org/#/c/core/+/161244/2/sc/inc/patattr.hxx@82", "comments": [{"message": "this is looking at awful lot like rtl::Reference. \nPossibly it would be simpler to just make ScPatternAttr extend salhelper::SimpleReferenceObject.\nAnd then use rtl::Reference<ScPatternAttr> everywhere?", "timestamp": "2023-12-24 10:34:37.000000000"}, {"message": "Well - I thought about it, but it needs that specialized stuff to do for enter/leave referenced state, plus init from heap or memory (with ownership change). Also allows to do evtl. more needed stuff when further optimizing, so I went with this. Special purpose using special class. Anyways, the *kind* of reference is not so important, remember I asked for what would be the best ref to use some days ago...", "timestamp": "2023-12-27 11:24:41.000000000"}]}
{"thread_id": "d9a55bd6_905aaa49", "url": "https://gerrit.libreoffice.org/#/c/core/+/127438/2/idl/source/objects/types.cxx@130", "comments": [{"message": "Note that you may use C++11 delegating ctor feature, to avoid repetition:\n\n  SvMetaType::SvMetaType( const OString& rName )\n      : SvMetaType()\n  {\n      SetName( rName );\n  }\n\nThis provides even more compact code without any macro trickery \ud83d\ude0a", "timestamp": "2021-12-25 07:32:24.000000000"}, {"message": "Yes I know but tout much for just too much for just 2 attributes I think", "timestamp": "2021-12-26 16:43:53.000000000"}, {"message": "I'd do that even for just a single attribute. Delegating ctors allow for following changes, when you e.g. introduce another member, and need to only initialize if in one single ctor, and other ctors get it automatically.", "timestamp": "2021-12-26 19:38:48.000000000"}, {"message": "OK I Wwill do it", "timestamp": "2021-12-27 08:15:18.000000000"}, {"message": "Thanks; but please do not feel obliged to do that - I only shared my own preference in the hope it could be useful, not as a kind of \"requirement\" \ud83d\ude0a", "timestamp": "2021-12-27 08:17:21.000000000"}, {"message": "Done", "timestamp": "2023-12-28 14:52:37.000000000"}]}
{"thread_id": "71aa1c0a_0319112e", "url": "https://gerrit.libreoffice.org/#/c/core/+/161372/1/sw/source/uibase/uno/unotxdoc.cxx@3716", "comments": [{"message": "Do we really want to add x and y and convert the resulting number to string?", "timestamp": "2023-12-27 15:48:12.000000000"}, {"message": "Thanks for checking the PR. I will send the implementation right after this one.", "timestamp": "2023-12-27 16:01:29.000000000"}, {"message": "Done", "timestamp": "2023-12-27 16:10:43.000000000"}]}
{"thread_id": "fc9a3374_d5bfb4bb", "url": "https://gerrit.libreoffice.org/#/c/core/+/161238/1/svtools/source/config/accessibilityoptions.cxx@43", "comments": [{"message": "This is called only once at startup, may it make sense to move into desktop/source/app/app.cxx and kill this class for good ?", "timestamp": "2023-12-23 11:32:54.000000000"}, {"message": "Done", "timestamp": "2023-12-28 10:17:18.000000000"}]}
{"thread_id": "40d4c99a_7df94a67", "url": "https://gerrit.libreoffice.org/#/c/core/+/158394/22/vcl/qa/cppunit/textlayout.cxx@30", "comments": [{"message": "Does \"DejaVu Sans\" need the HAVE_MORE_FONTS?", "timestamp": "2023-12-19 08:21:17.000000000"}, {"message": "Done", "timestamp": "2023-12-21 13:07:03.000000000"}]}
{"thread_id": "db870cce_892bf15d", "url": "https://gerrit.libreoffice.org/#/c/core/+/159838/7/include/osl/file.hxx@340", "comments": [{"message": "Please see https://gerrit.libreoffice.org/c/core/+/161282", "timestamp": "2023-12-25 17:38:49.000000000"}]}
{"thread_id": "b2c6e17f_1f3f35a5", "url": "https://gerrit.libreoffice.org/#/c/core/+/158794/3/starmath/source/ooxmlimport.cxx@43", "comments": [{"message": "This construction of an OUString from a character is an unneeded overhead, allocating memory, freeing it then, etc. You may compare characters directly, like\n\n    if (arg[idx] == '(' || arg[idx] == ')')\n\nIf later you need to add that character to a concatenation, use OUStringChar, like in\n\n    wrappedArg += OUString::Concat(\" {\") + arg.subView(prevIdx, idx - prevIdx) + \"}\" + OUStringChar(arg[idx]);", "timestamp": "2023-11-03 08:30:08.000000000"}, {"message": "Done", "timestamp": "2023-11-27 11:57:40.000000000"}]}
{"thread_id": "238cc9ba_45c0f498", "url": "https://gerrit.libreoffice.org/#/c/core/+/158794/3/starmath/source/ooxmlimport.cxx@668", "comments": [{"message": "From reading the problem, if 'e' arrives as \"2)\", then the problem is here, in readOMathArgInElement. There should not be a workaround later, just some fix in this function.", "timestamp": "2023-11-03 08:23:35.000000000"}, {"message": "We checked whether it would be possible to handle this case using other methods. Everywhere there is processing of tags taken from document.xml. If the algorithm does not create new tags for such cases, ignoring the real markup, then the current point is most likely the only one where the problem can be fixed.", "timestamp": "2023-11-21 16:30:18.000000000"}, {"message": "Done", "timestamp": "2023-11-27 11:57:40.000000000"}]}
{"thread_id": "cbc64ccb_1840201b", "url": "https://gerrit.libreoffice.org/#/c/core/+/158794/12/starmath/source/ooxmlimport.cxx@37", "comments": [{"message": "What does this function do? The logic is not easy to understand - and the commit message is silent about that; not a single word about braces and depth...", "timestamp": "2023-12-04 15:04:47.000000000"}, {"message": "Done", "timestamp": "2023-12-13 11:34:29.000000000"}]}
{"thread_id": "775ee257_358f8ac9", "url": "https://gerrit.libreoffice.org/#/c/core/+/158794/15/starmath/source/ooxmlimport.cxx@40", "comments": [{"message": "I'm afraid, you are drawing yourself into a corner. The function tries to be too smart, parsing the arguments; but it then has lots of problems - e.g.: does the argument contain enough context? (following arguments may provide pairs); does a double quote before the parenthesis belongs to the parenthesis, or does it end some previous quoted run; doesn't your code introduce a quadratic time which could hit in pathological cases...\n\nI suggested you to just wrap all parentheses into quotes unconditionally. Or to check if the token has textual type. Please keep it simple.", "timestamp": "2023-12-13 11:34:29.000000000"}, {"message": "We made a patch where we wrapped everything brackets in quotes. At that time, a problem arose with tests written earlier (not by us). Left ( right ) was expected, not \"(\" \")\". Therefore, we don't wrap correctly placed brackets in quotes. (#264)", "timestamp": "2023-12-13 11:49:00.000000000"}, {"message": "Failing tests after a change must be considered case-by-case. Ofte, such a breakage indicates that you did something wrong; but it may well be, that you only fixed some pre-existing problem, which had a workaround; and then, you analyze the breakage, fix it by modifying the test, and *document* why the change was made to the test. It may also require you to look into git history, see why was the test added (in which bug), and see how your change affects the test and the bug.\n\nI have looked into the MS documentation (ECMA-376 Part 1, 2016, ch. 22 \"Shared MLs Reference Material\"). And I confirm, that my initial assumption was correct.\n\nMath in OOXML allows to have a *delimiter object* element (m:d); and *only that object* represents a true delimited pair of opening/closing brackets (parentheses, braces, square brackets...). It contains the child elements / attributes for this. And *only when you encounter m:d*, you may legitimately emit Math's normal opening/closing parentheses.\n\nEverything that you encounter inside m:t element, is *text*. It must not arrive into LibreOffice Math as Math's special symbol; if it happens to match any of Math's special symbols (operators, names, etc.), such a text *must* be converted in a way to make it text in Math.\n\nSo please, do wrap *all* parentheses in OOXML's m:t into double quotes. We will need to check later, what broke, and why. But that's ultimately the proper way to go.", "timestamp": "2023-12-14 11:45:21.000000000"}, {"message": "Can you review patch #7? Just in that patch we wrapped all brackets in formulas in quotes. In the same patch we catched a problem with tests in rtfexport.", "timestamp": "2023-12-15 09:21:45.000000000"}, {"message": "In patch set 7, it looked OK (except I would recommend to just do the same as done there with { and } - i.e., just use replaceAll, without trying to analyze quotations). I would think that doing that inside handler of m:t would be better.\n\nThe problem in rtfexport needs checking.", "timestamp": "2023-12-15 09:49:22.000000000"}, {"message": "Done", "timestamp": "2023-12-25 16:44:16.000000000"}]}
{"thread_id": "5e99fb38_69572e80", "url": "https://gerrit.libreoffice.org/#/c/core/+/158794/7/sw/qa/extras/ooxmlexport/ooxmlexport2.cxx@b264", "comments": [{"message": "The failure here indicates your changes are affecting sw/qa/extras/rtfexport/data/math-runs.rtf when exporting to RTF. You can see the difference when the exported document is open with Word. Please, do not change the assert just to make CI happy", "timestamp": "2023-11-30 12:27:33.000000000"}, {"message": "> You can see the difference when the exported document is open with Word.\n\nNote that Xisco mentioned that the result looks different in Word: so your change looked OK to me WRT import, but did it look OK on export? Possibly the export needs additional changes to unescape the parentheses. Please check if the code that escapes braces {} was introduced with an accompanying export code - if so, that could give you a code pointer.", "timestamp": "2023-12-15 09:52:33.000000000"}, {"message": "Done", "timestamp": "2023-12-25 16:44:16.000000000"}]}
{"thread_id": "038f35ec_7a83ac46", "url": "https://gerrit.libreoffice.org/#/c/core/+/158794/7/sw/qa/extras/rtfexport/rtfexport.cxx@372", "comments": [{"message": "We decided to try escaping brackets in a similar way to curly braces, using \"\\\\(\". For export, we do not need to remove the '\\\\' character, since this is already implemented, but we are having a problem with one of the tests. We can't quite understand what this means comment: The attached markup does not contain the specified sequence ending with {}, the curly braces wrapping [](), so we can't figure out what problem this test covers.\n\nWe also checked the behavior of the source file when resaving in MSO 2016. In it, the behavior is different from the current one in LO: ()[] are perceived as text, and not as an area into which another part of the formula can be inserted.\n\nRTF, when loading formulas, refers to ooxmlimport, so changes will be reflected in its import. In the attached document, the processing goes into the \"m:t\" tag handler. If we were to keep the current export behavior, it would likely be necessary to consider parsing when importing RTF so that brackets would be treated as \"m:d\" tags in this test. However, before changing anything, we need to understand what this test was originally intended for.", "timestamp": "2023-12-20 13:23:07.000000000"}, {"message": "Please submit the updated change with escaping using \\\\, so that it's possible to see the failure and debug it. Thank you!", "timestamp": "2023-12-21 00:57:26.000000000"}, {"message": "I'm sorry for some delay of the response.\nThank you for the updated change. It looks exactly as I expect it to be (the only small nitpick is its commit message, where the word \"Added\" (in past tense) should be changed into \"Add\" (in present tense, imperative mood)).\n\nThe test that fails is testMathRuns in sw/qa/extras/rtfexport/rtfexport.cxx. It has a comment:\n\n    // was [](){}, i.e. first curly bracket had an incorrect position\n\nSo it is already clear, that it is the curly bracket position that is checked. Thus, it is kept OK, if the *order* is kept.\nAnd its git history points to commit dba6b5151e26ea0bc88f8d30a70859fcbbd2e81f.\n\nOpening the test RTF in Word, then in Writer, shows that your change does not make the imported result worse / different. But exporting the RTF from Writer with your patch gives a *better* result: before it, the export treated the parentheses as a group (because it was incorrectly *imported* as a group); thus, in Word, the result contained placeholder inside the parentheses (which wasn't there in the original RTF).\n\nThus, the test RTF document must not change at all; but the expected formula string must change to contain the backslashes.\n\nIndeed, this shows that square brackets still have exactly the same problem: their export still produces the placeholder. Indeed, they need the same change; but that needs a separate commit.\n\nWhat is still missing is a test that *actual parentheses group* in Word's equation (inserted using Word's \"Bracket\" tool) is imported as a group into Writer/Math, and gets exported as such, too.", "timestamp": "2023-12-25 12:22:47.000000000"}, {"message": "Done", "timestamp": "2023-12-25 16:44:16.000000000"}]}
{"thread_id": "fd567afe_2d38b637", "url": "https://gerrit.libreoffice.org/#/c/core/+/160848/2/basic/source/sbx/sbxcurr.cxx@94", "comments": [{"message": "You may format your code using CTRL+k, CTRL+f to get rid of unwanted formatting in the code base", "timestamp": "2023-12-19 15:05:37.000000000"}, {"message": "Thanks. This file is in the clang-format excludelist, so I wasn't sure whether it would be best to reformat or to try to copy the existing style. In order to preserve history, I've updated the patch to reformat only this section of the code. Please let me know if it would be better to run clang-format against the entire file and remove it from the excludelist.", "timestamp": "2023-12-19 18:58:35.000000000"}, {"message": "I would not exclude the file from the clang-format excludelist because it would fail on this file and you should not change code unrelated to this change. So just format the touched code accordingly \ud83d\ude0a", "timestamp": "2023-12-20 18:45:24.000000000"}, {"message": "Done", "timestamp": "2023-12-20 23:44:00.000000000"}]}
{"thread_id": "25578f47_8949ed51", "url": "https://gerrit.libreoffice.org/#/c/core/+/160848/3/basic/source/sbx/sbxcurr.cxx@129", "comments": [{"message": "Please use a variable for fResult * CURRENCY_FACTOR, to avoid repeated FP multiplications (even if they are relatively efficient these days).", "timestamp": "2023-12-22 11:12:03.000000000"}, {"message": "Thanks for the feedback. This change seems reasonable to me.", "timestamp": "2023-12-22 22:51:20.000000000"}]}
{"thread_id": "d560f539_7a100afa", "url": "https://gerrit.libreoffice.org/#/c/core/+/160058/5/vcl/win/gdi/salnativewidgets-luna.cxx@1604", "comments": [{"message": "I don't have experience with the Windows theme API, but could implementing this TODO be an alternative, i.e. getting the relevant colors directly from the theme?\n\n(Otherwise, adding comments mentioning why specific colors are not applied or are applied differenty for high contrast mode would be useful.)", "timestamp": "2023-12-13 09:44:33.000000000"}, {"message": "Done", "timestamp": "2023-12-23 07:31:37.000000000"}]}
{"thread_id": "394b3dad_d6b4b7d0", "url": "https://gerrit.libreoffice.org/#/c/core/+/160058/5/vcl/win/gdi/salnativewidgets-luna.cxx@1609", "comments": [{"message": "unnecessary extra space added here", "timestamp": "2023-12-13 09:44:33.000000000"}, {"message": "Done", "timestamp": "2023-12-23 07:31:37.000000000"}]}
{"thread_id": "8139adb2_db736794", "url": "https://gerrit.libreoffice.org/#/c/core/+/160058/5/vcl/win/window/salframe.cxx@2789", "comments": [{"message": "I'd suggest to put this into a new line for readability.", "timestamp": "2023-12-13 09:44:33.000000000"}, {"message": "Done", "timestamp": "2023-12-23 07:31:37.000000000"}]}
{"thread_id": "5dd700d4_13891727", "url": "https://gerrit.libreoffice.org/#/c/core/+/161185/2/dbaccess/source/ui/control/RelationControl.cxx@226", "comments": [{"message": "I'm not sure about this one (the others look good to me) rLines is a\n\nOConnectionLineDataVec which is\n\ntypedef std::vector<OConnectionLineDataRef> OConnectionLineDataVec;\n\nwhere OConnectionLineDataRef is\n\ntypedef ::rtl::Reference< OConnectionLineData> OConnectionLineDataRef;\n\nso emplace_back presumably creates an empty rtl::Reference<OConnectionLineData> instead of a rtl::Reference<OConnectionLineData> that points to a OConnectionLineData\n\nor to look at it another way, the original code is \"really\"\n\nrLines.push_back(rtl::Reference<OConnectionLineData>(new OConnectionLineData()));\n\nand I think you want\n\nrLines.emplace_back(new OConnectionLineData());\n\nhere", "timestamp": "2023-12-22 19:48:11.000000000"}, {"message": "Done here:\nhttps://gerrit.libreoffice.org/c/core/+/161193\n\nThank you for having spotted this.\nI must recognize I thought that just building would be sufficient to know if it's ok.\nI mean, I saw several times cases with \"push_back(new ...)\" where replacing push_back by emplace(...) didn't work so thought I could rely on this.", "timestamp": "2023-12-22 20:50:14.000000000"}]}
{"thread_id": "55b3a4b9_48ffd992", "url": "https://gerrit.libreoffice.org/#/c/core/+/161149/2/sw/source/core/access/AccessibilityCheck.cxx@1232", "comments": [{"message": "This patch in general looks good to me as a tidy up and make consistent patch.\n\nYou could push it as that, but it doesn't add the check here that the other one did for a null pFormat, which is my guess was the problem in that one example.\n\nWhat I'd probably do in this case is turn these two \n\nif (something) { if (otherthing) { do_whatever; } } \n\ninto \n\nif (!something)\n    return;\n\nif (!otherthing)\n    return;\n    \ndo_whatever\n\nso its easier to read and add a\n\nif (!pFormat)\n    return;\n    \nin there for that extra check.", "timestamp": "2023-12-22 10:41:54.000000000"}, {"message": "> This patch in general looks good to me as a tidy up and make consistent patch.\n> \n> You could push it as that, but it doesn't add the check here that the other one did for a null pFormat, which is my guess was the problem in that one example.\n\nYes, that was the whole point of this patch but I forgot it :D fixed now\n\n> \n> What I'd probably do in this case is turn these two \n> \n> if (something) { if (otherthing) { do_whatever; } } \n> \n> into \n> \n> if (!something)\n>     return;\n> \n> if (!otherthing)\n>     return;\n>     \n> do_whatever\n> \n> so its easier to read and add a\n> \n> if (!pFormat)\n>     return;\n>     \n> in there for that extra check.\n\nIndeed. much nicer now. Fixed", "timestamp": "2023-12-22 11:14:19.000000000"}]}
{"thread_id": "27dbe757_09fbcbe8", "url": "https://gerrit.libreoffice.org/#/c/core/+/161117/3/xmlsecurity/source/xmlsec/nss/ciphercontext.cxx@69", "comments": [{"message": "This assertion now fires on a 3.94 system NSS, with clang17:\n\nlibo-work/xmlsecurity/source/xmlsec/nss/ciphercontext.cxx:69:23: error: static assertion failed due to requirement 'sizeof(CK_GCM_PARAMS_V3) == sizeof(CK_NSS_GCM_PARAMS)'\n   69 |         static_assert(sizeof(CK_GCM_PARAMS) == sizeof(CK_NSS_GCM_PARAMS));\n      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nlibo-work/xmlsecurity/source/xmlsec/nss/ciphercontext.cxx:69:45: note: expression evaluates to '48 == 40'\n   69 |         static_assert(sizeof(CK_GCM_PARAMS) == sizeof(CK_NSS_GCM_PARAMS));\n      |                       ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~", "timestamp": "2023-12-22 13:58:42.000000000"}]}
{"thread_id": "fbd9e2fc_d91d5ee7", "url": "https://gerrit.libreoffice.org/#/c/core/+/161142/1/include/svl/itemset.hxx@b51", "comments": [{"message": "better would be to change the conditionals to\n \n    #ifndef NDEBUG\n\nwhich is what assert() needs", "timestamp": "2023-12-22 06:52:16.000000000"}, {"message": "Done", "timestamp": "2023-12-22 07:54:31.000000000"}]}
{"thread_id": "5cf6334b_b27c7cc7", "url": "https://gerrit.libreoffice.org/#/c/core/+/160450/2/framework/source/uielement/addonstoolbarwrapper.cxx@105", "comments": [{"message": "Why `sal_uInt32`? You see that it is used with `Create()` function:\n\n pToolBar = VclPtr<ToolBox>::Create( pWindow, nStyles );\n           \nIf you look into `include/vcl/vclptr.hxx`, you see the definition:\n\n    /**\n     * A construction helper for VclPtr. Since VclPtr types are created\n     * with a reference-count of one - to help fit into the existing\n     * code-flow; this helps us to construct them easily.\n     *\n     * For more details on the design please see vcl/README.lifecycle\n     *\n     * @tparam reference_type must be a subclass of vcl::Window\n     */\n    template<typename... Arg> [[nodiscard]] static VclPtr< reference_type > Create(Arg &&... arg)\n    {\n        return VclPtr< reference_type >( new reference_type(std::forward<Arg>(arg)...), SAL_NO_ACQUIRE );\n    }\n\nThen, if you refer to `include/vcl/toolbox.hxx`, you will see:\n\n public:\n     ToolBox(vcl::Window* pParent, WinBits nStyle = 0);\n\nIn this case, you see:\n\n`WinBits` is defined as below, in `include/vcl/wintypes.hxx`:\n\n // Window-Bits\n typedef sal_Int64 WinBits;\n\nThus, `sal_uInt32` is not suitable. Please use `WinBits` instead. You will need to add `#include <vcl/wintypes.hxx>`.", "timestamp": "2023-12-11 16:21:33.000000000"}, {"message": "Done", "timestamp": "2023-12-21 10:41:10.000000000"}]}
{"thread_id": "e5b6f2fd_c29f6d40", "url": "https://gerrit.libreoffice.org/#/c/core/+/160450/2/framework/source/uielement/statusbarwrapper.cxx@102", "comments": [{"message": "The same here.", "timestamp": "2023-12-11 16:21:33.000000000"}, {"message": "Done", "timestamp": "2023-12-21 10:41:10.000000000"}]}
{"thread_id": "525a3f3f_97c13aac", "url": "https://gerrit.libreoffice.org/#/c/core/+/160450/2/framework/source/uielement/toolbarwrapper.cxx@148", "comments": [{"message": "And also here.", "timestamp": "2023-12-11 16:21:33.000000000"}, {"message": "Done", "timestamp": "2023-12-21 10:41:10.000000000"}]}
{"thread_id": "0d9dc0f1_05a37848", "url": "https://gerrit.libreoffice.org/#/c/core/+/159365/1/sc/source/ui/unoobj/viewuno.cxx@112", "comments": [{"message": "Macros like these are unintuitive. Plus there is some sequence thing attached to these. Maybe these are used to indexinto an array. Please put some light.\n\nwarn:svtools.misc:149086:149086:svtools/source/misc/langtab.cxx:245: Language: 0x24 with unknown name, so returning generated: Slovenian {sl}\nwarn:legacy.tools:149086:149086:cui/source/options/optjsearch.cxx:180: Transliteration settings different\nwarn:unotools.config:149086:149086:unotools/source/config/configitem.cxx:499: Exception from PutProperties com.sun.star.container.NoSuchElementException message: \"ColRowHighlighting at /home/sahil/libreoffice/configmgr/source/access.cxx:1063\" context: configmgr::RootAccess\n\ngot this warning message on the last commit. \nAlso these commits might have some merge conflict (1-2 line), so keep the latest changes.", "timestamp": "2023-11-13 10:21:05.000000000"}, {"message": "Wait don't review it yet!\nI think I may get it working this time.", "timestamp": "2023-11-14 04:36:22.000000000"}, {"message": "It works! Review not needed for this one. There was some xml file in which I was supposed to add the string related to macro OLD_UNO...\n\nWill ask about these if they don't make sense in the final review. Trying to understand for the time being.", "timestamp": "2023-11-14 05:20:50.000000000"}, {"message": "Done", "timestamp": "2023-11-15 11:29:40.000000000"}]}
{"thread_id": "078861e2_2762f651", "url": "https://gerrit.libreoffice.org/#/c/core/+/160773/4/sw/source/uibase/uno/unotxdoc.cxx@3795", "comments": [{"message": "This line and the next one looks redundant?", "timestamp": "2023-12-19 15:10:58.000000000"}, {"message": "Done", "timestamp": "2023-12-20 10:36:54.000000000"}]}
{"thread_id": "c464aba7_a4301a4c", "url": "https://gerrit.libreoffice.org/#/c/core/+/160812/1/editeng/source/uno/unotext.cxx@2151", "comments": [{"message": "Does it do the right thing if you drop the above change and instead try....\n\nSetSelection(pSource->GetSelection());\n\nhere after this\n\nUpdateData()\n\nso this branch becomes consistent with the other branch with setString which appears to leave the newly inserted text selected.", "timestamp": "2023-12-18 15:32:56.000000000"}, {"message": "Yup it worked", "timestamp": "2023-12-18 21:13:19.000000000"}]}
{"thread_id": "e0f15c50_3bfc3cb6", "url": "https://gerrit.libreoffice.org/#/c/core/+/160924/2/editeng/source/misc/svxacorr.cxx@1511", "comments": [{"message": "Do you mean this? :-)", "timestamp": "2023-12-18 15:12:17.000000000"}, {"message": "Aha!", "timestamp": "2023-12-18 16:47:59.000000000"}]}
{"thread_id": "1465d4d0_adefbe08", "url": "https://gerrit.libreoffice.org/#/c/core/+/160777/2/sw/source/uibase/config/prtopt.cxx@49", "comments": [{"message": "These magic numbers have to be changed to reflect the new size of this array, otherwise it may crash.", "timestamp": "2023-12-15 14:55:35.000000000"}, {"message": "Done", "timestamp": "2023-12-16 11:16:35.000000000"}]}
{"thread_id": "fa638bf6_46d84f94", "url": "https://gerrit.libreoffice.org/#/c/core/+/160762/2/sw/source/uibase/config/modcfg.cxx@1250", "comments": [{"message": "Shouldn't these cases be renumbering like you did in the previous block?", "timestamp": "2023-12-14 10:15:56.000000000"}, {"message": "Done", "timestamp": "2023-12-14 10:46:01.000000000"}]}
{"thread_id": "f494c27b_6d0fbf2d", "url": "https://gerrit.libreoffice.org/#/c/core/+/160888/1/tools/source/generic/bigint.cxx@68", "comments": [{"message": "I think some weird unicode char snuck into the comment there? Unless you are practicing your steganography :-)", "timestamp": "2023-12-17 18:46:00.000000000"}, {"message": "Sorry, I don't quite understand - I see n such characters...", "timestamp": "2023-12-17 19:22:05.000000000"}, {"message": "Never mind, brain fart", "timestamp": "2023-12-17 19:41:08.000000000"}]}
{"thread_id": "25775817_1a4cc59b", "url": "https://gerrit.libreoffice.org/#/c/core/+/155298/9/sfx2/source/appl/sfxhelp.cxx@1180", "comments": [{"message": "Could not find Help page (404).\n\nhttps://help.libreoffice.org/24.8/en-US/text/shared/05/err_html.html?System=UNIX&DbPAR=SHARED&HID=SFX2_HID_HELPMANUAL_OFFLINE", "timestamp": "2023-12-12 08:13:01.000000000"}, {"message": "This page still does not exist. It will have to be created in a separate patch.", "timestamp": "2023-12-12 14:30:29.000000000"}]}
{"thread_id": "6da9f1d7_563308ab", "url": "https://gerrit.libreoffice.org/#/c/core/+/160765/2/desktop/source/app/updater.cxx@94", "comments": [{"message": "This creates a temporary?", "timestamp": "2023-12-15 08:29:24.000000000"}, {"message": "Thanks for spotting!  Just ran into it now as well with a decent compiler and <https://gerrit.libreoffice.org/c/core/+/160820> \"-Werror,-Wunused-result\".", "timestamp": "2023-12-15 09:26:07.000000000"}]}
{"thread_id": "f110d61b_9822698e", "url": "https://gerrit.libreoffice.org/#/c/core/+/160756/1/sw/qa/core/layout/flycnt.cxx@1128", "comments": [{"message": "Is the assert meant to be duplicated?", "timestamp": "2023-12-14 09:21:50.000000000"}, {"message": "No, I overlooked that, good catch.\n\nFix is at https://gerrit.libreoffice.org/c/core/+/160759", "timestamp": "2023-12-14 09:56:13.000000000"}]}
{"thread_id": "7d5828ba_6e0cff86", "url": "https://gerrit.libreoffice.org/#/c/core/+/160389/1/sc/source/core/data/table2.cxx@789", "comments": [{"message": "I think you want GetAllocatedColumnsRange() here, and then the const- changes are unnecessary.", "timestamp": "2023-12-06 14:16:02.000000000"}, {"message": "But the content is to be pasted on that range, so columns have to be allocated if not already, if I understood correctly?", "timestamp": "2023-12-06 14:22:45.000000000"}, {"message": "I confirm it works with \"GetAllocatedColumnsRange\" but before uploading a new version of the patch with it (and without the other changes concerning const), I let you respond to Eike.", "timestamp": "2023-12-06 14:25:39.000000000"}, {"message": "> But the content is to be pasted on that range, so columns have to be allocated if not already, if I understood correctly?\n\nIf you paste from a small range to a large range, I would assume that only part of the destination will receive data", "timestamp": "2023-12-06 16:42:59.000000000"}]}
{"thread_id": "25d013f3_cdb4471e", "url": "https://gerrit.libreoffice.org/#/c/core/+/160401/2/sfx2/source/doc/docfile.cxx@751", "comments": [{"message": "This assertion breaks the fix for tdf#96401 - could it be relaxed to something like\n\n  !pImpl->xStorage || pImpl->bStorageBasedOnInStream\n\n?", "timestamp": "2023-12-13 16:45:45.000000000"}, {"message": "Fails on simple\n\n  soffice -n file.docx\n\nwith any DOCX, not only broken ones", "timestamp": "2023-12-13 17:03:51.000000000"}, {"message": "thanks; thats unfortunate, clearly these asserts were too optimistic and SfxMedium is more complicated, see https://gerrit.libreoffice.org/c/core/+/160712", "timestamp": "2023-12-13 18:55:39.000000000"}]}
{"thread_id": "e8da5bcf_3d45836a", "url": "https://gerrit.libreoffice.org/#/c/core/+/160509/1/sw/qa/core/text/text.cxx@108", "comments": [{"message": "Is this enough of a test? I'd assume if it hangs, it times out, meaning a failure, but I'm not completely sure.", "timestamp": "2023-12-09 11:15:20.000000000"}, {"message": "Please replace the // Done and the CPPUNIT_ASSERT with just a comment explaining what happened without the fix, like\n\n  // Without the accompanying fix, saving would hang", "timestamp": "2023-12-13 04:23:01.000000000"}, {"message": "Done, thanks", "timestamp": "2023-12-13 08:12:05.000000000"}]}
{"thread_id": "25a0e26a_b6d5ee10", "url": "https://gerrit.libreoffice.org/#/c/core/+/160509/2/sw/source/core/text/EnhancedPDFExportHelper.cxx@2835", "comments": [{"message": "It feels that the you might just test the return value of MovePara here - in case it's false, you couldn't move?", "timestamp": "2023-12-12 14:02:22.000000000"}, {"message": "True, that seems to work as well, thanks.", "timestamp": "2023-12-12 14:38:00.000000000"}, {"message": "Done", "timestamp": "2023-12-13 08:12:05.000000000"}]}
{"thread_id": "c1200f72_f0029459", "url": "https://gerrit.libreoffice.org/#/c/core/+/160509/1/sw/source/uibase/shells/textidx.cxx@132", "comments": [{"message": "I think this should be a pop-up warning, but I'm not sure how best to do that.", "timestamp": "2023-12-09 11:15:20.000000000"}, {"message": "I can't comment on the popup idea; but please note that we don't use cerr logging - please replace with SAL_WARN.", "timestamp": "2023-12-12 09:04:29.000000000"}, {"message": "Done", "timestamp": "2023-12-12 14:02:22.000000000"}]}
{"thread_id": "47d02b28_67b77d44", "url": "https://gerrit.libreoffice.org/#/c/core/+/159364/3/sc/source/ui/view/tabvwsh3.cxx@703", "comments": [{"message": "Just for ease of reading, could you please make it something like 'bNewVal', and set it to !officecfg::Office::Calc::Content::Display::ColumnRowHighlighting::get() from start? This allows to omit the two \"!\" below.\n\nAlso the indentation of the whole block is inconsistent. The adjacent blocks indent the braces by 4 spaces, and then indent their content to 4 more spaces; while you put braces on the same level as 'case', and indent the content by 8 spaces. Then you indent the 'break' by 4 spaces. Since the global re-format of the file is out of scope of this patch, please follow the style of the existing code for consistency.", "timestamp": "2023-12-12 07:50:02.000000000"}, {"message": "Done", "timestamp": "2023-12-12 13:22:59.000000000"}, {"message": "Colorpicker? under tools > options > application colors > grid.\nWould complete this feature implementation. What do you say Heiko?", "timestamp": "2023-12-12 13:26:06.000000000"}, {"message": "1. Please discuss this patch in this change. Unrelated discussion should be moved to the appropriate place (if you don't have a tentative patch in gerrit, then the proper place is bug report).\n2. It should be under tools > options > application colors > spreadsheet.", "timestamp": "2023-12-12 13:30:48.000000000"}, {"message": ">Colorpicker? under tools > options > application colors > grid\n-1, the cell focus color is highlight and col/row respectively highlight * transparency", "timestamp": "2023-12-12 14:31:51.000000000"}]}
{"thread_id": "487ae8bf_1eec8fb5", "url": "https://gerrit.libreoffice.org/#/c/core/+/153889/1/filter/source/msfilter/escherex.cxx@2543", "comments": [{"message": "o3tl::span has empty() member.", "timestamp": "2023-07-05 19:38:08.000000000"}, {"message": "Nice, yep I can fix those up.  I think there's one or two in each patch.  Yep, I think I've got all those now.", "timestamp": "2023-07-08 17:43:59.000000000"}, {"message": "Arkadiy: are you happy with the update?", "timestamp": "2023-07-12 12:27:24.000000000"}, {"message": "Yeah, thanks!", "timestamp": "2023-07-13 18:24:48.000000000"}]}
{"thread_id": "6c16ebb8_17af9110", "url": "https://gerrit.libreoffice.org/#/c/core/+/153889/10/filter/source/msfilter/escherex.cxx@2542", "comments": [{"message": "This can be simplified as:\n if(!pDefCustomShape || pDefCustomShape->pHandles.empty())", "timestamp": "2023-12-05 11:56:58.000000000"}, {"message": "Done", "timestamp": "2023-12-12 09:56:44.000000000"}]}
{"thread_id": "da55ff36_1db19ee6", "url": "https://gerrit.libreoffice.org/#/c/core/+/153889/10/filter/source/msfilter/escherex.cxx@2548", "comments": [{"message": "You could change this loop into a range-based for loop, but in that case, the counter would be still needed for the last line of the loop.", "timestamp": "2023-12-05 11:56:58.000000000"}]}
{"thread_id": "c99f8c82_20db3b47", "url": "https://gerrit.libreoffice.org/#/c/core/+/153889/10/filter/source/msfilter/msdffimp.cxx@2182", "comments": [{"message": "Also here, a range-based for loop is possible.", "timestamp": "2023-12-05 11:56:58.000000000"}]}
{"thread_id": "9cd63a21_2f889fbe", "url": "https://gerrit.libreoffice.org/#/c/core/+/153889/6/svx/source/svdraw/svdoashp.cxx@1062", "comments": [{"message": "Can we replace this with std::transform?", "timestamp": "2023-07-13 06:44:40.000000000"}, {"message": "Arkadiy:\nFor some of these I think we can; in one of the other commit messages I suggest we can get rid of some of these loops.\nBut I thought this series was already pretty large, so it seems best to attack the loops separately.", "timestamp": "2023-07-13 10:40:18.000000000"}, {"message": "Done", "timestamp": "2023-07-13 18:24:25.000000000"}]}
{"thread_id": "661831b1_b1fb50ed", "url": "https://gerrit.libreoffice.org/#/c/core/+/153889/10/svx/source/svdraw/svdoashp.cxx@1062", "comments": [{"message": "Also, this can be converted into range-based for loop, while also retaining the counter `i`. Not so idiomatic, but simplifies the code a bit.", "timestamp": "2023-12-05 11:56:58.000000000"}]}
{"thread_id": "e7df3a7f_85a65510", "url": "https://gerrit.libreoffice.org/#/c/core/+/160605/3/sc/source/filter/xml/xmlwrap.cxx@521", "comments": [{"message": "This line now isn't needed anymore, because it is re-defined unconditionally in line 532 below - so it would be great to just move the declaration of bRet there, together with initial (and final) definition.", "timestamp": "2023-12-12 06:26:43.000000000"}, {"message": "Done", "timestamp": "2023-12-12 08:03:54.000000000"}]}
{"thread_id": "ca95777f_9c05a7ca", "url": "https://gerrit.libreoffice.org/#/c/core/+/160605/4/sc/source/filter/xml/xmlwrap.cxx@530", "comments": [{"message": "Did you compile the change locally? It can't compile, because you forgot to *define* the variable (it should become 'bool bRet = !rError.IsError();')", "timestamp": "2023-12-12 08:03:50.000000000"}, {"message": "Ugh, sorry for that.  Thought we had done compiling.  New patch uploaded.", "timestamp": "2023-12-12 08:10:47.000000000"}, {"message": "Done", "timestamp": "2023-12-12 08:30:09.000000000"}]}
{"thread_id": "6185440a_8962e86f", "url": "https://gerrit.libreoffice.org/#/c/core/+/160375/2/sw/source/filter/ww8/wrtw8nds.cxx@2524", "comments": [{"message": "Rather than add a bool parameter, I thought it appropriate to add an ::End flag when there will be no fldrslt.", "timestamp": "2023-12-11 13:42:38.000000000"}]}
{"thread_id": "aa020225_716eda3a", "url": "https://gerrit.libreoffice.org/#/c/core/+/160529/2/sw/source/core/edit/autofmt.cxx@2099", "comments": [{"message": "could you please split the change into two - one for correcting the break position, and another for the bBreak. they look separate, and I can't easily follow the logic of the latter. It would help track their respective consequences. thanks.", "timestamp": "2023-12-10 07:48:44.000000000"}, {"message": "Ok, this change is just the \"break\" change now.", "timestamp": "2023-12-10 18:26:10.000000000"}]}
{"thread_id": "678e4a1f_a5ce5bc9", "url": "https://gerrit.libreoffice.org/#/c/core/+/160529/2/sw/source/core/edit/autofmt.cxx@2148", "comments": [{"message": "please also correct the mention of ** to -- or //, which are handled here - this comment was simply copied from ** case.", "timestamp": "2023-12-10 07:39:45.000000000"}, {"message": "Will handle that in the new separate change.", "timestamp": "2023-12-10 18:26:10.000000000"}]}
{"thread_id": "4c25151b_0e645331", "url": "https://gerrit.libreoffice.org/#/c/core/+/160219/1/sfx2/source/view/lokhelper.cxx@182", "comments": [{"message": "I would put here:\n`if (viewShell == current_viewsh && language == current_lang) return;`", "timestamp": "2023-12-04 08:56:23.000000000"}, {"message": "Done", "timestamp": "2023-12-07 02:56:48.000000000"}]}
{"thread_id": "73ecb97b_41644e89", "url": "https://gerrit.libreoffice.org/#/c/core/+/160219/1/sfx2/source/view/lokhelper.cxx@199", "comments": [{"message": "and after setting language again:\n\n`if (viewshell == current_viewsh) { warn(\"mismatch\"); return;}`", "timestamp": "2023-12-04 08:56:23.000000000"}, {"message": "ofc `viewshell == current_viewsh`  can be stored in variable to not do 2 times", "timestamp": "2023-12-04 08:57:15.000000000"}, {"message": "Done", "timestamp": "2023-12-07 02:56:48.000000000"}]}
{"thread_id": "5a98ade1_6498c370", "url": "https://gerrit.libreoffice.org/#/c/core/+/154207/1/sw/source/core/edit/autofmt.cxx@2113", "comments": [{"message": "Note that this is correct for '*'/'_', but incorrect for '/'/'-'. Please test with change tracking enabled (which is what 'redline' is) - I suspect that this would record wrong change.", "timestamp": "2023-07-08 18:48:20.000000000"}, {"message": "It still works.  If you look at the uses of STR_AUTOFMTREDL_BOLD and STR_AUTOFMTREDL_UNDER, it's only used one place to increment a variable, so it doesn't really matter what you call it as long as you use it.", "timestamp": "2023-07-08 19:50:11.000000000"}, {"message": "Did you check what STR_AUTOFMTREDL_BOLD is? It is a define in the group titled \"defines for the Autoformat Redline Comments\". So what will be the *comment* for the italics-autocorrected text with the change tracking?", "timestamp": "2023-07-11 03:10:10.000000000"}, {"message": "I don't understand.  There is only one place it's used and the name of it doesn't even matter to execute the code.  I don't know what you mean by comment, but again there are no other references to this variable that would affect anything observable.  Unless you are worried about the code changing in the future?", "timestamp": "2023-07-11 03:42:51.000000000"}, {"message": "Please don't mark this \"resolved\", when you don't understand.\n\nLet me guide you then. Open sw/inc/comcore.hxx, where STR_AUTOFMTREDL_BOLD and STR_AUTOFMTREDL_UNDER are defined; see the comment at the top of the group telling\n\n  // defines for the Autoformat Redline Comments\n\nnow look at the bottom, and see\n\n  // !!!!!!!!!!!!!!!!!!!!!!!!!!  always set the correct end !!!!!!!!!!!!\n  #define STR_AUTOFMTREDL_END                     24\n\nwhich hints, that these contiguous constants (starting with 0) might be used to *index* something. Now grep for STR_AUTOFMTREDL_END. And see that in sw/inc/utlui.hrc, there's RID_SHELLRES_AUTOFMTSTRS, with corresponding number of entries, and there are asserts that its entries are same size as STR_AUTOFMTREDL_END. And now look at the strings defined in RID_SHELLRES_AUTOFMTSTRS, and on the use of it.", "timestamp": "2023-07-11 03:51:58.000000000"}, {"message": "Other options to see this: use git log to see commits that introduced the uses of STR_AUTOFMTREDL_BOLD; see that nActionId in SwAutoFormat::SetRedlineText_ (which might be STR_AUTOFMTREDL_BOLD) is not used *only* to increment nSeqNo, but *also* as index to the return of SwViewShell::GetShellRes()->GetAutoFormatNameLst().", "timestamp": "2023-07-11 04:01:53.000000000"}, {"message": "Got it, I mentally skipped over the string usage.  However, I don't see these comments appear anywhere in Writer.  Do you know how to view these comments?", "timestamp": "2023-07-11 18:21:35.000000000"}, {"message": "Microsoft Bing Chat AI told me this:\n------------------\nTo view all comments for tracked changes in LibreOffice, you can use the Navigator. You can open the Navigator by selecting View - Navigator or by pressing F5. In the Navigator, you can see a list of all comments. Right-click a comment name in the Navigator to edit or delete the comment1.\n\nYou can also use View - Comments to show or hide all comments1. In the Find & Replace dialog of text documents, you can select to include the comments texts in your searches1.\n------------------\n\nHowever, I still don't see comments for changes for automatic bold (\"*\"), for example.", "timestamp": "2023-07-11 18:38:03.000000000"}, {"message": "That works.  I see the comments now and will add new code for the new changes. \nHowever, I found 2 new bugs with this:\n\n1. It only underlines the first character.  In your example, I see only the first \"b\" get underlined.\n2. If \"Edit\"->\"Track Changes\"->\"Record\" is enabled, then the \"Tools\"->\"AutoCorrect\"->\"Appy and Edit Changes\" doesn't show anything for the change whereas it did when \"Record\" track changes was off.\n\nShould these 2 issues be fixed with this bug, or be separate new bugs?", "timestamp": "2023-07-11 20:12:31.000000000"}, {"message": "Separate. I remember seeing that, but couldn't find quickly.", "timestamp": "2023-07-11 20:19:39.000000000"}, {"message": "Filed https://bugs.documentfoundation.org/show_bug.cgi?id=156243 and https://bugs.documentfoundation.org/show_bug.cgi?id=156244.", "timestamp": "2023-07-11 22:58:19.000000000"}, {"message": "Ok fixed the strings.  Thanks for the guidance.", "timestamp": "2023-07-13 04:48:18.000000000"}]}
{"thread_id": "4cb60976_2c094fd0", "url": "https://gerrit.libreoffice.org/#/c/core/+/154207/8/sw/source/core/edit/autofmt.cxx@2113", "comments": [{"message": "It seems to me, that a 'break' is missing here. This case of handling '/' in m_aFlags.bAddNonBrkSpace case is about French rules of adding NBSP before some punctuation; and in this specific case, succeeded FnAddNonBrkSpace means that it treated / as the punctuation (in URL). Then, the following code after [[fallthrough]] should not run.", "timestamp": "2023-10-13 13:57:14.000000000"}, {"message": "Seems right to me, though I'm not sure how you determined about the French rules -- Fixed now.", "timestamp": "2023-11-21 01:48:21.000000000"}, {"message": "> Seems right to me, though I'm not sure how you determined about the French rules -- Fixed now.", "timestamp": "2023-11-21 05:52:26.000000000"}, {"message": "Aha - it was discussed here:\n\n> succeeded FnAddNonBrkSpace means that it treated / as the punctuation (in URL). Then, the following code after [[fallthrough]] should not run.\n\nSorry for not checking carefully the fix.", "timestamp": "2023-12-10 07:22:45.000000000"}]}
{"thread_id": "d7bb7813_bd9c6f10", "url": "https://gerrit.libreoffice.org/#/c/core/+/154207/10/sw/source/core/edit/autofmt.cxx@2112", "comments": [{"message": "> I'm not sure how you determined about the French rules\n\nI saw that the previous code did something specific; then you extended it to *also* do something else. I checked this function - ant the French rule is explained in this function definition:\n\nhttps://opengrok.libreoffice.org/xref/core/editeng/source/misc/svxacorr.cxx?r=30c4d857#669", "timestamp": "2023-11-21 05:52:26.000000000"}]}
{"thread_id": "febd4944_d9301ed0", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/3/sc/source/ui/inc/tabvwsh.hxx@258", "comments": [{"message": "No need to use the global namespace noise here. You don't use it elsewhere - right on the line above.", "timestamp": "2023-12-04 15:16:56.000000000"}, {"message": "Done", "timestamp": "2023-12-05 06:54:20.000000000"}]}
{"thread_id": "acd757d7_c47841c8", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/3/sc/source/ui/inc/tabvwsh.hxx@258", "comments": [{"message": "Please drop the spaces after opening parenthesis and before the closing one. I see complete lack of attention to the consistent formatting.", "timestamp": "2023-12-04 15:16:56.000000000"}, {"message": "Done", "timestamp": "2023-12-05 06:54:20.000000000"}]}
{"thread_id": "3fd4663f_9a5a7cb7", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/6/sc/source/ui/inc/tabvwsh.hxx@256", "comments": [{"message": "Heh, again - here you use spaces after opening / before closing parentheses; below you use our current convention to avoid these spaces (also used elsewhere in this file).\n\nDo you use an IDE that allows to automatically apply clang-format rules? We have such rules in the root of the repo; and e.g. VS allows to use them automatically.", "timestamp": "2023-12-05 15:57:54.000000000"}, {"message": "No it's me copying/pasting from the interface definitions. \ud83d\ude0e I tried clang format, but it formatted the whole file. So have disabled it for libreoffice repo.\n\nThis was the last time :) or you blacklist me after this.", "timestamp": "2023-12-05 16:03:32.000000000"}, {"message": "clang-format for selected lines works now :) thanks.", "timestamp": "2023-12-06 14:23:29.000000000"}]}
{"thread_id": "6e53603f_4ac2dc8b", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/3/sc/source/ui/view/tabview.cxx@210", "comments": [{"message": "Please either use spaces on the both sides (as on the existing adjacent lines), or don't use on both sides (as is the accepted formatting in the new code). Having a space after opening parenthesis, but not before closing one is not OK.", "timestamp": "2023-12-04 15:16:56.000000000"}, {"message": ":_|", "timestamp": "2023-12-05 11:12:20.000000000"}]}
{"thread_id": "647945cb_97b67765", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/3/sc/source/ui/view/tabvwsh4.cxx@1699", "comments": [{"message": "I see, you use GetViewData().GetView()->ColumnRowHighlighting() to detect that it's time to update. But instead, you should examine aEvent to see which value was changed.", "timestamp": "2023-12-04 15:16:56.000000000"}, {"message": "Done", "timestamp": "2023-12-05 11:12:20.000000000"}]}
{"thread_id": "226f0d40_e108b8d9", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/5/sc/source/ui/view/tabvwsh4.cxx@1706", "comments": [{"message": "you may call clear() unconditionally - it is a no-op when it is already empty.", "timestamp": "2023-12-05 06:54:20.000000000"}, {"message": "Done", "timestamp": "2023-12-05 11:12:20.000000000"}]}
{"thread_id": "b803dff3_f0d5c99b", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/5/sc/source/ui/view/tabvwsh4.cxx@1713", "comments": [{"message": "queryInterface is expected to return an *interface*. So returning a string here is not correct. If at all, return an empty Any, like this:\n\n    return {};\n\nBut why did you need to re-implement the XInterface methods here? You should inherit from public cppu::WeakImplHelper<css::document::XDocumentEventListener>, like WeakDocumentEventListener does (framework/inc/helper/mischelper.hxx); that parent already implements the fundamental XInterface methods itself.", "timestamp": "2023-12-05 06:54:20.000000000"}, {"message": "Changed", "timestamp": "2023-12-05 11:12:20.000000000"}, {"message": "Done", "timestamp": "2023-12-05 12:35:48.000000000"}]}
{"thread_id": "b953a84d_20c81998", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/5/sc/source/ui/view/tabvwsh4.cxx@1767", "comments": [{"message": "Note that you use XChangesNotifier interface of m_xConfigurationAccess everywhere. So why declare it as XInterface? It requires you to query the interface each time, instead of using the already queried interface.", "timestamp": "2023-12-05 06:54:20.000000000"}, {"message": "Makes sense.", "timestamp": "2023-12-05 11:12:20.000000000"}, {"message": "Done", "timestamp": "2023-12-05 12:35:48.000000000"}]}
{"thread_id": "6a5ea08a_2b6072e4", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/5/sc/source/ui/view/tabvwsh4.cxx@1768", "comments": [{"message": "You used uno::UNO_QUERY ctor above. It means, that potentially, the xCN reference might be empty here - if m_xConfigurationAccess was empty, or if m_xConfigurationAccess didn't provide the requested interface. Thus, you *must not* dereference it unconditionally here; you must always check if it is valid:\n\n    if (xCN)\n        xCN->addChangesListener(this);\n\nGenerally, you always choose between the two main types of query ctors of references:\n\n1. Taking css::uno::UNO_QUERY\nUse it when it is OK when it's OK when the requested interface is not available - like here, when not having it does *not* mean that you can't construct a valid ScTabViewShell. The constructed reference may legitimately be empty. You always check the result after query.\n2. Taking css::uno::UNO_QUERY_THROW\nUse it when failure to obtain the interface is an error. Then such a failure will throw; and so you are safe to just dereference such a reference after construction - the code will not reach your dereference with an invalid reference.", "timestamp": "2023-12-05 06:54:20.000000000"}, {"message": "Done", "timestamp": "2023-12-05 11:12:20.000000000"}]}
{"thread_id": "de71a41d_f6f25c6b", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/5/sc/source/ui/view/tabvwsh4.cxx@1923", "comments": [{"message": "Why do you add listener in dtor?", "timestamp": "2023-12-05 06:54:20.000000000"}, {"message": "I had some inheritance issues :). ( meanwhile My Brain :| \"what should I say...what should I say...\")", "timestamp": "2023-12-05 11:12:20.000000000"}]}
{"thread_id": "2143a1ef_bb6b2dfd", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/6/sc/source/ui/view/tabvwsh4.cxx@1695", "comments": [{"message": "This is not an \"operation\": rather, it's a changed entry, or element...", "timestamp": "2023-12-05 12:35:48.000000000"}, {"message": "Done", "timestamp": "2023-12-06 14:23:29.000000000"}]}
{"thread_id": "4138b432_2190843a", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/6/sc/source/ui/view/tabvwsh4.cxx@1744", "comments": [{"message": "The \"m_\" prefix here is wrong - likely simply a residual from previous code ;-)\n\nAnd the overall formatting here is also a mess: line 1739 uses two spaces before \"=\"; line 1740 has spaces inside parentheses; line 1742 uses spaces in the template parameter angle brackets (but not on line 1744, thankfully);line 1747 again has a space before closing parenthesis.\n\nPlease, *please*, make an effort to make your code consistent :-)", "timestamp": "2023-12-05 15:57:54.000000000"}, {"message": "Done", "timestamp": "2023-12-05 21:48:07.000000000"}]}
{"thread_id": "e31dc0d8_4c28abb9", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/6/sc/source/ui/view/tabvwsh4.cxx@1749", "comments": [{"message": "m_xChangesNotifier.set(m_xConfigurationAccess, uno::UNO_QUERY);", "timestamp": "2023-12-05 12:35:48.000000000"}, {"message": "Done", "timestamp": "2023-12-05 21:48:07.000000000"}]}
{"thread_id": "2cac863c_38859121", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/6/sc/source/ui/view/tabvwsh4.cxx@1751", "comments": [{"message": "I suggest to move all this block to the end of the ctor. It is not required for all the stuff below; and I worry, that pre-mature listening might itself be dangerous: what happens, when a notification arrives, while the ctor is still processing, and so the object is not ready?", "timestamp": "2023-12-05 12:35:48.000000000"}, {"message": "Done", "timestamp": "2023-12-06 14:23:29.000000000"}]}
{"thread_id": "1a87658a_0b2975f7", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/6/sc/source/ui/view/tabvwsh4.cxx@1906", "comments": [{"message": "And removal of the listener should be first, before you start to destroy the object's internals (and doing so, make the possible notifications dangerous)", "timestamp": "2023-12-05 13:44:07.000000000"}, {"message": "Done", "timestamp": "2023-12-06 14:23:29.000000000"}]}
{"thread_id": "2164b527_1ffb2c93", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/7/sc/source/ui/view/tabvwsh4.cxx@1794", "comments": [{"message": "CSS is short for com::sun::star. There is a 'using' for this namespace above; most cases in this file omit css. For consistency, also skip them here in the cxx.", "timestamp": "2023-12-05 21:48:07.000000000"}, {"message": "Done", "timestamp": "2023-12-06 14:23:29.000000000"}]}
{"thread_id": "1f656b97_a2c365cf", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/7/sc/source/ui/view/tabvwsh4.cxx@1852", "comments": [{"message": "Despite I myself asked you to move this to the top, please move it a little bit down, after setting bInDispose", "timestamp": "2023-12-05 21:48:07.000000000"}, {"message": "Done", "timestamp": "2023-12-06 14:23:29.000000000"}]}
{"thread_id": "8a38a62d_12a7e46e", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/8/sc/source/ui/view/tabvwsh4.cxx@1794", "comments": [{"message": "no! I wrote to omit css, not to expand it! see your own line 1881, where you use Uno::Any, not CSS::Uno::Any - and no way the awful com::sun::star::Uno::Any\n\nIndeed, the using directive is debatable. But it is present, and you yourself use CSS in part of cases, and omit in other part.", "timestamp": "2023-12-06 04:03:12.000000000"}, {"message": "Removed wherever it was Possible. I tried to add `using namespace com::sun::star;` in the header file, but it errored, so left them to `css::..`", "timestamp": "2023-12-06 14:23:29.000000000"}, {"message": "Thanks!\n\nIt was not intended to add it to header. In general, I dislike the 'using'; and we sometimes do changes like \"remove 'using' directive from ...\". So no, I am not fan of removal of css; I myself always use it in new files.\n\nBut here we already have an existing file, with already present file-local convention. You didn't use css in some cases, and did use it in other cases. That was why I asked you to make it consistent here, with the pre-existing status. Do not take this as a \"general rule / preference\".\n\nAnd thank you for all the cleanups!", "timestamp": "2023-12-06 14:34:53.000000000"}]}
{"thread_id": "5f28541f_0986bdd8", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/9/sc/source/ui/view/tabvwsh4.cxx@1854", "comments": [{"message": "Aha. The problem is here.\n\nremoveChangesListener takes 'const Reference< XChangesListener >&'; passing this automatically creates such a reference - and increments the refcount in the object (which is currently in destruction!). Then, after the operation, the reference gets destroyed, refcount is decremented - to zero; and that makes the reference try to 'delete' its pointer, calling nested destructor the second time.\n\nPlease move this code to 'disposing'.", "timestamp": "2023-12-07 13:39:44.000000000"}, {"message": "Done", "timestamp": "2023-12-08 18:11:18.000000000"}]}
{"thread_id": "bdaabb1c_806d3460", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/10/sc/source/ui/view/tabvwsh4.cxx@1692", "comments": [{"message": "*startListening(correction). Same for stop listener", "timestamp": "2023-12-07 18:52:46.000000000"}]}
{"thread_id": "092b7657_27fb0596", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/10/sc/source/ui/view/tabvwsh4.cxx@1728", "comments": [{"message": "How would we update the highlight then?\nOne way I could think of is having a private `pView` (ScTabView), and then calling higihlight using `pView->HighlightOverlay()`. It works. But then I had issues constructing object of ScViewOptiChangesListener.", "timestamp": "2023-12-07 18:52:46.000000000"}, {"message": "Done", "timestamp": "2023-12-08 20:06:46.000000000"}]}
{"thread_id": "84344f17_332a8c39", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/11/sc/source/ui/view/tabvwsh4.cxx@1692", "comments": [{"message": "startListener is unneeded: it is naturally inlined into the sole place where it is used.", "timestamp": "2023-12-08 18:11:18.000000000"}, {"message": "Done", "timestamp": "2023-12-08 20:06:46.000000000"}]}
{"thread_id": "236eca52_ccfa191b", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/11/sc/source/ui/view/tabvwsh4.cxx@1735", "comments": [{"message": "No need to check if it is, and remove yourself from the broadcaster. The broadcaster notifies you that the broadcaster itself is going to disappear. Your task is to free its reference (if you don't, you will prevent it from destroying, where it should happen); so the two lines must become one:\n\n    m_xChangesNotifier.clear();", "timestamp": "2023-12-08 18:11:18.000000000"}, {"message": "Done", "timestamp": "2023-12-08 20:06:46.000000000"}]}
{"thread_id": "64925dfb_df5ab732", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/11/sc/source/ui/view/tabvwsh4.cxx@1738", "comments": [{"message": "Use a *reference* to *ScTabViewShell*, not a *pointer* to *ScTabView*. This way, you don't even need to check if it's valid. I don't think there's a need to nullify it during the listener's lifetime.", "timestamp": "2023-12-08 18:11:18.000000000"}, {"message": "Done", "timestamp": "2023-12-08 20:06:46.000000000"}]}
{"thread_id": "c4efd762_2fafddae", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/11/sc/source/ui/view/tabvwsh4.cxx@1747", "comments": [{"message": "It can't be here in the destructor, for the same reason as we discussed earlier.\nAnd for yet another reason, too.\n\nAll UNO objects are ref-counted. When you initially create it, it has a refcount of 0; assigning it to a reference (mChangesListener) increments it. Passing this same object to addChangesListener will create another reference to this same object in the broadcaster; and the refcount will increase to two. The broadcaster will hold that reference until you ask it to remove this listener.\n\nThen every time you destroy a reference, its refcount is decremented. When it reaches 0, the object gets automatically deleted (and you never delete it explicitly - so your code in destructor is incorrect).\n\nWhen ScTabViewShell will get destroyed, its reference will also destroy, decreasing refcount. Or you may clear the reference at any moment, with the same effect. But you also *must ask broadcaster* to release its reference - and that will destroy your object. Without that, your destructor will not be called at all (where you expect it) - which is why putting stopListener to destructor is wrong. Also, if you call delete explicitly, you get the double delete problem.\n\nSo in your dtor, you must first call mChangesListener->stopListener(), which will decrease the listener refcount to 1; and then mChangesListener.clear(), which will delete it.", "timestamp": "2023-12-08 18:11:18.000000000"}, {"message": "Done", "timestamp": "2023-12-08 20:53:59.000000000"}]}
{"thread_id": "1687fe63_4e9fc802", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/11/sc/source/ui/view/tabvwsh4.cxx@1776", "comments": [{"message": "Pass *this here, not GetViewData().GetView().\n\nBut still: please, move it to the end of the function.", "timestamp": "2023-12-08 18:11:18.000000000"}, {"message": "Done", "timestamp": "2023-12-08 20:06:46.000000000"}]}
{"thread_id": "6b6ab8a0_eb063cc9", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/11/sc/source/ui/view/tabvwsh4.cxx@1878", "comments": [{"message": "mChangesListener can't be null here - you created it using new (which would throw on error, so its success, and dtor call, means that it is non-null). No need to check (before the calls that I discussed above, not the incorrect delete).", "timestamp": "2023-12-08 18:11:18.000000000"}, {"message": "Done", "timestamp": "2023-12-08 20:06:46.000000000"}]}
{"thread_id": "ac8f5830_5783139d", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/12/sc/source/ui/view/tabvwsh4.cxx@1707", "comments": [{"message": "In this case, you must check if m_xChangesNotifier is nullptr. You create it in ctor, where you already expect it to possibly be null; you may clear it in disposing.", "timestamp": "2023-12-08 20:53:59.000000000"}, {"message": "Done", "timestamp": "2023-12-08 21:27:04.000000000"}]}
{"thread_id": "342661ba_db3dfb4c", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/12/sc/source/ui/view/tabvwsh4.cxx@1722", "comments": [{"message": "Note the difference here: this call does not a chank. You call a method of the uno::Reference, not of the interface it points to; and it is clear from use of operator .() (that accesses own metjods, like clear) vs operator ->() (that dereferences the inner pointer).", "timestamp": "2023-12-08 20:53:59.000000000"}, {"message": "> this call does not a chank\n\nSorry, a typo: \"this call does not a check\"", "timestamp": "2023-12-08 21:07:06.000000000"}, {"message": "this is correct right?", "timestamp": "2023-12-08 21:27:04.000000000"}, {"message": "Done", "timestamp": "2023-12-09 07:28:45.000000000"}]}
{"thread_id": "f9dc5b32_9329a75f", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/12/sc/source/ui/view/tabvwsh4.cxx@1876", "comments": [{"message": "If the comment \"This does not check..\" doesn't mean there is some logical error, then it means what these 2 lines do most probably.\nClearing a reference ==> reducing refcount of the orignal object. (on 0 it deletes itself Or does Refrence interface do so?)\n\n-> operator with uno::Reference<> make a pointer behave like a reference, with lifetime bound to reference count.", "timestamp": "2023-12-08 21:27:04.000000000"}, {"message": "https://opengrok.libreoffice.org/xref/core/include/com/sun/star/uno/Reference.h\n\nhttps://opengrok.libreoffice.org/xref/core/include/com/sun/star/uno/Reference.hxx\n\nhttps://opengrok.libreoffice.org/xref/core/udkapi/com/sun/star/uno/XInterface.idl\n\nThe reference calls the referenced object's acquire/release methods, and the latter is responsible for deleting itself.", "timestamp": "2023-12-09 07:28:45.000000000"}]}
{"thread_id": "10cd3996_b17c8502", "url": "https://gerrit.libreoffice.org/#/c/core/+/160152/15/sc/source/ui/view/tabvwsh4.cxx@1719", "comments": [{"message": "Heh, isn't this trying to find itself?\n\nScTabViewShell inherits from ScDBFunc, which inherits from ScViewFunc, which inherits from ScTabView - so ScTabViewShell *is* ScTabView. The latter has GetViewData method, that returns ScViewData&; and the latter has GetView method, that returns ScDBFunc*. Finally, ScTabView has the HighlightOverlay method that you introduced ... so shouldn't this be simplified to\n\n        mrViewShell.HighlightOverlay();\n\n?", "timestamp": "2023-12-09 09:21:18.000000000"}, {"message": "At some point I suspected that, but couldn't track it down;\nTwo options:\na) I upload a patch solving this\nb) Let's make it an easyhack difficulty easy (there aren't many left for newbies)\nBoth are fine by me, as you say.\n\nAbout the next patch, It should be adding Uno command, (and binding it to a key combination ?)", "timestamp": "2023-12-09 10:05:10.000000000"}, {"message": "Please do it - this isn't OK as an easyhack, because looks like \"fix some small overlook in a single patch\".\n\nThe next patch - please remind me of a context? Whci bug # we are discussing now?", "timestamp": "2023-12-09 12:27:15.000000000"}, {"message": "Next patch for highlightoverlay itself. The users are asking for some way to be able to toggle it quickly. Also we need to add a colorPicker for the highlight in the tools > options > application colors section.", "timestamp": "2023-12-09 12:32:29.000000000"}, {"message": "And a checkbox in the View dropdown (on the top menubar Files Edit View...) It has one for value Highlighting.", "timestamp": "2023-12-09 12:34:34.000000000"}, {"message": "Aha, yes - an UNO command is needed, that would have a state and action (implemented by creating a slot in an SDI file (likely tabvwsh.sdi), having respective ExecMethod and StateMethod - they reference existing methods in the respective object, which need to be amended in their respective switch statements).", "timestamp": "2023-12-09 12:40:06.000000000"}]}
{"thread_id": "1e7202c7_f078909d", "url": "https://gerrit.libreoffice.org/#/c/core/+/157189/1/vcl/source/outdev/bitmap.cxx@655", "comments": [{"message": "You could use SAL_WARN_IF", "timestamp": "2023-11-21 02:21:18.000000000"}, {"message": "fixed :-)", "timestamp": "2023-12-06 14:37:32.000000000"}]}
{"thread_id": "6077d1eb_69f8c879", "url": "https://gerrit.libreoffice.org/#/c/core/+/160402/1/embeddedobj/source/general/xcreator.cxx@50", "comments": [{"message": "Is it okay to throw a NoSupportException here? Should that be documented on offapi/com/sun/star/embed/XEmbedObjectCreator.idl", "timestamp": "2023-12-07 08:38:53.000000000"}, {"message": "All these functions that now potentially throw css.lang.NoSupportException (which is derived from css.uno.Exception, not css.uno.RuntimeException) are explicitly specified in UNOIDL to raise css.uno.Exception, so this should be fine at least technically.\n\nMy naive understanding is that we should never actually run into any of these throw statements, as having DisableActiveOLE set means that UNOEmbeddedObjectCreator::createInstanceInitFromEntry will always return an ODummyEmbeddedObject, on which all these functions are never called anyway, right?\n\nOtherwise (if we can legitimately run into any of these throw statements), you might want to check that throwing those css.lang.NoSupprtException does not cause any aborts that would be avoided if instead throwing some RuntimeException (i.e., if that would happen to already be caught by some `catch(css::uno::RuntimeException)` and thus handled in a useful way).", "timestamp": "2023-12-07 09:58:24.000000000"}, {"message": "The functions that now throw lang::NoSuchElementException are\nusually called on new creation of embedded content via UI. AFAICS, those call sites expect/handle css.uno.Exception properly not calling abort - since it is a possibility that embedded content can fail initializing.\n\nAs a follow-up patch I plan to disable UI insertion bits when the config option is set. Right now they alert with a pop-up stating unable to insert.", "timestamp": "2023-12-07 10:52:04.000000000"}]}
{"thread_id": "06cb8631_6e7ce871", "url": "https://gerrit.libreoffice.org/#/c/core/+/159986/2/configmgr/source/access.cxx@496", "comments": [{"message": "this non-runtime-exception type needs to be listed in the UNOIDL method description", "timestamp": "2023-11-28 11:25:53.000000000"}, {"message": "Done", "timestamp": "2023-11-30 12:23:02.000000000"}]}
{"thread_id": "e9a057bf_394b522c", "url": "https://gerrit.libreoffice.org/#/c/core/+/159986/2/configmgr/source/propertynode.cxx@70", "comments": [{"message": "* Might be useful to consider as modified only what is modified either programmatically through `configmgr::ChildAccess::commitChanges` (which uses `Data::NO_LAYER`) or when reading a \"user modifications\" layer on start up (cf. layers `\"dconf\"`, `\"winreg\"`, and `\"user\"` in the `configmgr::Components` ctor).  We'd need to either thread the information that we are in such a context through to here, or reconstruct that information here from the given `layer` value (which would require storing in `configmgr::Components` what the relevant \"user modifications\" layer value is/are).\n\n* Why make this conditional on `hasValue()`?\n\n* There are more functions that need a similar treatment, see `configmgr::PropertyNode::getValuePtr`, `configmgr::LocalizedPropertyValue::setValue`, and `configmgr::LocalizedPropertyValue::getValuePtr`.", "timestamp": "2023-11-28 11:25:53.000000000"}, {"message": "Not sure how exactly this can be implemented.\nThe current check works for some cases, but not for all.\n\nWhat do you mean with\n\n> which would require storing in configmgr::Components  what the relevant \"user modifications\" layer value is/are\n\n?", "timestamp": "2023-11-30 12:23:02.000000000"}, {"message": "The layers that store user modifications are `\"user\"` or, where available, `\"dconf\"` or `\"winreg\"`.  (Usually, there is exactly one of those, but that's all controlled by the `CONFIGURATION_LAYERS` bootstrap variable, so could vary.)  What actual `layer` value such a layer has is determined dynamically in the `Configmgr::Components` constructor.  So hard-coding a check `layer == 1` is wrong, and you'd need to somehow store the correct value(s) to use in that comparison.\n\nBut I think the easier/cleaner solution is to thread the information \"this is a user modification\" through to the calls to `setValue` and `getValuePtr`, with an additional parameter for those functions.", "timestamp": "2023-12-01 10:57:17.000000000"}, {"message": "Done", "timestamp": "2023-12-04 12:47:28.000000000"}]}
{"thread_id": "9794d0f1_4e7a094a", "url": "https://gerrit.libreoffice.org/#/c/core/+/159986/2/cui/source/options/optaboutconfig.cxx@203", "comments": [{"message": "@Caolan: Want to make modified rows bold.\nThis has no effect. Am I missing something?", "timestamp": "2023-11-27 15:51:21.000000000"}, {"message": "I imagine you mean it has no effect under gtk?\n\nThere need to be attributes in the .ui to link the model columns for bold to the view. I will add those for the three columns set here to the .ui and merge that to this commit.", "timestamp": "2023-11-28 12:18:09.000000000"}, {"message": "Thanks a lot!", "timestamp": "2023-11-30 12:23:02.000000000"}]}
{"thread_id": "1169012c_ec6593f8", "url": "https://gerrit.libreoffice.org/#/c/core/+/160003/2/sfx2/source/control/recentdocsview.cxx@113", "comments": [{"message": "By selecting the item we loose the hover highlight function. Not really against (although it was nice looking) but I think the respective variables and code should be deleted consequently.\nEdit: We need it for the template manager.", "timestamp": "2023-11-29 10:19:15.000000000"}, {"message": "Sorry about that, I forgot to restore it.", "timestamp": "2023-11-29 10:33:48.000000000"}]}
{"thread_id": "dca51d97_e2897121", "url": "https://gerrit.libreoffice.org/#/c/core/+/160003/1/sfx2/source/control/recentdocsviewitem.cxx@306", "comments": [{"message": "Instead of the code duplication, I suppose we could add some `isRecentDocumentView` boolean to `sfx2/source/control/thumbnailviewitem.cxx`?", "timestamp": "2023-11-27 17:03:38.000000000"}, {"message": "Would feel cleaner to add the boolean as an optional parameter to `ThumbnailViewItem::Paint()`", "timestamp": "2023-11-28 08:17:56.000000000"}, {"message": "Done", "timestamp": "2023-11-29 09:37:56.000000000"}]}
{"thread_id": "a416b495_b9be0a56", "url": "https://gerrit.libreoffice.org/#/c/core/+/160003/2/sfx2/source/control/thumbnailview.cxx@685", "comments": [{"message": "Remove this since it would be always true?", "timestamp": "2023-11-29 10:19:15.000000000"}, {"message": "It's false in Recent Docs and Templates and is the logic to prevent multiselection.", "timestamp": "2023-11-29 10:33:48.000000000"}]}
{"thread_id": "e7caa861_4167a00d", "url": "https://gerrit.libreoffice.org/#/c/core/+/160311/2/svx/source/form/fmshimp.cxx@3383", "comments": [{"message": "You can do assert(condition && \"message\") and the message will appear in the final assert if \"condition\" fails", "timestamp": "2023-12-04 17:11:26.000000000"}, {"message": "Indeed! Done here: https://gerrit.libreoffice.org/c/core/+/160318", "timestamp": "2023-12-04 17:24:18.000000000"}]}
{"thread_id": "af4bcb0d_86dd8c9e", "url": "https://gerrit.libreoffice.org/#/c/core/+/159001/15/sc/source/ui/app/scmod.cxx@1041", "comments": [{"message": "Now updates instantaneously whenever clicked on apply or OK", "timestamp": "2023-11-21 20:39:41.000000000"}, {"message": "This is a wrong approach. It abuses the fact that this method is called when the dialog closes; but in fact, it should not, when only the single setting is changed; also, when an UNO command is introduced, this method will not be called.\n\nTo do it correctly, Calc should establish a *listener* on the officecfg node; and when that listener fires, update it. It would be universal and correct method.", "timestamp": "2023-11-22 04:44:16.000000000"}, {"message": "`aDisplayItem.SetCommitLink( LINK( this, ScViewCfg, DisplayCommitHdl ) );`\nif I am not wrong, then this should be the listener `DisplayCommitHdl`\nhttps://opengrok.libreoffice.org/xref/core/sc/source/core/tool/viewopti.cxx?r=bb79936e&fi=DisplayCommitHdl#521", "timestamp": "2023-11-22 08:06:52.000000000"}, {"message": "Yes, it looks like it is :-)", "timestamp": "2023-11-22 08:10:29.000000000"}, {"message": "Control flow (when [ Apply ] is clicked)\n** When [ ] ValueHighlighting is toggled\n- When ValueHighlighting is toggled, and apply is pressed, `IMPL_LINK(OfaTreeOptionsDialog, ApplyHdl_Impl, weld::Button&, rButton, void)` is triggered. From the name itself it's clear that it handles Apply.\n\n- Then `ApplyItemSets()` call it triggers `ScModule::ModifyOptions()`, which has various conditionals for different optinos. One such conditional is `if (const ScTpViewItem* pItem = rOptSet.GetItemIfSet(SID_SCVIEWOPTIONS))`. In case of `ColRowHighlighting` checkbox, this check doesn't pass.  Inside this if conditional's block, there are various checks on whether the checkboxes in the Options > View dialogue have changed or not.\n\n- Then it calls `SetViewOptions`, within that same condition body, which marks the view config items modified as shown below.\n   @code cpp\n   aLayoutItem.SetModified();\n   aDisplayItem.SetModified();\n   aGridItem.SetModified();\n   @end\n- Then control returns to ApplyHdl_Impl function, which then calls `utl::ConfigManager::doStoreConfigItems()`, which now iterates over the config items, checking if item->IsModified() ? If yes, then it calls commit on it, and clears the modified status. Commit calls the CommitHandler which puts the new propertyStates in the respective config item `ScLinkConfigItem`.\n\n** When [ ] ColRowHighlighting is toggled\n- But in this case, it doesn't pass either the `ScModule::ModifyOptions()` condition for ViewOptions, and due to that, `SetViewOptions` is not called on the config items --> which leads to highlight not updating. \n   @code cpp\n   ScTpContentOptions::Reset()          \n   ScTpContentOptions::FillItemSet()   \n   ScModule::ModifyOptions()\n   ScViewCfg::SetOptions()\n   ScViewCfg::DisplayCommitHdl()\n   ScTpContentOptions::Reset()\n   @end\n   \n`ScTpViewItem* pItem = rOptSet.GetItemIfSet(SID_SCVIEWOPTIONS))` I didn't understand. How it's doing what. (Looks like it's checking whether some option was changed or not), but the how part is cloudy.\n\nPlus you said establish listener on officecfg node, A little more elaboration would be of great help.", "timestamp": "2023-11-23 17:45:17.000000000"}, {"message": "You should not concentrate on this control flow. Instead look at this:\n\n1. You set an officecfg value. You may do it anywhere: in your dialog page; in Expert config; in a macro; in a future UNO command ... Setting the registry config is the *only* thing that should happen, and it must reflect automatically in Calc\n\n2. For that, Calc needs to listen to the registry changes. And it already does: you already found the DisplayCommitHdl, set up by ScViewCfg ctor. It listens for Office.Calc/Content/Display changes... You might try to put a breakpoint to that handler, and check if it gets triggered, when you change the registry either from your page, or from expert config.\n\n3. So all that you need is just to add the code to that handler, which would also update the highlight according to the new config value.\n\nAnd remove everything else - your change will be the simplest possible. That was the reason I insisted to not introduce complaxity from start, and only focus on officecfg.", "timestamp": "2023-11-24 07:27:44.000000000"}, {"message": "Changing the registry either from the expert config or from the dialogue page doesn't trigger the DisplayCommitHdl.", "timestamp": "2023-11-24 08:44:53.000000000"}, {"message": "Maybe because the listener (aDisplayItem) calls EnableNotification(aNames); where aNames is defined by GetDisplayPropertyNames(), and doesn't include your property yet?", "timestamp": "2023-11-24 09:24:47.000000000"}, {"message": "Ah no - it's because there's a SetCommitLink, but no SetNotifyLink for aDisplayItem. Your code should be in a new *notification* handler, not commit handler :-)", "timestamp": "2023-11-24 09:39:03.000000000"}, {"message": "Wrote`DisplayNotifyHdl`, and linked it to `aDisplayItem`. And now toggling the checkbox calls the `DisplayNotifyHdl`. How I implemented Refreshing HighlightOverlay(), was by by calling the function. Therefore Just Putting the value in the pValues[] doesn't solve the refreshing problem. What can be done in this case? Like linking the refresh function to officecfg toggling. \n\nCurrently There's a conditional inside the function itself checking for the highlight status, and is refreshed when SetCursor() is called.", "timestamp": "2023-11-24 13:00:18.000000000"}, {"message": "Do you expect me to have a crystal ball? You haven't provided any updated patch, where we could discuss how to implement something.", "timestamp": "2023-11-24 13:08:24.000000000"}, {"message": "Here it is.", "timestamp": "2023-11-24 13:25:29.000000000"}]}
{"thread_id": "1416cbb7_a5a55f33", "url": "https://gerrit.libreoffice.org/#/c/core/+/159001/7/sc/source/ui/optdlg/tpview.cxx@134", "comments": [{"message": "This line is wrong: when all other b_x*CB have changed state, we know that m_xLocalOptions contains these changes; but m_xColRowHighCB is different, because it doesn't change m_xLocalOptions. It needs a separate handling below.", "timestamp": "2023-11-18 06:12:11.000000000"}, {"message": "Done", "timestamp": "2023-11-18 10:29:21.000000000"}]}
{"thread_id": "ba1fc616_cd9514e8", "url": "https://gerrit.libreoffice.org/#/c/core/+/159001/7/sc/source/ui/optdlg/tpview.cxx@162", "comments": [{"message": "Setting officecfg value should happen here, after this line, in case when m_xColRowHighCB->get_state_changed_from_saved(). Because ScTpContentOptions::FillItemSet is called to get the final returned value to the caller.", "timestamp": "2023-11-18 06:12:11.000000000"}, {"message": "Done", "timestamp": "2023-11-18 10:29:21.000000000"}]}
{"thread_id": "d099bf32_78f27b1c", "url": "https://gerrit.libreoffice.org/#/c/core/+/159001/7/sc/source/ui/optdlg/tpview.cxx@284", "comments": [{"message": "This block is wrong here. This method is called when the checkbox is clicked. In the dialog, clicking a checkbox must not yet make configuration changes - the user may change their mind, and cancel.\n\nMove this block into ScTpContentOptions::FillItemSet.\nAnd improve readability of pChange definition using auto.", "timestamp": "2023-11-18 06:12:11.000000000"}, {"message": "Done", "timestamp": "2023-11-18 10:29:21.000000000"}]}
{"thread_id": "db7aa152_0e822478", "url": "https://gerrit.libreoffice.org/#/c/core/+/160216/2/vcl/source/window/dockwin.cxx@930", "comments": [{"message": "I think the problem could be `get_id() != \"check_list_menu\"` - we don't do that if it is not an Autofilter menu\n\nAfter removing that - I see submenu", "timestamp": "2023-12-03 18:04:53.000000000"}]}
{"thread_id": "4126adca_8c97b3bc", "url": "https://gerrit.libreoffice.org/#/c/core/+/160193/3/sw/qa/core/header_footer/HeaderFooterTest.cxx@757", "comments": [{"message": "Why comment out? Either add a TODO and explain it or restore it, I would suggest.", "timestamp": "2023-12-04 08:09:57.000000000"}]}
{"thread_id": "6423a962_eb81f43a", "url": "https://gerrit.libreoffice.org/#/c/core/+/160193/3/sw/qa/extras/ooxmlexport/ooxmlexport8.cxx@b733", "comments": [{"message": "You could assert here that the footer is empty.", "timestamp": "2023-12-04 08:09:57.000000000"}]}
{"thread_id": "4419efc7_0398949a", "url": "https://gerrit.libreoffice.org/#/c/core/+/160193/3/writerfilter/qa/cppunittests/dmapper/PropertyMap.cxx@68", "comments": [{"message": "Hm, the DOC import sometimes makes the trick that the paragraph's font size is minimal in this case. I wonder if you could do the same here, which would not give you 250, but something really close.", "timestamp": "2023-12-04 08:09:57.000000000"}]}
{"thread_id": "d0e35b8b_edf13cb2", "url": "https://gerrit.libreoffice.org/#/c/core/+/160192/3/sw/qa/core/header_footer/HeaderFooterTest.cxx@76", "comments": [{"message": "I assume this crashed without the fix. If so, it would be worth documenting that here in a comment.", "timestamp": "2023-12-04 08:00:14.000000000"}]}
{"thread_id": "35e94ebb_c08869c6", "url": "https://gerrit.libreoffice.org/#/c/core/+/160214/2/sfx2/source/view/viewsh.cxx@1246", "comments": [{"message": "I understand that this is a testing commit; but just in case - the intended way would be\n\n        xSelectedObject.set(aEvent.Source, uno::UNO_QUERY);", "timestamp": "2023-12-01 17:31:27.000000000"}]}
{"thread_id": "a7ffaecf_bbe8e5ae", "url": "https://gerrit.libreoffice.org/#/c/core/+/160237/2/xmloff/source/text/XMLTextFrameContext.cxx@1085", "comments": [{"message": "Hi Tomaz,\nis this print a leftover ?", "timestamp": "2023-12-02 11:41:21.000000000"}, {"message": "yes, missed that", "timestamp": "2023-12-02 12:33:02.000000000"}]}
{"thread_id": "ec2932bb_4ff0f294", "url": "https://gerrit.libreoffice.org/#/c/core/+/160155/2/sc/source/ui/view/output3.cxx@243", "comments": [{"message": "at least during `CppunitTest_sc_dataprovider`, `pDrawView` can be null here, cf. <https://ci.libreoffice.org//job/lo_ubsan/2997/>\n\n  /sc/source/ui/view/output3.cxx:243:57: runtime error: reference binding to null pointer of type 'SdrPaintView'\n      #0 0x7f62392debee in ScOutputData::DrawSelectiveObjects(o3tl::strong_int<short, SdrLayerIDTag>) /sc/source/ui/view/output3.cxx:243:36\n      #1 0x7f62390abf90 in ScGridWindow::DrawRedraw(ScOutputData&, o3tl::strong_int<short, SdrLayerIDTag>) /sc/source/ui/view/gridwin3.cxx:231:17\n      #2 0x7f62390c523d in ScGridWindow::DrawContent(OutputDevice&, ScTableInfo const&, ScOutputData&, bool) /sc/source/ui/view/gridwin4.cxx:1007:5\n      #3 0x7f62390bb0b4 in ScGridWindow::Draw(short, int, short, int, ScUpdateMode) /sc/source/ui/view/gridwin4.cxx:590:5\n      #4 0x7f62390b5372 in ScGridWindow::Paint(OutputDevice&, tools::Rectangle const&) /sc/source/ui/view/gridwin4.cxx:458:5\n      #5 0x7f6278f30358 in PaintHelper::DoPaint(vcl::Region const*) /vcl/source/window/paint.cxx:313:20\n      #6 0x7f6278f3c473 in vcl::Window::ImplCallPaint(vcl::Region const*, ImplPaintFlags) /vcl/source/window/paint.cxx:617:17\n      #7 0x7f6278f38edb in PaintHelper::~PaintHelper() /vcl/source/window/paint.cxx:552:30\n      #8 0x7f6278f3c811 in vcl::Window::ImplCallPaint(vcl::Region const*, ImplPaintFlags) /vcl/source/window/paint.cxx:623:1\n      #9 0x7f6278f38edb in PaintHelper::~PaintHelper() /vcl/source/window/paint.cxx:552:30\n      #10 0x7f6278f3c811 in vcl::Window::ImplCallPaint(vcl::Region const*, ImplPaintFlags) /vcl/source/window/paint.cxx:623:1\n      #11 0x7f6278f38edb in PaintHelper::~PaintHelper() /vcl/source/window/paint.cxx:552:30\n      #12 0x7f6278f3c811 in vcl::Window::ImplCallPaint(vcl::Region const*, ImplPaintFlags) /vcl/source/window/paint.cxx:623:1\n      #13 0x7f6278f38edb in PaintHelper::~PaintHelper() /vcl/source/window/paint.cxx:552:30\n      #14 0x7f6278f3c811 in vcl::Window::ImplCallPaint(vcl::Region const*, ImplPaintFlags) /vcl/source/window/paint.cxx:623:1\n      #15 0x7f6278f38edb in PaintHelper::~PaintHelper() /vcl/source/window/paint.cxx:552:30\n      #16 0x7f6278f3c811 in vcl::Window::ImplCallPaint(vcl::Region const*, ImplPaintFlags) /vcl/source/window/paint.cxx:623:1\n      #17 0x7f6278f3ef73 in vcl::Window::ImplCallOverlapPaint() /vcl/source/window/paint.cxx:644:9\n      #18 0x7f6278f40206 in vcl::Window::ImplHandlePaintHdl(Timer*) /vcl/source/window/paint.cxx:667:9\n      #19 0x7f6278f3f0e8 in vcl::Window::LinkStubImplHandlePaintHdl(void*, Timer*) /vcl/source/window/paint.cxx:648:1\n      #20 0x7f627c9d612d in Link<Timer*, void>::Call(Timer*) const /include/tools/link.hxx:111:45\n      #21 0x7f627c9d56dc in Timer::Invoke() /vcl/source/app/timer.cxx:75:21\n      #22 0x7f627c82c95f in Scheduler::CallbackTaskScheduling() /vcl/source/app/scheduler.cxx:480:20\n      #23 0x7f627dc2c7a3 in SalTimer::CallCallback() /vcl/inc/saltimer.hxx:54:13\n      #24 0x7f627dc20283 in SvpSalInstance::CheckTimeout(bool) /vcl/headless/svpinst.cxx:161:53\n      #25 0x7f627dc264e6 in SvpSalInstance::ImplYield(bool, bool) /vcl/headless/svpinst.cxx:399:17\n      #26 0x7f627dc28bae in SvpSalInstance::DoYield(bool, bool) /vcl/headless/svpinst.cxx:471:21\n      #27 0x7f627c91c59a in ImplYield(bool, bool) /vcl/source/app/svapp.cxx:390:48\n      #28 0x7f627c91d0d5 in Scheduler::ProcessEventsToIdle() /vcl/source/app/svapp.cxx:420:12\n      #29 0x7f62562c3267 in ScDataProvidersTest::testCSVImport() /sc/qa/unit/dataproviders_test.cxx:63:5\n      #30 0x7f6256305f17 in void std::__invoke_impl<void, void (ScDataProvidersTest::*&)(), ScDataProvidersTest*&>(std::__invoke_memfun_deref, void (ScDataProvidersTest::*&)(), ScDataProvidersTest*&) /opt/rh/gcc-toolset-12/root/usr/lib/gcc/x86_64-redhat-linux/12/../../../../include/c++/12/bits/invoke.h:74:14\n      #31 0x7f6256305b84 in std::__invoke_result<void (ScDataProvidersTest::*&)(), ScDataProvidersTest*&>::type std::__invoke<void (ScDataProvidersTest::*&)(), ScDataProvidersTest*&>(void (ScDataProvidersTest::*&)(), ScDataProvidersTest*&) /opt/rh/gcc-toolset-12/root/usr/lib/gcc/x86_64-redhat-linux/12/../../../../include/c++/12/bits/invoke.h:96:14\n      #32 0x7f62563059f0 in void std::_Bind<void (ScDataProvidersTest::* (ScDataProvidersTest*))()>::__call<void, 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) /opt/rh/gcc-toolset-12/root/usr/lib/gcc/x86_64-redhat-linux/12/../../../../include/c++/12/functional:495:11\n      #33 0x7f6256305754 in void std::_Bind<void (ScDataProvidersTest::* (ScDataProvidersTest*))()>::operator()<void>() /opt/rh/gcc-toolset-12/root/usr/lib/gcc/x86_64-redhat-linux/12/../../../../include/c++/12/functional:580:17\n      #34 0x7f62563055cc in void std::__invoke_impl<void, std::_Bind<void (ScDataProvidersTest::* (ScDataProvidersTest*))()>&>(std::__invoke_other, std::_Bind<void (ScDataProvidersTest::* (ScDataProvidersTest*))()>&) /opt/rh/gcc-toolset-12/root/usr/lib/gcc/x86_64-redhat-linux/12/../../../../include/c++/12/bits/invoke.h:61:14\n      #35 0x7f625630547c in std::enable_if<is_invocable_r_v<void, std::_Bind<void (ScDataProvidersTest::* (ScDataProvidersTest*))()>&>, void>::type std::__invoke_r<void, std::_Bind<void (ScDataProvidersTest::* (ScDataProvidersTest*))()>&>(std::_Bind<void (ScDataProvidersTest::* (ScDataProvidersTest*))()>&) /opt/rh/gcc-toolset-12/root/usr/lib/gcc/x86_64-redhat-linux/12/../../../../include/c++/12/bits/invoke.h:111:2\n      #36 0x7f6256304a0c in std::_Function_handler<void (), std::_Bind<void (ScDataProvidersTest::* (ScDataProvidersTest*))()> >::_M_invoke(std::_Any_data const&) /opt/rh/gcc-toolset-12/root/usr/lib/gcc/x86_64-redhat-linux/12/../../../../include/c++/12/bits/std_function.h:290:9\n      #37 0x7f6256306a61 in std::function<void ()>::operator()() const /opt/rh/gcc-toolset-12/root/usr/lib/gcc/x86_64-redhat-linux/12/../../../../include/c++/12/bits/std_function.h:591:9\n      #38 0x7f6256303d28 in CppUnit::TestCaller<ScDataProvidersTest>::runTest() /workdir/UnpackedTarball/cppunit/include/cppunit/TestCaller.h:175:7\n      #39 0x7f6298df9adb in CppUnit::TestCaseMethodFunctor::operator()() const (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x316adb)\n      #40 0x7f62938286c0 in (anonymous namespace)::Protector::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) /test/source/vclbootstrapprotector.cxx:46:14\n      #41 0x7f6298dc8f6c in CppUnit::ProtectorChain::ProtectFunctor::operator()() const (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x2e5f6c)\n      #42 0x7f62938443f0 in (anonymous namespace)::Prot::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) /unotest/source/cpp/unobootstrapprotector/unobootstrapprotector.cxx:78:12\n      #43 0x7f6298dc8f6c in CppUnit::ProtectorChain::ProtectFunctor::operator()() const (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x2e5f6c)\n      #44 0x7f62992adc78 in (anonymous namespace)::Prot::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) /unotest/source/cpp/unoexceptionprotector/unoexceptionprotector.cxx:62:16\n      #45 0x7f6298dc8f6c in CppUnit::ProtectorChain::ProtectFunctor::operator()() const (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x2e5f6c)\n      #46 0x7f6298d51c7f in CppUnit::DefaultProtector::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x26ec7f)\n      #47 0x7f6298dc8f6c in CppUnit::ProtectorChain::ProtectFunctor::operator()() const (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x2e5f6c)\n      #48 0x7f6298dc2738 in CppUnit::ProtectorChain::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x2df738)\n      #49 0x7f6298e6a427 in CppUnit::TestResult::protect(CppUnit::Functor const&, CppUnit::Test*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x387427)\n      #50 0x7f6298df833b in CppUnit::TestCase::run(CppUnit::TestResult*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x31533b)\n      #51 0x7f6298dfbe11 in CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x318e11)\n      #52 0x7f6298dfb068 in CppUnit::TestComposite::run(CppUnit::TestResult*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x318068)\n      #53 0x7f6298dfbe11 in CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x318e11)\n      #54 0x7f6298dfb068 in CppUnit::TestComposite::run(CppUnit::TestResult*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x318068)\n      #55 0x7f6298e9fa86 in CppUnit::TestRunner::WrappingSuite::run(CppUnit::TestResult*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x3bca86)\n      #56 0x7f6298e68ede in CppUnit::TestResult::runTest(CppUnit::Test*) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x385ede)\n      #57 0x7f6298ea0952 in CppUnit::TestRunner::run(CppUnit::TestResult&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1+0x3bd952)\n      #58 0x5092db in (anonymous namespace)::ProtectedFixtureFunctor::run() const /sal/cppunittester/cppunittester.cxx:327:20\n      #59 0x505d27 in main2() /sal/cppunittester/cppunittester.cxx:485:16\n      #60 0x50413f in sal_main() /sal/cppunittester/cppunittester.cxx:630:14\n      #61 0x503f7e in main /sal/cppunittester/cppunittester.cxx:625:1\n      #62 0x7f6296f43d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84)\n      #63 0x426aad in _start (/workdir/LinkTarget/Executable/cppunittester+0x426aad)", "timestamp": "2023-12-01 08:01:27.000000000"}, {"message": "so maybe this should read `*pLocalDrawView` rather than `*pDrawView`?", "timestamp": "2023-12-01 08:04:19.000000000"}, {"message": "Hi, yes, that seems safer :-)\nInterestingly, here locally CppunitTest_sc_dataprovider does *not* show that behaviour (?) Still better of course!\n\nDone in https://gerrit.libreoffice.org/c/core/+/160201", "timestamp": "2023-12-01 10:12:52.000000000"}]}
{"thread_id": "f9424ea4_3beaa90b", "url": "https://gerrit.libreoffice.org/#/c/core/+/160111/2/sal/osl/unx/file.cxx@887", "comments": [{"message": "The strlen() check here is not entirely clear to me why I added that anymore; the path should always be shorter I guess.\n\nOne other thought - we should probably only allow checking the parent path and for a non-existing path when have a _Create flag somehow up the stack; but can be a follow-on. If this works lets get it in and cleanup later.", "timestamp": "2023-11-30 15:05:56.000000000"}, {"message": "noted, let's get this in for more testing", "timestamp": "2023-11-30 19:07:55.000000000"}]}
{"thread_id": "fd10fb2b_89719eb9", "url": "https://gerrit.libreoffice.org/#/c/core/+/159636/3/sc/source/ui/view/gridwin4.cxx@b1417", "comments": [{"message": "IIUC, this is how you force redrawing the highlighting?", "timestamp": "2023-11-24 13:48:36.000000000"}, {"message": "Yes exactly. Then setcursor calls highlightOverlay. Which checks whether officecfg::... get() is true or false, and based on that it either clears the highlight, or it draws/refreshes it", "timestamp": "2023-11-24 14:01:22.000000000"}]}
{"thread_id": "2804c2e3_7256fcbe", "url": "https://gerrit.libreoffice.org/#/c/core/+/160050/3/sw/qa/extras/layout/layout3.cxx@b825", "comments": [{"message": "Is it intentional that you removed this testcase? Thanks.", "timestamp": "2023-11-29 08:52:18.000000000"}, {"message": "@Mikl\u00f3s: Sorry, my mistake! I'm very glad of your feedback! I will fix it soon.", "timestamp": "2023-11-29 13:07:30.000000000"}]}
{"thread_id": "d391e327_8bd47771", "url": "https://gerrit.libreoffice.org/#/c/core/+/160050/1/sw/source/core/text/itrcrsr.cxx@1418", "comments": [{"message": "I see similar code at sw/source/core/text/porlin.cxx:92 does that also need fixing?", "timestamp": "2023-11-28 20:06:19.000000000"}, {"message": "It will need, but it hasn't got negative values yet. I will put in the next commit with GetSpaceAdd(/*bShrink=*/true), which will trigger the negative values. (But I checked now, and I haven\"t find the differnce, maybe because this PrePaint() is quite fast?) Thanks for your review!", "timestamp": "2023-11-28 22:05:05.000000000"}]}
{"thread_id": "c90659e2_7fe507dc", "url": "https://gerrit.libreoffice.org/#/c/core/+/160013/5/svx/source/svdraw/svdoashp.cxx@b1730", "comments": [{"message": "Could a const auto& be an option here instead?", "timestamp": "2023-11-29 08:40:12.000000000"}, {"message": "It probably does, we have many dozens of these so I've taken two of the samples to see if it is merely the use of \"auto\" that has coverity in a spin and if a concrete type is not warned about.", "timestamp": "2023-11-29 08:53:07.000000000"}]}
{"thread_id": "41663577_d0480bb2", "url": "https://gerrit.libreoffice.org/#/c/core/+/159912/1/sc/source/core/data/global.cxx@872", "comments": [{"message": "Something's missing here (sorry about Gerrit squeezing this into 84 columns):\n\n    /build/libo/libreoffice-7-5-z/sc/source/core/data/global.cxx: In static member function \u2018static void ScGlobal::OpenURL(const rtl::OUString&, const rtl::OUString&, bool)\u2019:\n    /build/libo/libreoffice-7-5-z/sc/source/core/data/global.cxx:872:117: error: cannot convert \u2018weld::Window*\u2019 to \u2018weld::Widget*\u2019\n      872 |                 std::unique_ptr<weld::MessageDialog> xQueryBox(Application::CreateMessageDialog(pFrame->GetFrameWeld(),\n\t  |                                                                                                 ~~~~~~~~~~~~~~~~~~~~^~\n\t  |                                                                                                                     |\n\t  |                                                                                                                     weld::Window*\n    In file included from /build/libo/libreoffice-7-5-z/include/sfx2/viewfrm.hxx:31,\n\t\t     from /build/libo/libreoffice-7-5-z/sc/source/core/data/global.cxx:35:\n    /build/libo/libreoffice-7-5-z/include/vcl/svapp.hxx:1350:67: note:   initializing argument 1 of \u2018static weld::MessageDialog* Application::CreateMessageDialog(weld::Widget*,\n    VclMessageType, VclButtonsType, const rtl::OUString&, bool)\u2019\n     1350 |     static weld::MessageDialog* CreateMessageDialog(weld::Widget* pParent, VclMessageType eMessageType,\n\t  |                                                     ~~~~~~~~~~~~~~^~~~~~~\n    /build/libo/libreoffice-7-5-z/sc/source/core/data/global.cxx:875:26: error: invalid use of incomplete type \u2018class weld::MessageDialog\u2019\n      875 |                 xQueryBox->set_primary_text(xQueryBox->get_primary_text().replaceFirst(\"$(ARG1)\",\n\t  |                          ^~\n    /build/libo/libreoffice-7-5-z/include/vcl/svapp.hxx:51:11: note: forward declaration of \u2018class weld::MessageDialog\u2019\n       51 |     class MessageDialog;\n\t  |           ^~~~~~~~~~~~~", "timestamp": "2023-11-24 16:48:56.000000000"}, {"message": "Done", "timestamp": "2023-11-27 09:51:30.000000000"}]}
{"thread_id": "3f768d02_fcc8d55c", "url": "https://gerrit.libreoffice.org/#/c/core/+/159978/1/comphelper/source/container/interfacecontainer2.cxx@174", "comments": [{"message": "rather put it here, and do\n  if (!rListener)\n      return;\nso it is obvious it is a workaround for dodgy code", "timestamp": "2023-11-27 06:10:19.000000000"}, {"message": "Done", "timestamp": "2023-11-27 17:02:21.000000000"}]}
{"thread_id": "671519bd_c3248e64", "url": "https://gerrit.libreoffice.org/#/c/core/+/159778/2/sc/source/ui/view/gridwin.cxx@6723", "comments": [{"message": "You need to make it darker/lighter depending on the canvas.", "timestamp": "2023-11-21 15:58:21.000000000"}, {"message": "Done.", "timestamp": "2023-11-21 19:49:27.000000000"}, {"message": "Done", "timestamp": "2023-11-23 08:38:25.000000000"}]}
{"thread_id": "97d5e2ac_467f86ae", "url": "https://gerrit.libreoffice.org/#/c/core/+/159778/3/sc/source/ui/view/gridwin.cxx@6723", "comments": [{"message": "How do you like aHighlightColor.Merge(aBackgroundColor, 100);? Quite appealing to me in any color combination.", "timestamp": "2023-11-22 10:25:59.000000000"}, {"message": "looks good on sane backgrounds like white or black. Should I keep the IsDark()... part or ?\nAlso IMO, giving users the choice of selecting highlight color would be nice, what do you say?", "timestamp": "2023-11-22 10:49:20.000000000"}, {"message": "Remove isDark(). And I think we should stick to the accent color since the focused cell uses this color. We could take this into the color configuration, of course. Would be another patch...", "timestamp": "2023-11-22 12:19:35.000000000"}, {"message": "Done", "timestamp": "2023-11-23 08:38:25.000000000"}]}
{"thread_id": "c73ac29e_cabf885f", "url": "https://gerrit.libreoffice.org/#/c/core/+/159778/2/sc/source/ui/view/gridwin4.cxx@1397", "comments": [{"message": "If it's not editMode (the user is not typing anything in the cell), update if the window is resized.", "timestamp": "2023-11-21 12:05:20.000000000"}]}
{"thread_id": "0e991865_ee2bf3d2", "url": "https://gerrit.libreoffice.org/#/c/core/+/159924/1/sd/source/ui/remotecontrol/Transmitter.cxx@51", "comments": [{"message": "if both queues are empty, the new code will try to send an empty message, whereas the old code would not send anything - is that what you intended?", "timestamp": "2023-11-24 11:50:32.000000000"}, {"message": "hmm ... can this actually happen? i'm thinking the mProcessingRequired should guarantee that either there is something in a queue or mFinishRequested is set?", "timestamp": "2023-11-24 11:58:32.000000000"}, {"message": "true", "timestamp": "2023-11-24 17:45:34.000000000"}]}
{"thread_id": "96c22967_98302622", "url": "https://gerrit.libreoffice.org/#/c/core/+/158680/12/sc/source/ui/view/gridwin.cxx@6716", "comments": [{"message": "This object is only used below in 'else if' section. It may make sense to use C++17 syntax here, where the init statement is put directly into the if:\n\n        else if (rtl::Reference<sdr::overlay::OverlayManager> xOverlayManager = getOverlayManager())\n            ...\n\nwhile makes it local to where it's used, and also getOverlayManager method not run when it's not needed.", "timestamp": "2023-11-11 17:33:52.000000000"}, {"message": "Done", "timestamp": "2023-11-11 19:37:48.000000000"}]}
{"thread_id": "cbf80b0b_67afed7d", "url": "https://gerrit.libreoffice.org/#/c/core/+/158680/13/sc/source/ui/view/gridwin.cxx@6710", "comments": [{"message": "Is it needed here? From what I see, it is selection related.", "timestamp": "2023-11-11 19:37:48.000000000"}, {"message": "No it is not needed. LOK doesn't need the row/column highlight - if needed, that would be implemented on client side, based on selection.", "timestamp": "2023-11-15 17:47:20.000000000"}, {"message": "Done", "timestamp": "2023-11-17 16:35:30.000000000"}]}
{"thread_id": "057c3f0e_99011598", "url": "https://gerrit.libreoffice.org/#/c/core/+/158680/11/sc/source/ui/view/gridwin4.cxx@2354", "comments": [{"message": "Also here, the only change is an extra space. Please remove it.", "timestamp": "2023-11-08 08:07:04.000000000"}, {"message": "Done", "timestamp": "2023-11-08 15:00:32.000000000"}]}
{"thread_id": "47d61c34_2228bdaf", "url": "https://gerrit.libreoffice.org/#/c/core/+/158680/8/sc/source/ui/view/tabview2.cxx@518", "comments": [{"message": "Jenkins will not be happy with unused parameters.", "timestamp": "2023-11-07 15:43:46.000000000"}, {"message": "Done", "timestamp": "2023-11-08 00:14:34.000000000"}]}
{"thread_id": "b5c713b3_1e9fa345", "url": "https://gerrit.libreoffice.org/#/c/core/+/158680/10/sc/source/ui/view/tabview3.cxx@1690", "comments": [{"message": "Please keep the spaces as they were, and avoid white-space only changes.", "timestamp": "2023-11-07 19:42:42.000000000"}, {"message": "Done", "timestamp": "2023-11-08 00:14:34.000000000"}]}
{"thread_id": "b386daae_db65b99f", "url": "https://gerrit.libreoffice.org/#/c/core/+/158680/10/sc/source/ui/view/tabview3.cxx@1697", "comments": [{"message": "Also here.", "timestamp": "2023-11-07 19:42:42.000000000"}, {"message": "Done", "timestamp": "2023-11-08 00:14:34.000000000"}]}
{"thread_id": "29804f63_d45119b9", "url": "https://gerrit.libreoffice.org/#/c/core/+/158680/12/sc/source/ui/view/tabview3.cxx@1690", "comments": [{"message": "Why the argument is passed by non-const reference?", "timestamp": "2023-11-11 17:33:52.000000000"}, {"message": "Noted it down.\n* If passing only for reference, then pass by const reference.", "timestamp": "2023-11-11 19:37:48.000000000"}]}
{"thread_id": "87d54339_9f33ea72", "url": "https://gerrit.libreoffice.org/#/c/core/+/158680/15/sc/source/ui/view/tabview3.cxx@377", "comments": [{"message": "No need to move this here. Instead, only create a local variable inside the if(), used only when you intend to return. And keep old line 391 intact.", "timestamp": "2023-11-15 10:43:03.000000000"}, {"message": "Done", "timestamp": "2023-11-15 17:43:15.000000000"}]}
{"thread_id": "fc6d941b_aefa96ad", "url": "https://gerrit.libreoffice.org/#/c/core/+/158680/16/sc/source/ui/view/tabview3.cxx@399", "comments": [{"message": "These two lines now do the same twice? ;)", "timestamp": "2023-11-15 14:33:57.000000000"}, {"message": "Forgot to remove the one below. Actually this time I used git's interactive rebase instead of cherry-picking again and again :D , And hence it slipped. I found I had to use `git diff hash1 hash2` again and again. Therefore went out looking for some tool like magit of emacs or.. which can help.", "timestamp": "2023-11-15 17:43:15.000000000"}]}
{"thread_id": "1790b6f5_e8e016b3", "url": "https://gerrit.libreoffice.org/#/c/core/+/154931/1/cui/source/dialogs/hltpbase.cxx@466", "comments": [{"message": "A possible TODO/LATER would be to check if the clipboard can contain more useful data here, while its string could be useless. See the SotClipboardFormatId definition at https://opengrok.libreoffice.org/xref/core/include/sot/formats.hxx?r=814e1da4#27 ; I definitely know that e.g. SIMPLE_FILE is an interesting item - but I don't know if it's possible that the clipboard offers that, but not STRING.", "timestamp": "2023-07-26 08:51:46.000000000"}, {"message": "Ack", "timestamp": "2023-07-26 09:08:36.000000000"}]}
{"thread_id": "7001c004_6647cde1", "url": "https://gerrit.libreoffice.org/#/c/core/+/154931/1/cui/source/dialogs/hltpbase.cxx@472", "comments": [{"message": "Hi Mike! Is there a better way to parse a text possible containing an URL?", "timestamp": "2023-07-26 08:35:42.000000000"}, {"message": "You use a correct way. Another could be URLTransformer::parseStrict.\n\nHowever, I wanted to suggest you to use a more concise syntax in the added code: instead of explicit \"type foo = bar(); if (foo.is())\" use these facts:\n\n1. Reference has its own operator bool(), and so \".is()\" is redundant now;\n2. GetSystemClipboard and XClipboard::getContents return a reference with correct type already;\n3. There is an optional initializer in modern C++ if statement.\n\nThese three allow to replace this:\n\n            css::uno::Reference<css::datatransfer::clipboard::XClipboard> xClipboard\n                = GetSystemClipboard();\n            if (xClipboard.is())\n\nwith this:\n\n            if (auto xClipboard = GetSystemClipboard())\n\nand also replace this:\n\n                css::uno::Reference<css::datatransfer::XTransferable> xTransferable\n                    = xClipboard->getContents();\n                if (xTransferable.is())\n\nwith this:\n\n                if (auto xTransferable = xClipboard->getContents())\n\n===\n\nAnother point: possibly it looks redundant, since failed operator >>= would keep the string empty; but I'd still check if it succeeded:\n\n                        if (xTransferable->getTransferData(aFlavor) >>= aClipBoardConentent)\n                        {\n                            ...", "timestamp": "2023-07-26 08:47:58.000000000"}, {"message": "Ack, thanks!", "timestamp": "2023-07-26 09:08:36.000000000"}]}
{"thread_id": "61afd412_65b9bcb9", "url": "https://gerrit.libreoffice.org/#/c/core/+/154931/3/cui/source/dialogs/hltpbase.cxx@486", "comments": [{"message": "I am unsure if this should receive this clipboard value here. The only use of this field is in a derived class' SvxHyperlinkNewDocTp::DoApply, where it *only* applies when the box is empty. But when it's empty, it means it should stay *unchanged* from what already was in the document - and in this case, it should be also empty.\n\nSo I suggest to move this line up, *above* the 'if (aStrURL.isEmpty())', so that the maStrInitURL really keeps the \"initial\" (= from create-itemset, as per the comment) data.", "timestamp": "2023-07-26 10:44:17.000000000"}, {"message": "Ack", "timestamp": "2023-07-26 11:49:41.000000000"}]}
{"thread_id": "70a09b3b_5b4a2dcf", "url": "https://gerrit.libreoffice.org/#/c/core/+/159700/3/svl/source/svdde/ddesvr.cxx@395", "comments": [{"message": "This must had been\n\n        std::erase(*pInst->pServicesSvr, this);", "timestamp": "2023-11-23 08:12:21.000000000"}, {"message": "Oups, first I was on Linux and was trying to find the right way then I tried on my Windows laptop and I had missed the ./-> mistake.\n\nHere's a new patch:\nhttps://gerrit.libreoffice.org/c/core/+/159849\n\nThank you!", "timestamp": "2023-11-23 09:24:45.000000000"}]}
{"thread_id": "7dcbcde9_416ef0db", "url": "https://gerrit.libreoffice.org/#/c/core/+/156634/1/xmloff/source/draw/ximpshap.cxx@1630", "comments": [{"message": "Same here: 'pres object' is 'presentation object'. 'presentation' shapes are the placeholders on the master slide.", "timestamp": "2023-09-07 11:02:31.000000000"}, {"message": "It's been fixed with https://cgit.freedesktop.org/libreoffice/core/commit/?id=a24b2c9ec7f57f2dafa92564860878e829967341", "timestamp": "2023-09-07 11:40:04.000000000"}]}
{"thread_id": "d65c836e_24170ed3", "url": "https://gerrit.libreoffice.org/#/c/core/+/156636/1/xmloff/source/draw/ximpshap.cxx@2162", "comments": [{"message": "I think, that 'pres shape' is used as abbreviation for 'presentation shape'.", "timestamp": "2023-09-07 11:03:01.000000000"}, {"message": "yes, I modified the initial patch.", "timestamp": "2023-09-07 11:41:13.000000000"}]}
{"thread_id": "ab6f303b_8fb21938", "url": "https://gerrit.libreoffice.org/#/c/core/+/159816/1/writerfilter/source/dmapper/DomainMapper.cxx@b1195", "comments": [{"message": "Could you describe in the commit message why this hunk is not needed anymore? I assume you understand the old use-case, the root cause of the crash and the new version pleases both, but this is not documented anywhere. :-)", "timestamp": "2023-11-22 12:58:02.000000000"}, {"message": "Done", "timestamp": "2023-11-23 07:27:12.000000000"}]}
{"thread_id": "6f060acc_82a62dc9", "url": "https://gerrit.libreoffice.org/#/c/core/+/159773/2/svx/source/dialog/charmap.cxx@541", "comments": [{"message": "Here, I would rearrange the snippets. First check for the charValue and afterwards initialize the points and the buffers.", "timestamp": "2023-11-21 13:50:09.000000000"}, {"message": "Done", "timestamp": "2023-11-21 16:15:42.000000000"}]}
{"thread_id": "86703518_0f2ef48e", "url": "https://gerrit.libreoffice.org/#/c/core/+/159773/2/svx/source/dialog/charmap.cxx@684", "comments": [{"message": "Snippet should be formatted using CTRL+K, CTRL+F, so it becomes ...(index)...", "timestamp": "2023-11-21 13:50:09.000000000"}, {"message": "Done", "timestamp": "2023-11-21 16:15:42.000000000"}]}
{"thread_id": "5af733ac_ab18a8a6", "url": "https://gerrit.libreoffice.org/#/c/core/+/159773/5/svx/source/dialog/charmap.cxx@546", "comments": [{"message": "You may even omit the StringBuffer by using OUString aCharStr(&nChar, 1) and I would put it before Point pix = MapIndexToPixel(i); so it won't be initialized.", "timestamp": "2023-11-21 21:01:32.000000000"}, {"message": "Done", "timestamp": "2023-11-21 22:19:15.000000000"}]}
{"thread_id": "9103744a_5663c8af", "url": "https://gerrit.libreoffice.org/#/c/core/+/159282/3/vcl/source/control/wizardmachine.cxx@318", "comments": [{"message": "can we do that using a method like it is done in Dialog class? \nhttps://opengrok.libreoffice.org/xref/core/vcl/source/window/dialog.cxx?r=63d676e7#1456\n\nlike: void add_button(PushButton* pButton, int response)\n\nthen in case we will need to add other buttons - it will be ready.\nIt will also not expose implementation details outside struct/class.", "timestamp": "2023-11-21 18:23:59.000000000"}]}
{"thread_id": "c928c294_b062f394", "url": "https://gerrit.libreoffice.org/#/c/core/+/159685/5/svl/source/items/itempool.cxx@1093", "comments": [{"message": "should we not assert or SAL_WARN or something here? Seems problematic to just ignore stuff which is out of range? Or perhaps we were always doing this, in which case, ignore me :-)", "timestamp": "2023-11-21 13:06:05.000000000"}, {"message": "No, was just the difference in tryToRegister/doRegister that the latter did not yet check to be on the correct pool -> was not needed due to being called from the 1st. No new cases with out of pool range possible AFAIK.\nNOTE: I have ideas to overhaul the pools to no longer need that chained state -> no iterating to get to the right pool when that would be done ...", "timestamp": "2023-11-21 15:08:40.000000000"}]}
{"thread_id": "0a1d816c_8db99639", "url": "https://gerrit.libreoffice.org/#/c/core/+/155316/6/include/svl/itemset.hxx@43", "comments": [{"message": "this should likely be moved down next to the m_nCount field, so we pack the fields nice and tight", "timestamp": "2023-08-05 16:16:09.000000000"}, {"message": "I know and I did not like that either. Problem is that in some SfxItemSet::SfxItemSet it would be needed to call svl::detail::CountRanges *twice* so I decided to not do that. The order of initialization just bites here :-(\nWhat I can do is move m_nCount up to get a better pack of the sal_uInt16 members.", "timestamp": "2023-08-06 11:40:05.000000000"}]}
{"thread_id": "0065ecd5_b32373ed", "url": "https://gerrit.libreoffice.org/#/c/core/+/155316/6/svl/source/items/itemiter.cxx@79", "comments": [{"message": "Calling GetWhichByOffset here will be slower than the existing code", "timestamp": "2023-08-05 16:16:09.000000000"}, {"message": "The used stuff before\n        sal_uInt16 nWhich = (*(m_rSet.m_ppItems + m_nCurrent))->Which();\nwas unsafe. A calculated ptr is accessed that may *not* point to an Item at all. The SfxItemIter excludes nullptr when iterating, but not states like IsInvalidItem where that ptr is INVALID_POOL_ITEM and thus reinterpret_cast<SfxPoolItem*>(-1) and also state IsVoidItem() which marks SfxItemState::DISABLED and is not wanted when iterating set Items.\nI wonder that this did not yet lead to other problems - maybe it did, esp. the possible access to (-1)->Which()...?", "timestamp": "2023-08-06 11:40:05.000000000"}]}
{"thread_id": "f881ac84_ec3d9b3f", "url": "https://gerrit.libreoffice.org/#/c/core/+/155316/6/svl/source/items/itemset.cxx@100", "comments": [{"message": "we can copy m_nTotalCount here from rASet", "timestamp": "2023-08-05 16:16:09.000000000"}, {"message": "True, thanks. Did that.", "timestamp": "2023-08-06 11:40:05.000000000"}]}
{"thread_id": "c3943158_aea5c4b4", "url": "https://gerrit.libreoffice.org/#/c/core/+/155316/6/svl/source/items/itemset.cxx@326", "comments": [{"message": "vaule->value", "timestamp": "2023-08-05 16:16:09.000000000"}, {"message": "corrected typo", "timestamp": "2023-08-06 11:40:05.000000000"}]}
{"thread_id": "b5a20978_3f06772a", "url": "https://gerrit.libreoffice.org/#/c/core/+/155675/1/svl/source/items/itemset.cxx@200", "comments": [{"message": "noting -> nothing", "timestamp": "2023-08-15 10:17:01.000000000"}, {"message": "done", "timestamp": "2023-08-15 12:55:18.000000000"}]}
{"thread_id": "17fcee1a_ef71a396", "url": "https://gerrit.libreoffice.org/#/c/core/+/158076/9/vcl/source/text/textlayout.cxx@33", "comments": [{"message": "Could also put it into anonymous namespace and make it non-static.", "timestamp": "2023-11-19 01:22:19.000000000"}, {"message": "Does that have any benefits?", "timestamp": "2023-11-20 06:42:44.000000000"}]}
{"thread_id": "8be6b34e_7c73c67f", "url": "https://gerrit.libreoffice.org/#/c/core/+/159315/5/basic/qa/cppunit/test_vba.cxx@b50", "comments": [{"message": "This comment was fine as it was.", "timestamp": "2023-11-16 22:51:48.000000000"}, {"message": "Done", "timestamp": "2023-11-17 17:36:11.000000000"}]}
{"thread_id": "15c951dd_8e9c5b9c", "url": "https://gerrit.libreoffice.org/#/c/core/+/159315/4/include/svl/zforlist.hxx@356", "comments": [{"message": "I suggest to only use `locales` here. This isn't about languages at all.", "timestamp": "2023-11-13 20:05:09.000000000"}, {"message": "Done", "timestamp": "2023-11-16 22:51:48.000000000"}]}
{"thread_id": "3dbf984a_37b46274", "url": "https://gerrit.libreoffice.org/#/c/core/+/159566/1/msicreator/createmsi.py@42", "comments": [{"message": "A bit more pythonic, not needing explicit close:\n\n    with open(jsonfile, 'rb') as f:", "timestamp": "2023-11-17 14:16:02.000000000"}, {"message": "Thank you for the feedback Mike!\nDone now", "timestamp": "2023-11-17 14:25:03.000000000"}]}
{"thread_id": "068dcf5d_aa67968a", "url": "https://gerrit.libreoffice.org/#/c/core/+/91385/3/dbaccess/source/core/dataaccess/ModelImpl.cxx@1340", "comments": [{"message": "This is modelled after SfxObjectShell_Impl::hasTrustedScriptingSignature; but the logic is not kept: in SfxObjectShell_Impl::hasTrustedScriptingSignature, the UI would only be shown when m_nScriptingSignatureState == SignatureState::OK || m_nScriptingSignatureState == SignatureState::NOTVALIDATED; here it would also show when the state is anything else, like BROKEN or INVALID.", "timestamp": "2023-11-07 11:51:00.000000000"}, {"message": "Ack", "timestamp": "2023-11-16 10:20:25.000000000"}]}
{"thread_id": "023f58df_03bc0438", "url": "https://gerrit.libreoffice.org/#/c/core/+/109552/2/sfx2/source/doc/docmacromode.cxx@249", "comments": [{"message": "What is the reason behind this? All the macro security is around *macro* location / signature, not about document signature. There is a security level; there is the MacroExecutionMode in MediaDescriptor. There is interaction asking user to allow macros (potentially already shown above; or if needed, shown below). This decision just creates tdf#158090, which is \"It doesn't do what I tell it\".", "timestamp": "2023-11-07 10:51:01.000000000"}, {"message": "The idea was basically that document events (which are part of the document) should be treated the same as macros.\nUsers who sign a macro might be not aware that the document might contain macro parts (document events) which impose a similar danger.", "timestamp": "2023-11-16 07:14:18.000000000"}]}
{"thread_id": "4dae24e0_0837d56b", "url": "https://gerrit.libreoffice.org/#/c/core/+/159022/1/editeng/source/misc/urlfieldhelper.cxx@42", "comments": [{"message": "This function is primarily called by menus - so this is the one place where the mouse potentially came into play. Of course, the mouse click ought to have put the selection before or after the field, and so GetFieldAtSelection(true) probably could be substituted here, but I'm not willing to risk that for no good reason.", "timestamp": "2023-11-07 02:13:30.000000000"}]}
{"thread_id": "d1b4034b_6c3ee39e", "url": "https://gerrit.libreoffice.org/#/c/core/+/159022/1/sc/source/ui/view/editsh.cxx@887", "comments": [{"message": "I probably don't even need to use it here, because this is only called by GetLink and SetLink. But this is an oddball usage, so I'll afraid to make any changes to it.\n\nBut likely this only works if the selection is properly made, so it probably could be replaced with GetFieldAtSelection(false) too.", "timestamp": "2023-11-07 02:13:30.000000000"}]}
{"thread_id": "2c379259_b87fcf79", "url": "https://gerrit.libreoffice.org/#/c/core/+/159018/1/editeng/source/misc/urlfieldhelper.cxx@19", "comments": [{"message": "Because SelectField... already selected the field, we don't need to AlsoCheckBeforeCursor this time.", "timestamp": "2023-11-07 02:02:14.000000000"}]}
{"thread_id": "241faa19_32f6a370", "url": "https://gerrit.libreoffice.org/#/c/core/+/159018/1/sd/source/ui/view/drviews2.cxx@b1211", "comments": [{"message": "This was redundant, since RemoveURLField also does it.", "timestamp": "2023-11-07 02:02:14.000000000"}]}
{"thread_id": "ae4bdecc_46cf7fe5", "url": "https://gerrit.libreoffice.org/#/c/core/+/159016/1/sc/source/ui/view/editsh.cxx@b640", "comments": [{"message": "GetURLField is just a wrapper for GetFieldAtCursor, so it can get the same substitution.", "timestamp": "2023-11-07 01:59:22.000000000"}]}
{"thread_id": "7a958470_bcf363ec", "url": "https://gerrit.libreoffice.org/#/c/core/+/158856/3/include/editeng/editview.hxx@336", "comments": [{"message": "This function is mis-named. I rename it in a follow-up commit.", "timestamp": "2023-11-07 01:50:28.000000000"}]}
{"thread_id": "f56bbf01_110cf775", "url": "https://gerrit.libreoffice.org/#/c/core/+/158855/2/editeng/source/editeng/editview.cxx@1347", "comments": [{"message": "This function is used all the time in the following patches..., so it makes sense to fully define it right away here even though it isn't used yet.", "timestamp": "2023-11-07 02:51:05.000000000"}]}
{"thread_id": "f0a7fca5_579ed47c", "url": "https://gerrit.libreoffice.org/#/c/core/+/151879/3/vcl/source/window/window.cxx@2423", "comments": [{"message": "I believe this is the source of the CppunitTest_toolkit_a11y failures. ImplCallResize() is called with a different Window here that it was originally called from within that maResizeIdle handler. I'll just revert for now", "timestamp": "2023-05-21 16:18:27.000000000"}, {"message": "Weird.\n\nI can't see how that is possible since there is one-one-one relationship between vcl::Window->ImpFrameData->maResizeIdle\n\nBut no worries.", "timestamp": "2023-05-21 16:44:33.000000000"}, {"message": "Oh never mind, I see now that ImplFrameData is some kind of meta-info over vcl::Window and the association is complicated.", "timestamp": "2023-05-21 16:52:59.000000000"}]}
{"thread_id": "bc2a52a0_de0d0d1f", "url": "https://gerrit.libreoffice.org/#/c/core/+/159430/1/sw/source/uibase/shells/textsh.cxx@533", "comments": [{"message": "It's possible that coverity may start to warn about copying variables by value larger than some size, usualling using/adding GetInputItemSet to pDlg would solve it. Maybe in this case that wouldn't work. Won't worry about it unless it arises.", "timestamp": "2023-11-15 08:52:51.000000000"}]}
{"thread_id": "1cfff44a_46d4b921", "url": "https://gerrit.libreoffice.org/#/c/core/+/159291/1/vcl/unx/gtk4/a11y.cxx@318", "comments": [{"message": "Is that due to the compile error w/ my comment above?\nPersonally, I'm wondering whether passing a `string_view` instead of a `const OUString&`, then constructing a local string object is really an improvement, also performance-wise. If the plugin really demands that, I'd ask/CC sberg and noelgrandin here", "timestamp": "2023-11-10 11:00:28.000000000"}, {"message": "there is not need to construct a local string object here, we can use o3tl::toInt32 on the string_view", "timestamp": "2023-11-10 11:38:38.000000000"}, {"message": "Thank you! Done now.", "timestamp": "2023-11-10 13:52:38.000000000"}]}
{"thread_id": "651365e4_05aa821a", "url": "https://gerrit.libreoffice.org/#/c/core/+/159360/1/include/systools/curlinit.hxx@53", "comments": [{"message": "this should be HTTPS, not HTTP", "timestamp": "2023-11-13 10:24:18.000000000"}, {"message": "Done", "timestamp": "2023-11-13 10:26:02.000000000"}]}
{"thread_id": "98c7825c_00608cf8", "url": "https://gerrit.libreoffice.org/#/c/core/+/159369/1/vcl/win/gdi/salprn.cxx@1392", "comments": [{"message": "Interesting, if the solar mutex is guaranteed to be held here?", "timestamp": "2023-11-13 11:19:42.000000000"}, {"message": "Yes, because the stacktrace in the linked bug is running through vcl::solarthread::detail::GenericSolarThreadExecutor", "timestamp": "2023-11-13 12:19:42.000000000"}]}
{"thread_id": "bfc65db6_aaef4a13", "url": "https://gerrit.libreoffice.org/#/c/core/+/159090/4/sw/source/filter/ww8/ww8par2.cxx@3621", "comments": [{"message": "Please add a new log area `sw.sprmreader` in `include/sal/log-areas.dox` after removing `DEBUGSPRMREADER` and use it instead of `sw.ww8`.", "timestamp": "2023-11-11 11:15:06.000000000"}, {"message": "Done", "timestamp": "2023-11-12 07:30:27.000000000"}]}
{"thread_id": "50d3f325_61cd598a", "url": "https://gerrit.libreoffice.org/#/c/core/+/159090/4/sw/source/filter/ww8/ww8scan.cxx@2844", "comments": [{"message": "Also use use ` sw.sprmreader` instead of `sw.ww8` here.", "timestamp": "2023-11-11 11:15:06.000000000"}, {"message": "Done", "timestamp": "2023-11-13 10:17:00.000000000"}]}
{"thread_id": "718cea53_75711c79", "url": "https://gerrit.libreoffice.org/#/c/core/+/158839/12/sw/qa/extras/rtfimport/rtfimport.cxx@1739", "comments": [{"message": "Why not use CPPUNIT_ASSERT_EQUAL that is explicitly created to assert equality???\nThis breaks in VS 2022 building 64-bit version:\n\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): error C7692: 'bool Color::operator ==(const Color &) const': rewritten candidate function was excluded from overload resolution because a corresponding operator!= declared in the same scope\n  C:\\lo\\src\\core\\include\\vcl/vclenum.hxx(174): note: could be 'bool operator ==(const ItalicMatrix &,const ItalicMatrix &)'\n  C:\\lo\\src\\core\\include\\comphelper/errcode.hxx(249): note: or       'bool operator ==(ErrCode,const ErrCodeMsg &)'\n  C:\\lo\\src\\core\\include\\comphelper/errcode.hxx(247): note: or       'bool operator ==(const ErrCodeMsg &,ErrCode)'\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(536): note: or       'bool operator ==(const Selection &,const Selection &)'\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(473): note: or       'bool operator ==(const Range &,const Range &)'\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(365): note: or       'bool operator ==(const AbsoluteScreenPixelSize &,const AbsoluteScreenPixelSize &)'\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(361): note: or       'bool operator ==(const Size &,const Size &)'\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(231): note: or       'bool operator ==(const AbsoluteScreenPixelPoint &,const AbsoluteScreenPixelPoint &)'\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(227): note: or       'bool operator ==(const Point &,const Point &)'\n  C:\\lo\\src\\core\\include\\tools/color.hxx(256): note: or 'bool Color::operator ==(const Color &) const' [synthesized expression 'y == x']\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool Color::operator ==(const Color &) const': rewritten candidate function was excluded from overload resolution because a corresponding operator!= declared in the same scope\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(227): note: or 'bool operator ==(const Point &,const Point &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(231): note: or 'bool operator ==(const AbsoluteScreenPixelPoint &,const AbsoluteScreenPixelPoint &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(361): note: or 'bool operator ==(const Size &,const Size &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(365): note: or 'bool operator ==(const AbsoluteScreenPixelSize &,const AbsoluteScreenPixelSize &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(473): note: or 'bool operator ==(const Range &,const Range &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(536): note: or 'bool operator ==(const Selection &,const Selection &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\comphelper/errcode.hxx(247): note: or 'bool operator ==(const ErrCodeMsg &,ErrCode)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\comphelper/errcode.hxx(249): note: or 'bool operator ==(ErrCode,const ErrCodeMsg &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\vcl/vclenum.hxx(174): note: or 'bool operator ==(const ItalicMatrix &,const ItalicMatrix &)' [synthesized expression 'y == x']\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: or       'built-in C++ operator==(int, sal_uInt32)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: or       'built-in C++ operator==(int, sal_Int32)'\n  C:\\lo\\src\\core\\include\\svl/typedwhich.hxx(59): note: or       'bool operator ==(const TypedWhichId<T> &,sal_uInt16)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(const TypedWhichId<T> &,sal_uInt16)': could not deduce template argument for 'const TypedWhichId<T> &' from 'int'\n  C:\\lo\\src\\core\\include\\svl/typedwhich.hxx(51): note: or       'bool operator ==(sal_uInt16,const TypedWhichId<T> &)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(sal_uInt16,const TypedWhichId<T> &)': could not deduce template argument for 'const TypedWhichId<T> &' from 'Color'\n  C:\\lo\\src\\core\\include\\svl/typedwhich.hxx(43): note: or       'bool operator ==(const TypedWhichId<T> &,TypedWhichId<T>)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(const TypedWhichId<T> &,TypedWhichId<T>)': could not deduce template argument for 'const TypedWhichId<T> &' from 'int'\n  C:\\lo\\src\\core\\include\\vcl/vclptr.hxx(238): note: or       'bool operator ==(T *,const VclPtr<reference_type> &)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(T *,const VclPtr<reference_type> &)': could not deduce template argument for 'T *' from 'int'\n  C:\\lo\\src\\core\\include\\vcl/vclptr.hxx(233): note: or       'bool operator ==(const T *,const VclPtr<reference_type> &)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(const T *,const VclPtr<reference_type> &)': could not deduce template argument for 'const T *' from 'int'\n  C:\\lo\\src\\core\\include\\vcl/vclptr.hxx(229): note: or       'bool operator ==(const VclPtr<reference_type> &,T *)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(const VclPtr<reference_type> &,T *)': could not deduce template argument for 'const VclPtr<reference_type> &' from 'int'\n  C:\\lo\\src\\core\\include\\vcl/vclptr.hxx(224): note: or       'bool operator ==(const VclPtr<reference_type> &,const T *)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(const VclPtr<reference_type> &,const T *)': could not deduce template argument for 'const VclPtr<reference_type> &' from 'int'\n  C:\\lo\\src\\core\\include\\vcl/vclptr.hxx(220): note: or       'bool operator ==(const VclPtr<reference_type> &,const VclPtr<T2> &)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(const VclPtr<reference_type> &,const VclPtr<T2> &)': could not deduce template argument for 'const VclPtr<reference_type> &' from 'int'\n  C:\\lo\\src\\core\\include\\vcl/vclptr.hxx(220): note: or 'bool operator ==(const VclPtr<reference_type> &,const VclPtr<T2> &)' [synthesized expression 'y == x']\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(const VclPtr<reference_type> &,const VclPtr<T2> &)': could not deduce template argument for 'const VclPtr<reference_type> &' from 'Color'\n  C:\\lo\\src\\core\\include\\vcl/vclptr.hxx(224): note: or 'bool operator ==(const VclPtr<reference_type> &,const T *)' [synthesized expression 'y == x']\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(const VclPtr<reference_type> &,const T *)': could not deduce template argument for 'const VclPtr<reference_type> &' from 'Color'\n  C:\\lo\\src\\core\\include\\vcl/vclptr.hxx(229): note: or 'bool operator ==(const VclPtr<reference_type> &,T *)' [synthesized expression 'y == x']\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(const VclPtr<reference_type> &,T *)': could not deduce template argument for 'const VclPtr<reference_type> &' from 'Color'\n  C:\\lo\\src\\core\\include\\vcl/vclptr.hxx(233): note: or 'bool operator ==(const T *,const VclPtr<reference_type> &)' [synthesized expression 'y == x']\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(const T *,const VclPtr<reference_type> &)': could not deduce template argument for 'const T *' from 'Color'\n  C:\\lo\\src\\core\\include\\vcl/vclptr.hxx(238): note: or 'bool operator ==(T *,const VclPtr<reference_type> &)' [synthesized expression 'y == x']\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(T *,const VclPtr<reference_type> &)': could not deduce template argument for 'T *' from 'Color'\n  C:\\lo\\src\\core\\include\\svl/typedwhich.hxx(43): note: or 'bool operator ==(const TypedWhichId<T> &,TypedWhichId<T>)' [synthesized expression 'y == x']\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(const TypedWhichId<T> &,TypedWhichId<T>)': could not deduce template argument for 'const TypedWhichId<T> &' from 'Color'\n  C:\\lo\\src\\core\\include\\svl/typedwhich.hxx(51): note: or 'bool operator ==(sal_uInt16,const TypedWhichId<T> &)' [synthesized expression 'y == x']\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(sal_uInt16,const TypedWhichId<T> &)': could not deduce template argument for 'const TypedWhichId<T> &' from 'int'\n  C:\\lo\\src\\core\\include\\svl/typedwhich.hxx(59): note: or 'bool operator ==(const TypedWhichId<T> &,sal_uInt16)' [synthesized expression 'y == x']\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: 'bool operator ==(const TypedWhichId<T> &,sal_uInt16)': could not deduce template argument for 'const TypedWhichId<T> &' from 'Color'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1739): note: while trying to match the argument list '(int, Color)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1750): error C7692: 'bool Color::operator ==(const Color &) const': rewritten candidate function was excluded from overload resolution because a corresponding operator!= declared in the same scope\n  C:\\lo\\src\\core\\include\\vcl/vclenum.hxx(174): note: could be 'bool operator ==(const ItalicMatrix &,const ItalicMatrix &)'\n  C:\\lo\\src\\core\\include\\comphelper/errcode.hxx(249): note: or       'bool operator ==(ErrCode,const ErrCodeMsg &)'\n  C:\\lo\\src\\core\\include\\comphelper/errcode.hxx(247): note: or       'bool operator ==(const ErrCodeMsg &,ErrCode)'\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(536): note: or       'bool operator ==(const Selection &,const Selection &)'\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(473): note: or       'bool operator ==(const Range &,const Range &)'\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(365): note: or       'bool operator ==(const AbsoluteScreenPixelSize &,const AbsoluteScreenPixelSize &)'\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(361): note: or       'bool operator ==(const Size &,const Size &)'\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(231): note: or       'bool operator ==(const AbsoluteScreenPixelPoint &,const AbsoluteScreenPixelPoint &)'\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(227): note: or       'bool operator ==(const Point &,const Point &)'\n  C:\\lo\\src\\core\\include\\tools/color.hxx(256): note: or 'bool Color::operator ==(const Color &) const' [synthesized expression 'y == x']\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1750): note: 'bool Color::operator ==(const Color &) const': rewritten candidate function was excluded from overload resolution because a corresponding operator!= declared in the same scope\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(227): note: or 'bool operator ==(const Point &,const Point &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(231): note: or 'bool operator ==(const AbsoluteScreenPixelPoint &,const AbsoluteScreenPixelPoint &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(361): note: or 'bool operator ==(const Size &,const Size &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(365): note: or 'bool operator ==(const AbsoluteScreenPixelSize &,const AbsoluteScreenPixelSize &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(473): note: or 'bool operator ==(const Range &,const Range &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\tools/gen.hxx(536): note: or 'bool operator ==(const Selection &,const Selection &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\comphelper/errcode.hxx(247): note: or 'bool operator ==(const ErrCodeMsg &,ErrCode)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\comphelper/errcode.hxx(249): note: or 'bool operator ==(ErrCode,const ErrCodeMsg &)' [synthesized expression 'y == x']\n  C:\\lo\\src\\core\\include\\vcl/vclenum.hxx(174): note: or 'bool operator ==(const ItalicMatrix &,const ItalicMatrix &)' [synthesized expression 'y == x']\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1750): note: or       'built-in C++ operator==(int, sal_uInt32)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1750): note: or       'built-in C++ operator==(int, sal_Int32)'\n  C:\\lo\\src\\core\\include\\svl/typedwhich.hxx(59): note: or       'bool operator ==(const TypedWhichId<T> &,sal_uInt16)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1750): note: 'bool operator ==(const TypedWhichId<T> &,sal_uInt16)': could not deduce template argument for 'const TypedWhichId<T> &' from 'int'\n  C:\\lo\\src\\core\\include\\svl/typedwhich.hxx(51): note: or       'bool operator ==(sal_uInt16,const TypedWhichId<T> &)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1750): note: 'bool operator ==(sal_uInt16,const TypedWhichId<T> &)': could not deduce template argument for 'const TypedWhichId<T> &' from 'Color'\n  C:\\lo\\src\\core\\include\\svl/typedwhich.hxx(43): note: or       'bool operator ==(const TypedWhichId<T> &,TypedWhichId<T>)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1750): note: 'bool operator ==(const TypedWhichId<T> &,TypedWhichId<T>)': could not deduce template argument for 'const TypedWhichId<T> &' from 'int'\n  C:\\lo\\src\\core\\include\\vcl/vclptr.hxx(238): note: or       'bool operator ==(T *,const VclPtr<reference_type> &)'\n  C:/lo/src/core/sw/qa/extras/rtfimport/rtfimport.cxx(1750): note: 'bool operator ==(T *,const VclPtr<reference_type> &)': could not deduce template argument for 'T *' from 'int'\n  ...", "timestamp": "2023-11-11 08:59:09.000000000"}, {"message": "Handled in https://gerrit.libreoffice.org/c/core/+/159316", "timestamp": "2023-11-11 09:09:22.000000000"}]}
{"thread_id": "1bb4c35e_c30685a5", "url": "https://gerrit.libreoffice.org/#/c/core/+/155274/1/sw/source/core/txtnode/ndtxt.cxx@3859", "comments": [{"message": "This is a static value, so it should be saved as a const sal_Int32 nInsLen before \"if nLen ....\" - so that the length doesn't need to be re-computed every time.\n\nYou could probably simplify the visual reading of this with a for i = 0 to nInsLen counter accessing const OUString sReplaceChar(sInserted[i]) instead of using a subView.\n\nI personally prefer nInsRemaining (since InsLeft sounds directional, and would visually conflict with my proposed nInsLen).", "timestamp": "2023-08-03 16:02:13.000000000"}, {"message": "a clang plugin will probably tell you to use std::u16string_view instead of my suggested OUString... man I hate std::u16string_view.", "timestamp": "2023-08-03 21:15:23.000000000"}, {"message": "Builds fine for me.  Also changed the variables around as suggested.", "timestamp": "2023-08-09 01:33:54.000000000"}]}
{"thread_id": "81adc047_40003e26", "url": "https://gerrit.libreoffice.org/#/c/core/+/155274/1/sw/source/core/txtnode/ndtxt.cxx@3871", "comments": [{"message": "nit: make this a const", "timestamp": "2023-08-03 21:15:23.000000000"}, {"message": "Done", "timestamp": "2023-08-09 01:33:54.000000000"}]}
{"thread_id": "bb8edb90_4f66e5e9", "url": "https://gerrit.libreoffice.org/#/c/core/+/155274/2/sw/source/core/txtnode/ndtxt.cxx@3808", "comments": [{"message": "The 'const' here is wrong; the value is changed in the code, so this should be reflected in the API - please drop the 'const' while here.", "timestamp": "2023-08-09 11:23:45.000000000"}, {"message": "Or, since it's only changed to get the correct position for the Update call, you could use a local variable to calculate the position once (and there you may also use the offset constructor argument, to construct it in one step), and keep the const here (better IMO).", "timestamp": "2023-08-09 11:42:56.000000000"}, {"message": "Done", "timestamp": "2023-08-11 00:50:06.000000000"}]}
{"thread_id": "a38f5ed0_8ade37cb", "url": "https://gerrit.libreoffice.org/#/c/core/+/155274/2/sw/source/core/txtnode/ndtxt.cxx@3857", "comments": [{"message": "There seem to be no reason to do it one-by-one. Just count the common length, and replace it at once.\n\nIn fact, I believe that even the following replaces in the \"short insert\" and \"long insert\" parts are redundant: it should be replaces all at once; and only the signed difference of count of characters calculated beforehand, so that to know which branch to call next, where only the respective Update variant called.", "timestamp": "2023-08-09 11:23:45.000000000"}, {"message": "We can't do it all at once because some asserts fire when trying to do that.  Instead, we do as much as we can to begin, then handle the rest afterwards.", "timestamp": "2023-08-11 00:50:06.000000000"}, {"message": "Also, the branch cases are needed in order to trim short inserts and extend long inserts properly.", "timestamp": "2023-08-11 03:10:18.000000000"}, {"message": "Please, re-read my message, which indeed tells that we need branches, just not the string changes in them; and please show which asserts could fire. I claim it's not correct.", "timestamp": "2023-08-11 03:17:06.000000000"}, {"message": "Here is an example:  I uploaded the code that I'm testing in patchset 6.  When testing, I open soffice.exe, select Writer document, then type \"test? which\" which gets autocorrected to \"Test? which\" (using the replace code; so far no assert).  Then I make \"Test?\" italic.  Then I go to \"Edit\"->\"Find and Replace...\" and search for \"? w\" and replace it with \"? foo\".  Then I get the following assert:\n\n \tucrtbased.dll!_wassert(const wchar_t * expression, const wchar_t * file_name, unsigned int line_number) Line 444\tC++\tSymbols loaded.\n \tsal3.dll!rtl::str::newFromSubString<_rtl_uString>(_rtl_uString * * ppThis, const _rtl_uString * pFrom, long beginIndex, long count) Line 890\tC++\tSymbols loaded.\n \tsal3.dll!rtl_uString_newFromSubString(_rtl_uString * * ppThis, const _rtl_uString * pFrom, long beginIndex, long count) Line 1219\tC++\tSymbols loaded.\n \ti18npoollo.dll!rtl::OUString::copy(long beginIndex, long count) Line 2242\tC++\tSymbols loaded.\n \ti18npoollo.dll!i18npool::TransliterationImpl::transliterate(const rtl::OUString & inStr, long startPos, long nCount, com::sun::star::uno::Sequence<long> & offset) Line 340\tC++\tSymbols loaded.\n \ti18nsearchlo.dll!TextSearch::searchForward(const rtl::OUString & searchStr, long startPos, long endPos) Line 340\tC++\tSymbols loaded.\n \tutllo.dll!utl::TextSearch::SearchForward(const rtl::OUString & rStr, long * pStart, long * pEnd, com::sun::star::util::SearchResult * pRes) Line 202\tC++\tSymbols loaded.\n \tswlo.dll!DoSearch(SwPaM & rSearchPam, const i18nutil::SearchOptions2 & rSearchOpt, utl::TextSearch & rSText, const SwMoveFnCollection & fnMove, bool bSrchForward, bool bRegSearch, bool bChkEmptyPara, bool bChkParaEnd, `anonymous-namespace'::AmbiguousIndex & nStart, `anonymous-namespace'::AmbiguousIndex & nEnd, `anonymous-namespace'::AmbiguousIndex nTextLen, const SwTextNode * pNode, const SwTextFrame * pFrame, const SwRootFrame * pLayout, SwPaM * pPam) Line 815\tC++\tSymbols loaded.\n \tswlo.dll!sw::FindTextImpl(SwPaM & rSearchPam, const i18nutil::SearchOptions2 & rSearchOpt, bool bSearchInNotes, utl::TextSearch & rSText, const SwMoveFnCollection & fnMove, const SwPaM & rRegion, bool bInReadOnly, const SwRootFrame * pLayout, std::unique_ptr<SvxSearchItem,std::default_delete<SvxSearchItem>> & xSearchItem) Line 708\tC++\tSymbols loaded.\n \tswlo.dll!`anonymous namespace'::SwFindParaText::DoFind(SwPaM & rCursor, const SwMoveFnCollection & fnMove, const SwPaM & rRegion, bool bInReadOnly, std::unique_ptr<SvxSearchItem,std::default_delete<SvxSearchItem>> & xSearchItem) Line 949\tC++\tSymbols loaded.\n \tswlo.dll!lcl_FindSelection(SwFindParas & rParas, SwCursor * pCurrentCursor, const SwMoveFnCollection & fnMove, SwCursor * & pFndRing, SwPaM & aRegion, FindRanges eFndRngs, bool bInReadOnly, bool & bCancel) Line 803\tC++\tSymbols loaded.\n \tswlo.dll!SwCursor::FindAll(SwFindParas & rParas, SwDocPositions nStart, SwDocPositions nEnd, FindRanges eFndRngs, bool & bCancel) Line 1059\tC++\tSymbols loaded.\n \tswlo.dll!SwCursor::Find_Text(const i18nutil::SearchOptions2 & rSearchOpt, bool bSearchInNotes, SwDocPositions nStart, SwDocPositions nEnd, bool & bCancel, FindRanges eFndRngs, bool bReplace, const SwRootFrame * const pLayout) Line 1024\tC++\tSymbols loaded.\n \tswlo.dll!SwCursorShell::Find_Text(const i18nutil::SearchOptions2 & rSearchOpt, bool bSearchInNotes, SwDocPositions eStart, SwDocPositions eEnd, bool & bCancel, FindRanges eRng, bool bReplace) Line 3823\tC++\tSymbols loaded.\n \tswlo.dll!SwWrtShell::SearchPattern(const i18nutil::SearchOptions2 & rSearchOpt, bool bSearchInNotes, SwDocPositions eStt, SwDocPositions eEnd, FindRanges eFlags, bool bReplace) Line 229\tC++\tSymbols loaded.\n \tswlo.dll!SwView::FUNC_Search(const SwSearchOptions & rOptions) Line 820\tC++\tSymbols loaded.\n \tswlo.dll!SwView::ExecSearch(SfxRequest & rReq) Line 362\tC++\tSymbols loaded.\n \tswlo.dll!SfxStubSwViewExecSearch(SfxShell * pShell, SfxRequest & rReq) Line 14825\tC++\tSymbols loaded.\n \tsfxlo.dll!SfxDispatcher::Call_Impl(SfxShell & rShell, const SfxSlot & rSlot, SfxRequest & rReq, bool bRecord) Line 257\tC++\tSymbols loaded.", "timestamp": "2023-08-11 20:56:02.000000000"}, {"message": "Note that if you add the following line as the first line in the long insert branch it will not hit the assert, but the italic formatting is still extended:\n\nUpdate(rStart, nLen, UpdateMode::Negative);", "timestamp": "2023-08-11 23:14:00.000000000"}, {"message": "This issue is resolved with patchset 7.", "timestamp": "2023-08-12 02:10:04.000000000"}, {"message": "The failing tests are due to asserts.  Back to unresolved.", "timestamp": "2023-08-12 06:03:59.000000000"}, {"message": "This issue is fixed with patchset 9.", "timestamp": "2023-08-12 22:13:08.000000000"}]}
{"thread_id": "bf791bd9_78029f75", "url": "https://gerrit.libreoffice.org/#/c/core/+/155274/2/sw/source/core/txtnode/ndtxt.cxx@3868", "comments": [{"message": "Update is a virtual function intended to update hints (remove or extend). 'Hints' are the character attributes. Indeed, as the intention is to keep the attributes unchanged for some part (previously 1 character, here all the common-length characters), the hints for these need no update - hence no Update is called for them.\n\nBefore the change, it was highly likely that there will be both removal and insertion needed, so the unconditional execution of those parts was reasonable. Now, there may be one, or another, or none, but not both, so the change looks also reasonable.", "timestamp": "2023-08-09 11:23:45.000000000"}, {"message": "Done", "timestamp": "2023-08-11 00:50:06.000000000"}]}
{"thread_id": "f00fca80_b2bf3c4c", "url": "https://gerrit.libreoffice.org/#/c/core/+/155274/9/sw/source/core/txtnode/ndtxt.cxx@3853", "comments": [{"message": "This works mostly, but the test case testTdf131912 in /core/sw/qa/extras/uiwriter/uiwriter2.cxx (run with \"make CppunitTest_sw_uiwriter2\") fails in the following scenario:\n\nfind: foo\nregex replace: xyz\\\\n\\\\nquux\\\\n\n\nIn this case, it gets replaced but somehow the xyz ends up at the bottom.  However, in patchset 1, when looping, the replace succeeds with xyz at the top.  I tried looping here but for some reason patchset 1 works but patchset 9 fails.  I also tried doing an Update after the replace, which correctly puts xyz at the top, but instead fails with an assert pop-up.\n\nI'm open to suggestions for how to fix this.  Right now it looks like we should just accept a cleaned up patchset 1.", "timestamp": "2023-08-12 22:13:08.000000000"}, {"message": "Patchset 10 is also affected by this.", "timestamp": "2023-08-13 22:03:10.000000000"}, {"message": "Fixed in patchset 11.", "timestamp": "2023-11-09 21:11:18.000000000"}]}
{"thread_id": "dc566c53_176a97b9", "url": "https://gerrit.libreoffice.org/#/c/core/+/155274/9/sw/source/core/txtnode/ndtxt.cxx@3858", "comments": [{"message": "IIUC, in case of UpdateMode::Negative, the second argument here is expected to be *shortened length*. Compare to the old 'nLen - 1', which was \"old length of the replaced text minus one character that we replaced initially\".\n\nInstead, you pass a *position*, which is nInsLen characters before the nEndPos. I believe that the correct would be 'nLen - nInsLen' here.", "timestamp": "2023-08-13 09:02:11.000000000"}, {"message": "Yes, you are correct, thanks for catching this.  My testing failed to catch this, but plugging in some example numbers makes it clear.", "timestamp": "2023-08-13 21:59:45.000000000"}]}
{"thread_id": "eb936e8e_eb9a4ead", "url": "https://gerrit.libreoffice.org/#/c/core/+/155274/9/sw/source/core/txtnode/ndtxt.cxx@3862", "comments": [{"message": "Simply 'nInsLen - nLen'?", "timestamp": "2023-08-13 09:02:11.000000000"}, {"message": "Again correct.  These don't help resolve the other issue I have open still though, as these branches are not called in that case.", "timestamp": "2023-08-13 21:59:45.000000000"}]}
{"thread_id": "65be904a_79c1f47a", "url": "https://gerrit.libreoffice.org/#/c/core/+/155274/10/sw/source/core/txtnode/ndtxt.cxx@3808", "comments": [{"message": "The problem here is this pseudo-const thing. It was always a bad thing, and now it fires at you. It must be fixed, while you are here ;)\n\nPlease note how it was const-casted before, and changed. If you debug the testTdf131912 unit test, and put a breakpoint to the changed code when nLen == nInsLen, and then step out, you would see that the next thing that happens in DocumentContentOperationsManager::ReplaceRangeImpl is 'SplitNode( *pStt, false);'. And the 'pStt' is what was passed to 'ReplaceText', and which was \"unexpectedly expected\" to change.\n\nSo please change the function's signature to take the *non-const* reference to the rStart, and make sure you update it in the code.", "timestamp": "2023-08-14 08:36:19.000000000"}, {"message": "There is already a function signature of the same name without the const, so I just left it as is and incremented the index below.  Thank you for pointing out the overall problem.", "timestamp": "2023-11-09 21:11:18.000000000"}, {"message": "Done", "timestamp": "2023-11-10 18:05:11.000000000"}]}
{"thread_id": "dfc7b2b4_eac2b770", "url": "https://gerrit.libreoffice.org/#/c/core/+/155274/11/sw/source/core/txtnode/ndtxt.cxx@3871", "comments": [{"message": "I don't remember what the expectation is at the point where the function is called - but shouldn't we restore the original value of rStart before return? I'd try to have a guard, that takes a const reference, stores its initial value, then provides a non-const reference (so you don't have to const_cast manually), and restores the original value in dtor? Just to keep the conts ref semantics.", "timestamp": "2023-11-10 05:47:49.000000000"}, {"message": "The original code didn't restore the value, and apparently the increment is needed for things to work.", "timestamp": "2023-11-10 17:59:02.000000000"}, {"message": "Ah - thank you, and sorry - I needed to revive the topic before asking.", "timestamp": "2023-11-10 18:05:11.000000000"}]}
{"thread_id": "3d18e8df_9cc5ad5d", "url": "https://gerrit.libreoffice.org/#/c/core/+/158915/7/include/curlinit.hxx@40", "comments": [{"message": "Now it looks like a good place to centrally set user agent...", "timestamp": "2023-11-10 09:44:33.000000000"}]}
{"thread_id": "937bd7ff_2be66bd9", "url": "https://gerrit.libreoffice.org/#/c/core/+/158659/1/writerfilter/source/dmapper/DomainMapper.cxx@2482", "comments": [{"message": "this change looks unrelated?", "timestamp": "2023-11-01 17:55:22.000000000"}, {"message": "Done", "timestamp": "2023-11-09 15:15:10.000000000"}]}
{"thread_id": "00530935_643d2090", "url": "https://gerrit.libreoffice.org/#/c/core/+/158659/2/writerfilter/source/dmapper/DomainMapper.cxx@b2482", "comments": [{"message": "Still a gratuitous whitespace change :)", "timestamp": "2023-11-08 09:56:41.000000000"}, {"message": "Done", "timestamp": "2023-11-09 15:15:10.000000000"}]}
{"thread_id": "4abd3246_977a0159", "url": "https://gerrit.libreoffice.org/#/c/core/+/158184/2/sc/qa/uitest/calc_tests8/navigator.py@145", "comments": [{"message": "At <https://ci.libreoffice.org//job/lo_ubsan/2974/> this failed with\n\n  ======================================================================\n  FAIL: test_tdf134390 (navigator.navigator)\n  ----------------------------------------------------------------------\n  Traceback (most recent call last):\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/sc/qa/uitest/calc_tests8/navigator.py\", line 145, in test_tdf134390\n      self.assertEqual(get_state_as_dict(xColumn)['Value'], '2')\n  AssertionError: '1' != '2'\n  - 1\n  + 2\n\nand at <https://ci.libreoffice.org//job/lo_ubsan/2975/> this failed with\n\n  ======================================================================\n  FAIL: test_tdf134390 (navigator.navigator)\n  ----------------------------------------------------------------------\n  Traceback (most recent call last):\n    File \"/home/tdf/lode/jenkins/workspace/lo_ubsan/sc/qa/uitest/calc_tests8/navigator.py\", line 145, in test_tdf134390\n      self.assertEqual(get_state_as_dict(xColumn)['Value'], '2')\n  AssertionError: '53' != '2'\n  - 53\n  + 2", "timestamp": "2023-11-10 07:25:39.000000000"}, {"message": "<https://gerrit.libreoffice.org/c/core/+/159262> \"Disable flakey navigator UITest again\"", "timestamp": "2023-11-10 07:30:39.000000000"}]}
{"thread_id": "2fc318ac_31035251", "url": "https://gerrit.libreoffice.org/#/c/core/+/158184/2/sw/qa/uitest/navigator/tdf154521.py@158", "comments": [{"message": "<https://ci.libreoffice.org//job/lo_tb_master_linux_dbg/45650/> hung here (and got killed by kill-wrapper) with the python.bin process at\n\n  Thread 1 (Thread 0x7f85438bbb80 (LWP 217701) \"python3\"):\n  Traceback (most recent call first):\n    <built-in method sleep of module object at remote 0x7f854143b728>\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/uitest/uitest/test.py\", line 72, in wait_until_property_is_updated\n      time.sleep(DEFAULT_SLEEP)\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/sw/qa/uitest/navigator/tdf154521.py\", line 158, in test_query_selected_bookmark\n      self.ui_test.wait_until_property_is_updated(xContentTree, \"SelectEntryText\", \"Bookmark 2\")\n    File \"/usr/lib64/python3.6/unittest/case.py\", line 622, in run\n      testMethod()\n    File \"/usr/lib64/python3.6/unittest/case.py\", line 670, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib64/python3.6/unittest/suite.py\", line 122, in run\n      test(result)\n    File \"/usr/lib64/python3.6/unittest/suite.py\", line 84, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib64/python3.6/unittest/runner.py\", line 176, in run\n      test(result)\n    File \"/home/tdf/lode/jenkins/workspace/lo_tb_master_linux_dbg/uitest/test_main.py\", line 138, in <module>\n      result = unittest.TextTestRunner(stream=sys.stdout, verbosity=2).run(test_suite)\n\nand the soffice.bin process just idling with nothing going on", "timestamp": "2023-11-07 16:07:25.000000000"}, {"message": "<https://gerrit.libreoffice.org/c/core/+/159260> \"Disable flakey navigator UITest again\"", "timestamp": "2023-11-10 07:17:31.000000000"}]}
{"thread_id": "4fa52596_0a35076c", "url": "https://gerrit.libreoffice.org/#/c/core/+/159151/1/desktop/source/app/appinit.cxx@165", "comments": [{"message": "see <https://gerrit.libreoffice.org/c/core/+/159157> \"Move 'Acceptor already exists' warning to where it belongs\"", "timestamp": "2023-11-08 16:03:20.000000000"}, {"message": "Ack", "timestamp": "2023-11-08 16:32:54.000000000"}]}
{"thread_id": "d17e9903_040698d7", "url": "https://gerrit.libreoffice.org/#/c/core/+/159151/1/desktop/source/offacc/acceptor.cxx@249", "comments": [{"message": "I think it would look more natural to move this check out (e.g., to `Desktop::createAcceptor`), and make that outer code potentially report to the user (i.e., not just a `SAL_WARN`) why an `--accept` request was not honored, instead of silently ignoring it.", "timestamp": "2023-11-08 16:03:20.000000000"}, {"message": "i want to put the config check in the service itself, just in case tomorrow somebody adds another place that instantiates the service.\n\napparently the configuration is the only reason why the reference would be null here; if i try \"--accept=bnvbnvjbvbhiurgkjblkh;urp;\" what happens is that the Acceptor is created and prints a SAL_WARN \"\"Acceptor: unknown delegatee com.sun.star.connection.Acceptor.bnvbnvjbvbhiurgkjblkh\" in an infinite loop.", "timestamp": "2023-11-08 16:32:54.000000000"}]}
{"thread_id": "9ebaabaa_28886aae", "url": "https://gerrit.libreoffice.org/#/c/core/+/157477/6/dbaccess/source/ui/misc/UITools.cxx@931", "comments": [{"message": "Please also use `tools::Long` here.", "timestamp": "2023-10-24 23:43:47.000000000"}, {"message": "Done", "timestamp": "2023-10-25 03:43:58.000000000"}, {"message": "I don't see `tools::Long` in patch set 8 anymore. Is there a reason for that?", "timestamp": "2023-10-25 09:06:06.000000000"}, {"message": "Oh, I don't know why when I submitted other patch it automatically submitted this patch set 8. My change is in patch set 7. Should I resubmitted patch 7 again?", "timestamp": "2023-10-25 10:28:20.000000000"}, {"message": "Ok I resubmitted again. Sorry I don't know why I was not in this branch but this patch was submitted", "timestamp": "2023-10-25 10:37:23.000000000"}]}
{"thread_id": "f7aaac68_9f163e34", "url": "https://gerrit.libreoffice.org/#/c/core/+/157477/6/dbaccess/source/ui/misc/UITools.cxx@932", "comments": [{"message": "Then, you will not need `static_cast` here.", "timestamp": "2023-10-24 23:43:47.000000000"}, {"message": "Done", "timestamp": "2023-10-25 03:43:58.000000000"}, {"message": "Also here, again I see `static_cast` in patch set 8.", "timestamp": "2023-10-25 09:06:06.000000000"}, {"message": "Done", "timestamp": "2023-10-25 10:37:23.000000000"}]}
{"thread_id": "9b89e64c_e6769c22", "url": "https://gerrit.libreoffice.org/#/c/core/+/157477/3/svtools/source/brwbox/brwbox1.cxx@b275", "comments": [{"message": "Please use `tools::Long` here and elsewhere in the changed files instead of `sal_uInt64`.", "timestamp": "2023-10-05 08:40:28.000000000"}, {"message": "Done", "timestamp": "2023-10-08 22:16:58.000000000"}]}
{"thread_id": "32fa2472_ed476920", "url": "https://gerrit.libreoffice.org/#/c/core/+/157477/3/svtools/source/brwbox/brwbox1.cxx@b641", "comments": [{"message": "Use `tools::Long` in the patch, and you no longer need the cast here.", "timestamp": "2023-10-05 08:40:28.000000000"}, {"message": "Done", "timestamp": "2023-10-08 22:16:58.000000000"}]}
{"thread_id": "96894fb5_46864758", "url": "https://gerrit.libreoffice.org/#/c/core/+/157477/2/svtools/source/brwbox/datwin.hxx@68", "comments": [{"message": "Remove the one extra space you added", "timestamp": "2023-10-04 08:08:04.000000000"}, {"message": "Done", "timestamp": "2023-10-05 01:06:55.000000000"}]}
{"thread_id": "e5e7cea8_28625567", "url": "https://gerrit.libreoffice.org/#/c/core/+/157477/9/svtools/source/brwbox/editbrowsebox.cxx@69", "comments": [{"message": "Why do you add `static_cast`? The function is like this:\n\nhttps://opengrok.libreoffice.org/xref/core/svtools/source/brwbox/editbrowsebox.cxx?r=467085bf#1153\n sal_uInt32 EditBrowseBox::GetAutoColumnWidth(sal_uInt16 nColId)\n \nSo, the return type is already `sal_uInt32`.", "timestamp": "2023-10-25 13:21:39.000000000"}, {"message": "Oh this error message reminded me why I added it is because the error message on this build(same as patchset 4). Could you help me check if I could ignore it?", "timestamp": "2023-10-25 22:11:27.000000000"}, {"message": "Ah, sorry! The previous comment was partially incorrect. You should also change the type of `nAutoWidth` to `tools::Long`.", "timestamp": "2023-10-26 09:08:37.000000000"}, {"message": "Done", "timestamp": "2023-10-26 21:46:26.000000000"}]}
{"thread_id": "e7b37b71_d87b1d57", "url": "https://gerrit.libreoffice.org/#/c/core/+/153672/4/sw/source/core/text/itrpaint.cxx@170", "comments": [{"message": "I would have expected this to be TAB_OVER_SPACING instead. (when DOCX lost TAB_OVER_MARGIN it gained TAB_OVER_SPACING)", "timestamp": "2023-06-28 14:25:42.000000000"}, {"message": "Thank you! I will change to that.", "timestamp": "2023-06-28 14:55:13.000000000"}, {"message": "Done", "timestamp": "2023-11-09 05:52:42.000000000"}]}
{"thread_id": "3790d5cd_60dba967", "url": "https://gerrit.libreoffice.org/#/c/core/+/159106/1/setup_native/source/win32/customactions/shellextensions/upgrade.cxx@33", "comments": [{"message": "This is a different thing - the second argument is offset, not length.\n\nIt would be better to replace it all with\n\n        if (index == 0) return guid.substr(0, 8);\n        if (index == 1) return guid.substr(9, 4);\n        if (index == 2) return guid.substr(14, 4);\n        if (index == 3) return guid.substr(19, 4);\n        if (index == 4) return guid.substr(24, 12);", "timestamp": "2023-11-08 07:51:10.000000000"}, {"message": "Oh, thanks a lot for spotting this gotcha!  Broke that part out of this (rather mechanical) change to <https://gerrit.libreoffice.org/c/core/+/159114> \"loplugin:unnecessarygetstr (clang-cl)\".", "timestamp": "2023-11-08 08:32:54.000000000"}]}
{"thread_id": "63e48fd8_9150ca43", "url": "https://gerrit.libreoffice.org/#/c/core/+/159112/1/winaccessibility/source/service/AccContainerEventListener.cxx@441", "comments": [{"message": "Any idea whether this has become redundant now and should be dropped?  Smells like it was only originally there to protect from calling through a null pointer.", "timestamp": "2023-11-08 08:07:30.000000000"}, {"message": "Yes, that can indeed be dropped.\n\nRelated commits:\n\n```\ncommit f8854116e1c3bbe971dcb754f7db501d5302b651\nAuthor: Stephan Bergmann <sbergman@redhat.com>\nDate:   Fri Oct 14 16:43:38 2016 +0200\n\n    clang-cl loplugin: winaccessibility\n\n\ncommit 37b72ba4542ca8dc49d0121be995d9253c65d6ba\nAuthor: Michael Weghorn <m.weghorn@posteo.de>\nDate:   Mon Aug 7 21:43:23 2023 +0100\n\n    wina11y: Drop AccObjectManagerAgent indirection\n```", "timestamp": "2023-11-08 08:30:07.000000000"}, {"message": "<https://gerrit.libreoffice.org/c/core/+/159130> \"Drop presumably redundant null check\"", "timestamp": "2023-11-08 13:00:25.000000000"}]}
{"thread_id": "e1911bea_cbdba165", "url": "https://gerrit.libreoffice.org/#/c/core/+/159053/1/sw/source/uibase/shells/textsh.cxx@544", "comments": [{"message": "indent went astray in backport, seems ok in trunk, doesn't matter", "timestamp": "2023-11-07 11:58:26.000000000"}, {"message": "Ah, I missed that. :-)\n\nI got a conflict, then re-tried with 'git cherry-pick -X ignore-all-space', that completed without conflicts and then tried to fix up indent manually, but overlooked this line.", "timestamp": "2023-11-07 12:35:05.000000000"}]}
{"thread_id": "bd972e4b_32870024", "url": "https://gerrit.libreoffice.org/#/c/core/+/84887/4/sfx2/source/doc/docmacromode.cxx@231", "comments": [{"message": "The \"nMacroExecutionMode == MacroExecMode::ALWAYS_EXECUTE\" exception that allows UI to add author, even when the configuration is read-only, looks like a thinko?", "timestamp": "2023-11-07 07:44:33.000000000"}, {"message": "Sorry, I'm wrong", "timestamp": "2023-11-07 07:53:37.000000000"}]}
{"thread_id": "c8290100_ed86eaa2", "url": "https://gerrit.libreoffice.org/#/c/core/+/159002/1/sw/source/core/txtnode/txatritr.cxx@141", "comments": [{"message": "why is this so complicated, CharFormat::GetItem can handle RES_TEXTATR_CHARFMT as well, hoped that would be obvious from the name :)", "timestamp": "2023-11-06 15:23:01.000000000"}, {"message": "I guess I have completely lost you.  I just tried to the code snipped you provided.  Do you feel like taking this over?  (It should be easy to catch the issue also in a plain non-UBSan build, by adding a dynamic_cast check at the relevant place.)", "timestamp": "2023-11-06 15:27:04.000000000"}, {"message": "Done", "timestamp": "2023-11-07 06:05:54.000000000"}]}
{"thread_id": "37e33647_ce7c1e64", "url": "https://gerrit.libreoffice.org/#/c/core/+/159002/1/sw/source/core/txtnode/txatritr.cxx@145", "comments": [{"message": "oh, this is actually wrong... the 3 hints above are all the ones that can contain a lang item, and a lang item is *never* directly on a hint - just replace the whole switch with CharFormat::GetItem\n\nalso, m_pCurrentItem could be changed to its actual class and move the hard static_cast from the getter in here where it is set, that would make things more obvious.", "timestamp": "2023-11-06 15:27:00.000000000"}, {"message": "Done", "timestamp": "2023-11-07 06:05:54.000000000"}]}
{"thread_id": "3a2e6899_bc4e6759", "url": "https://gerrit.libreoffice.org/#/c/core/+/158937/2/sfx2/source/control/dispatch.cxx@1123", "comments": [{"message": "this somehow breaks test/UnitCopyPaste.cpp in online...", "timestamp": "2023-11-06 13:34:15.000000000"}]}
{"thread_id": "ab5ffa65_f382806a", "url": "https://gerrit.libreoffice.org/#/c/core/+/158071/5/vcl/source/text/textlayout.cxx@230", "comments": [{"message": "Shouldn't it be GetCenterEllipsisString?", "timestamp": "2023-10-27 04:24:02.000000000"}, {"message": "oh! sorry, English spelling - I\u2019ll fix :-) nice catch", "timestamp": "2023-10-27 16:38:01.000000000"}, {"message": "English spelling would be fine for me, but the flag is \"CenterEllipsis\", so it was not consistent, so either the flag needs to be changed or the method. :)", "timestamp": "2023-10-27 22:44:00.000000000"}]}
{"thread_id": "d8853636_cef9785f", "url": "https://gerrit.libreoffice.org/#/c/core/+/155680/3/sw/source/uibase/dbui/dbmgr.cxx@b594", "comments": [{"message": "Please also use `sal_uInt32` here.", "timestamp": "2023-08-29 20:49:37.000000000"}, {"message": "Done", "timestamp": "2023-10-23 11:41:47.000000000"}]}
{"thread_id": "16336690_82df9a11", "url": "https://gerrit.libreoffice.org/#/c/core/+/155680/3/sw/source/uibase/dbui/dbmgr.cxx@1824", "comments": [{"message": "Why do you think this may happen? And from where this negative value may come from? Can you check this right now, and not in runtime?", "timestamp": "2023-08-29 20:49:37.000000000"}, {"message": "Sorry for my late reply. This was intended as \"fuse\" for the future. As you said, right now only positive values seem to be involved (I didn't check at runtime, just read the sources). However, if someone alters the addNew method in future, making it returning negative values too, we have at least some kind of warning.\nLeave the warning there or go back to patch set 2?", "timestamp": "2023-09-06 16:05:05.000000000"}, {"message": "I think these warning is not needed. Please drop the changes in this part.", "timestamp": "2023-10-06 10:05:56.000000000"}, {"message": "Done", "timestamp": "2023-10-07 10:45:35.000000000"}]}
{"thread_id": "a62dec83_48918880", "url": "https://gerrit.libreoffice.org/#/c/core/+/155680/5/sw/source/uibase/dbui/dbmgr.cxx@1840", "comments": [{"message": "Also, please drop the changes in this part.", "timestamp": "2023-10-06 10:05:56.000000000"}, {"message": "Done", "timestamp": "2023-10-07 10:45:35.000000000"}]}
{"thread_id": "9c4cc2af_b017085d", "url": "https://gerrit.libreoffice.org/#/c/core/+/155680/7/sw/source/uibase/dbui/dbmgr.cxx@1815", "comments": [{"message": "Please leave it as is, and remove the {}.", "timestamp": "2023-10-24 08:21:32.000000000"}, {"message": "Done", "timestamp": "2023-10-26 19:42:58.000000000"}]}
{"thread_id": "5e1f6876_7b1967e4", "url": "https://gerrit.libreoffice.org/#/c/core/+/155680/7/sw/source/uibase/dbui/dbmgr.cxx@1834", "comments": [{"message": "Also here.", "timestamp": "2023-10-24 08:21:32.000000000"}, {"message": "Done", "timestamp": "2023-10-26 19:42:58.000000000"}]}
{"thread_id": "1f109fbb_7a994e28", "url": "https://gerrit.libreoffice.org/#/c/core/+/157755/4/desktop/source/lib/init.cxx@433", "comments": [{"message": "The function `getLength()` returns `sal_Int32`. Please use `sal_Int32` instead of `size_t` here.", "timestamp": "2023-10-24 15:47:44.000000000"}, {"message": "Done", "timestamp": "2023-10-26 10:39:51.000000000"}]}
{"thread_id": "e6ba7ee4_c34ba33c", "url": "https://gerrit.libreoffice.org/#/c/core/+/157755/4/desktop/source/lib/init.cxx@438", "comments": [{"message": "Also here, use `sal_Int32`.", "timestamp": "2023-10-24 15:47:44.000000000"}, {"message": "Done", "timestamp": "2023-10-26 10:40:06.000000000"}]}
{"thread_id": "cea3f5cd_cf427577", "url": "https://gerrit.libreoffice.org/#/c/core/+/158838/3/vcl/source/gdi/pdfwriter_impl.cxx@10754", "comments": [{"message": "here and elsewhere, you no longer need those `[-loplugin:redundantfcast]` markers if you don't use construction with `(...)` but rather with `{...}`", "timestamp": "2023-11-02 20:55:52.000000000"}, {"message": "ah, that was the issue! every jenkins build except GCC failed for the same reason, while my local clang accepted the (...) except for loclangplugin.", "timestamp": "2023-11-03 09:33:53.000000000"}, {"message": "Done", "timestamp": "2023-11-03 09:34:30.000000000"}]}
{"thread_id": "48ee7fe2_60c46a87", "url": "https://gerrit.libreoffice.org/#/c/core/+/157762/7/basegfx/source/polygon/b2dpolygon.cxx@b1119", "comments": [{"message": "Here you correctly removed the implementation. But where is the respective removal of its declaration in class?", "timestamp": "2023-10-25 12:34:41.000000000"}, {"message": "sir, I have to remove its declaration from here include/basegfx/polygon/b2dpolygon.hxx ?", "timestamp": "2023-10-26 11:07:53.000000000"}, {"message": "Done", "timestamp": "2023-11-03 06:48:07.000000000"}]}
{"thread_id": "8bb1b86f_33637583", "url": "https://gerrit.libreoffice.org/#/c/core/+/157762/7/basegfx/source/polygon/b2dpolypolygon.cxx@261", "comments": [{"message": "The idea of the easyhack is not to introduce this workarounds. The compiler is expected to produce the operator != itself ... if the programmer does not do that explicitly.", "timestamp": "2023-10-25 12:34:41.000000000"}, {"message": "Sorry for misleading you, Ankit. I didn't notice the issue was not removing the declarations.", "timestamp": "2023-10-25 12:52:28.000000000"}]}
{"thread_id": "6769f74b_1817488e", "url": "https://gerrit.libreoffice.org/#/c/core/+/156468/2/vcl/source/gdi/pdfwriter_impl.cxx@5241", "comments": [{"message": "It would be good to drop the g_nInheritedPageWidth / g_nInheritedPageHeight constants, and put literals right in the single \"aLine.append( \"/MediaBox[ 0 0 123 456 ]\", together with respective comments - that moves all the interesting information to the only place where it's used. No use in separate appends, when the resulting string is constant.", "timestamp": "2023-10-26 08:03:24.000000000"}, {"message": "I see that the g_nInheritedPageHeight is used twice more in the same function and once in PDFPage::getHeight(), but nowhere else. Should that also be replaced by literals?", "timestamp": "2023-10-31 22:12:36.000000000"}, {"message": "Well, I missed them - but yes. And in fact, their use there is odd, because why would the fit actions depend on some fixed page size, when the actual page is likely to be different.\n\nPlease replace it there, too; and add there comments like \"// A4 height; is it OK to use a hardcoded value here?\"", "timestamp": "2023-11-01 05:45:54.000000000"}, {"message": "Done", "timestamp": "2023-11-02 16:45:36.000000000"}]}
{"thread_id": "d4c4099e_8123f232", "url": "https://gerrit.libreoffice.org/#/c/core/+/156468/3/vcl/source/gdi/pdfwriter_impl.cxx@5245", "comments": [{"message": "inch/72 is pt", "timestamp": "2023-11-02 16:45:36.000000000"}, {"message": "Done", "timestamp": "2023-11-03 05:08:20.000000000"}]}
{"thread_id": "2f7daa5a_5d9d0862", "url": "https://gerrit.libreoffice.org/#/c/core/+/156468/3/vcl/source/gdi/pdfwriter_impl.cxx@5393", "comments": [{"message": "Here (and below), again, it is desirable to move the number into the string above - to have a single 'append(  \" /FitH 842\" )'", "timestamp": "2023-11-02 16:45:36.000000000"}, {"message": "Done", "timestamp": "2023-11-03 05:08:20.000000000"}]}
{"thread_id": "19fecc3d_b870125b", "url": "https://gerrit.libreoffice.org/#/c/core/+/158100/3/cui/source/tabpages/backgrnd.cxx@129", "comments": [{"message": "m_nActPos was changed back to the original m_xTblLBox->get_active() while cleaning up before upload of patchset 2. This caused some amount of hair loss trying to figure out why setting table cell, row, and table brush items all at one time stopped working. get_active works here if the ability to set all the table brush items at once is not wanted. If that is the case Apply in the destination change handler would not be used. \n\nLooking back at stashed code I see I had commented out get_active and for some reason thought it a good idea put it back while cleaning up.\n\n if (m_xTblLBox && m_xTblLBox->get_visible())\n     nSlot = lcl_GetTableDestSlot(m_nActPos); //m_xTblLBox->get_active());", "timestamp": "2023-10-26 08:36:24.000000000"}]}
{"thread_id": "ce8039a6_04ab1657", "url": "https://gerrit.libreoffice.org/#/c/core/+/158100/5/cui/source/tabpages/backgrnd.cxx@81", "comments": [{"message": "I'm still unsure if it's good that you ignore everything passed to ActivatePage, and use m_aXFSet for that - is the passed argument here inadequate?", "timestamp": "2023-10-29 07:53:00.000000000"}, {"message": "Here's a dumpAsXml comparison of the set passed to ActivatePage, GetItemSet(), and m_aXFSet dumped at the start of the ActivatePage function before the call to SvxAreaTabPage::ActivatePage\n <ActivatePage(const SfxItemSet& rSet) - rSet>\n   <SfxItemSet>\n     <SvxFontHeightItem whichId=\"8\" height=\"200\" prop=\"100\" propUnit=\"13\"/>\n     <SvxBrushItem whichId=\"21\" color=\"ff8000\" filtercolor=\"ffffff\" shadingValue=\"0\" link=\"\" filter=\"\" graphicPos=\"0\" loadAgain=\"true\"/>\n     <SfxPoolItem ptr=\"0x55f907df19a0\" whichId=\"81\" typeName=\"14SfxGrabBagItem\"/>\n     <SfxPoolItem ptr=\"0x55f908a41400\" whichId=\"10023\" typeName=\"14SvxBoxInfoItem\"/>\n     <SfxUInt16Item whichId=\"10414\" value=\"0\"/>\n     <SfxUInt16Item whichId=\"10919\" value=\"52\"/>\n     <SfxStringItem whichId=\"22402\" value=\"Alors\"/>\n   </SfxItemSet>\n </ActivatePage(const SfxItemSet& rSet) - rSet>\n <ActivatePage - GetItemSet()>\n   <SfxItemSet>\n     <SvxFontHeightItem whichId=\"8\" height=\"200\" prop=\"100\" propUnit=\"13\"/>\n     <SvxBrushItem whichId=\"21\" color=\"ff8000\" filtercolor=\"ffffff\" shadingValue=\"0\" link=\"\" filter=\"\" graphicPos=\"0\" loadAgain=\"true\"/>\n     <SfxPoolItem ptr=\"0x55f907df19a0\" whichId=\"81\" typeName=\"14SfxGrabBagItem\"/>\n     <SfxPoolItem ptr=\"0x55f908a41400\" whichId=\"10023\" typeName=\"14SvxBoxInfoItem\"/>\n     <SfxUInt16Item whichId=\"10414\" value=\"0\"/>\n     <SfxUInt16Item whichId=\"10919\" value=\"52\"/>\n     <SfxStringItem whichId=\"22402\" value=\"Alors\"/>\n   </SfxItemSet>\n </ActivatePage - GetItemSet()>\n <ActivatePage - m_aXFSet>\n   <SfxItemSet>\n     <XFillStyleItem whichId=\"1014\" value=\"1\" presentation=\"Continuous\"/>\n     <XFillColorItem whichId=\"1015\">\n       <XColorItem whichId=\"XATTR_FILLCOLOR\" aColor=\"ff8000\">\n         <NameOrIndex whichId=\"1015\" isIndex=\"false\" name=\"\" index=\"-1\"/>\n         <complex-color scheme-index=\"-1\"/>\n       </XColorItem>\n     </XFillColorItem>\n     <XFillTransparenceItem whichId=\"1019\" value=\"0\"/>\n   </SfxItemSet>\n </ActivatePage - m_aXFSet>\n\nAnd here's my *take with a grain of salt* understanding why the need for m_aXFSet - \n\nm_aXFSet holds fill attributes converted from a SvxBrushItem by the setSvxBrushItemAsFillAttributesToTargetSet function in the SvxBkgPage::Reset function. The Reset function is initially called by SfxTabDialogController::CreatePages(). On SvxBkgPage::ActivatePage, m_aXFSet is passed to SvxAreaTabPage::ActivatePage and used by a fill style tab page, Color or Image, depending on what is set by the tab dialog when adding the background page.\n\nThe need for fill attributes is to be able to use the fill style tab pages. Fill attributes are converted to brush items in the SvxBkgPage::FillItems function when the page is deactived with OK press or switch to another tab in the tab dialog.\n\nWhy can't the fill attributes be part of the tab dialog controller pSet? I did some const_casting to do this and IIRC the fill happens at both paragraph and character level when I've tried this.  \n\nMaybe using the rInAttrs pool to construct the set m_aXFSet(*rInAttrs.GetPool()) instead of m_aXFSet(XFillAttrSetItem(rInAttrs.GetPool()).GetItemSet()) is a better choice. AFAICT it doesn't affect the end result of the background being set.\n\nThe \"Calc/Implementation/Data Model for sheet and cell\" document has been helpful for reference on SfxPoolItem, SfxItemPool and SfxItemSet, as well as digging through the code, using debug, and doing dumpAsXml on SfxItemSet sets and SfxItemPool pools.", "timestamp": "2023-10-30 06:00:10.000000000"}]}
{"thread_id": "ef41a411_c9c9785f", "url": "https://gerrit.libreoffice.org/#/c/core/+/158100/6/cui/source/tabpages/backgrnd.cxx@258", "comments": [{"message": "Using Apply to be able to set cell, row, and table backgrounds at the same time really bothers me. A better way is coming in the next patchset.", "timestamp": "2023-11-02 02:33:28.000000000"}, {"message": "Done", "timestamp": "2023-11-02 06:28:19.000000000"}]}
{"thread_id": "d133721e_0be05d4f", "url": "https://gerrit.libreoffice.org/#/c/core/+/158606/1/sw/source/uibase/utlui/content.cxx@646", "comments": [{"message": "bad things will happen if this returns nullptr", "timestamp": "2023-10-31 04:29:26.000000000"}, {"message": "Ack", "timestamp": "2023-10-31 08:57:42.000000000"}]}
{"thread_id": "12f29782_e4d6a5f6", "url": "https://gerrit.libreoffice.org/#/c/core/+/158606/1/sw/source/uibase/utlui/content.cxx@660", "comments": [{"message": "see above comment", "timestamp": "2023-10-31 04:29:26.000000000"}, {"message": "Ack", "timestamp": "2023-10-31 08:57:42.000000000"}]}
{"thread_id": "dbbcce0f_6b3040bf", "url": "https://gerrit.libreoffice.org/#/c/core/+/158657/7/sc/source/ui/condformat/condformateasydlg.cxx@222", "comments": [{"message": "I think this breaks referencing to the cell content.\nIt was possible to compare strings using quoted text or with cell content when used for example: B1, or range name: Range (without quotes)", "timestamp": "2023-11-02 20:41:04.000000000"}]}
{"thread_id": "b50b6bcf_339e0ab7", "url": "https://gerrit.libreoffice.org/#/c/core/+/158341/4/sd/qa/unit/PNGExportTests.cxx@452", "comments": [{"message": "my macOS build fails `CppunitTest_sd_png_export_tests` now with\n\n  /Users/stephan/lo/core/sd/qa/unit/PNGExportTests.cxx:501: Assertion\n  Test name: testTdf157793::TestBody\n  greater assertion failed\n  - Expected greater than: 8500\n  - Actual  : 7915", "timestamp": "2023-10-27 13:46:10.000000000"}, {"message": "Addessed with https://gerrit.libreoffice.org/c/core/+/158583", "timestamp": "2023-10-28 07:34:25.000000000"}, {"message": "seen fixed", "timestamp": "2023-11-01 15:49:36.000000000"}]}
{"thread_id": "8eaa8f7c_4136d689", "url": "https://gerrit.libreoffice.org/#/c/core/+/158746/3/svx/source/sdr/properties/attributeproperties.cxx@125", "comments": [{"message": "Since you didn't make the methods abstract in the class, there's some obstacle for that?", "timestamp": "2023-11-01 13:37:00.000000000"}, {"message": "Yes, the superclass implements a \"default\" version of this method, so if I left this method out, the class would not be abstract, but would instead inherit the superclass copy of this method.", "timestamp": "2023-11-01 13:45:30.000000000"}]}
{"thread_id": "d43414d9_b8c697f5", "url": "https://gerrit.libreoffice.org/#/c/core/+/158727/1/sfx2/source/dialog/dinfdlg.cxx@802", "comments": [{"message": "IIUC, this might get a wrong viewshell - e.g., from another user. Is this expected?\n\nIf this is still the correct thing, I'd suggest to prefer the old way - if it succeeds sometimes:\n\n    SfxViewShell *vShell = pShell->GetViewShell();\n    if (!vShell)\n        vShell = SfxViewShell::Current();\n\nBTW, vShell is a strange name - meaning that we don't use \"v\" prefix. I'd suggest something like pViewShell.", "timestamp": "2023-10-31 15:03:19.000000000"}]}
{"thread_id": "4a8b0911_14affe05", "url": "https://gerrit.libreoffice.org/#/c/core/+/153824/5/xmloff/source/style/xmlnumfi.cxx@721", "comments": [{"message": "This should be checked to allow only \"E\" or \"e\", not arbitrary strings, and fall back to \"E\" if invalid.", "timestamp": "2023-07-20 23:06:17.000000000"}, {"message": "Done", "timestamp": "2023-07-22 15:31:34.000000000"}]}
{"thread_id": "575e364e_f79d9b81", "url": "https://gerrit.libreoffice.org/#/c/core/+/158503/6/sc/source/core/data/markmulti.cxx@356", "comments": [{"message": "clang with -werror option complains about comparing a short (SCOL) against an unsigned int (size_t), Jenkin for co-23.05 isn't so strict, but it would probably be when ported to master; so the comparison should move to: \nstatic_cast<size_t>(nStartCol) >= aMultiSelContainer.size()", "timestamp": "2023-10-30 16:05:46.000000000"}, {"message": "Done", "timestamp": "2023-10-31 10:56:46.000000000"}]}
{"thread_id": "b60d9040_52ee6647", "url": "https://gerrit.libreoffice.org/#/c/core/+/158503/6/sc/source/core/data/markmulti.cxx@365", "comments": [{"message": "same problem as above, here it's safer to check that the difference is positive:\n(nStartCol - nColOffset > 0) && static_cast<size_t>(nStartCol - nColOffset) >= aMultiSelContainer.size()", "timestamp": "2023-10-30 16:05:46.000000000"}, {"message": "Done", "timestamp": "2023-10-31 10:56:46.000000000"}]}
{"thread_id": "ba84c18e_15b9fee9", "url": "https://gerrit.libreoffice.org/#/c/core/+/26648/1/vcl/source/gdi/jobset.cxx@177", "comments": [{"message": "strictly speaking unnecessary, because we've already checked that the lengths are the same", "timestamp": "2016-06-26 06:16:43.000000000"}]}
{"thread_id": "edfc485a_e2707621", "url": "https://gerrit.libreoffice.org/#/c/core/+/26648/9/vcl/source/gdi/jobset.cxx@300", "comments": [{"message": "Without the SetDriverDataLen, GetDriverDataLen here doesn't have the expected value, and should be nDriverDataLen, done in https://gerrit.libreoffice.org/c/core/+/158671\n\nSeeing the commit with 2018 in it made me panic we had an ancient bug somehow uncaught :-), but I see its actually new :-)", "timestamp": "2023-10-30 18:42:24.000000000"}]}
{"thread_id": "5f701fc3_0f799c36", "url": "https://gerrit.libreoffice.org/#/c/core/+/158084/10/sd/source/filter/eppt/pptx-epptooxml.cxx@1498", "comments": [{"message": "this \"|| pMasterNext)\" return false doesn't look right see as we have code that later tries to use pMasterNext?", "timestamp": "2023-10-26 10:21:13.000000000"}, {"message": "Ups, Thanks", "timestamp": "2023-10-26 11:37:00.000000000"}]}
{"thread_id": "ea8d7121_9b41e3f3", "url": "https://gerrit.libreoffice.org/#/c/core/+/158084/11/svx/source/svdraw/svdpage.cxx@826", "comments": [{"message": "I suppose this isn't really \"FindObject\" in a find pObj in the list sense, and more of a \"find out if there is an object with the same properties in the list\"?\n\nmight make sense to give it a name like \"ContainsEquivalentObject\" and maybe it doesn't need to be a member of SdrObjList, but something local where it is used.\n\nnot a blocker on this review, but for the upstream merge is fine, if the idea makes sense in practice.", "timestamp": "2023-10-26 12:04:27.000000000"}, {"message": ">> I suppose this isn't really \"FindObject\" in a find pObj in the list sense, and more of a \"find out if there is an object with the same properties in the list\"?\n\nYes\n\nThanks, looks a good the name, I had same draft names, finally not my native language =)", "timestamp": "2023-10-26 12:11:33.000000000"}, {"message": "yeah, naming is hard: https://martinfowler.com/bliki/TwoHardThings.html", "timestamp": "2023-10-26 12:14:09.000000000"}]}
{"thread_id": "55f57130_e9e50edd", "url": "https://gerrit.libreoffice.org/#/c/core/+/105751/4/starmath/source/view.cxx@1196", "comments": [{"message": "This mistakenly treated 100 as the upper bound of the clamp, while the upper bound was MAXZOOM (800), and 100 was the fraction's denominator. So the resulting fraction became 100 times larger, with numerator clamped to a smaller value.\n\nHandled in https://gerrit.libreoffice.org/c/core/+/158617", "timestamp": "2023-10-29 11:53:25.000000000"}]}
{"thread_id": "2e8f28e1_64c01b47", "url": "https://gerrit.libreoffice.org/#/c/core/+/146621/2/sw/source/filter/html/htmlnumwriter.cxx@b357", "comments": [{"message": "Basically, this was reverted when commit ebf8b0b0699fe34c86badb3087869d902a4e40a8 (from libreoffice-7-5) was backported to co-23.05 in commit 36831c668c53fdfcd78300045e6beafccbba35c6. Notice that libreoffice-7-5 didn't have the change from here, so it needed a manual restoration of the \"if (rWrt.mbXHTML)\" condition.", "timestamp": "2023-05-30 09:07:24.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/152385", "timestamp": "2023-05-30 09:26:10.000000000"}]}
{"thread_id": "88d9e2a3_c42261b4", "url": "https://gerrit.libreoffice.org/#/c/core/+/158442/2/sc/source/ui/view/viewdata.cxx@1432", "comments": [{"message": "AFAICS this one should guard this already with the last check !maTabData[nTabIndex] in the if statement.\n\nA unique_ptr will return false if cast to bool if it contains an empty pointer. It looks to me meaningless to get the raw pointer from the unique_ptr and check that is not nullptr if you can just check the unique_ptr instead. AFAICS the crash seems to happen because the other methods (GetCurYForTab, SetCurXForTab,...) don't have the !maTabData[nTabIndex] condition in the if statement but they should.\n\nThese checks seem to be very repetitive too. It would also be better to add a FetchTableData method to ScViewData, which will do all the checks and return you a valid ScViewDataTable pointer or nullptr if it's not valid - similar like FetchTable does in ScDocument.", "timestamp": "2023-10-27 04:19:12.000000000"}, {"message": "interestingly I added the check to the one that failed and copied upwards to the other, and checking git blame I see this one case that has the check already, which I missed, was added for a similar backtrace but without extended it to the other :-)", "timestamp": "2023-10-27 11:39:04.000000000"}, {"message": "merge things together and removed duplication via a new FetchTableData", "timestamp": "2023-10-27 11:51:41.000000000"}]}
{"thread_id": "2f08c98e_8ce6ae08", "url": "https://gerrit.libreoffice.org/#/c/core/+/156943/1/svx/source/dialog/srchdlg.cxx@b579", "comments": [{"message": "Michael, is it sufficient to show/hide the GtkBox to trigger the screen reader?", "timestamp": "2023-09-15 12:27:16.000000000"}, {"message": "Yes, the label in the search and replace dialog is still announced as notification/alert by Orca w/ gtk3 and NVDA on Windows with this change in place.\n\nThe label in the search bar is not, but that is unrelated to this change and was already the case before.\n\n(It is announced when giving that label the `NOTIFICATION` role and showing/hiding as well. (And hiding it when the text is empty also makes the IMHO unnecessary \"blue area\" (from the label background) go away when there's no text.\n\nLocal diff on top while testing that:\n\n```\ndiff --git a/svx/source/form/labelitemwindow.cxx b/svx/source/form/labelitemwindow.cxx\nindex f7be0f909ac1..0cf1d9374bf2 100644\n--- a/svx/source/form/labelitemwindow.cxx\n+++ b/svx/source/form/labelitemwindow.cxx\n@@ -37,7 +37,14 @@ void LabelItemWindow::set_label(const OUString& rLabel)\n {\n     m_xLabel->set_label(rLabel);\n     if (rLabel.isEmpty())\n+    {\n         m_xImage->hide();\n+        m_xLabel->hide();\n+    }\n+    else\n+    {\n+        m_xLabel->show();\n+    }\n }\n \n OUString LabelItemWindow::get_label() const { return m_xLabel->get_label(); }\ndiff --git a/svx/uiconfig/ui/labelbox.ui b/svx/uiconfig/ui/labelbox.ui\nindex e9f8cf70ff17..f77cd5da7f4e 100644\n--- a/svx/uiconfig/ui/labelbox.ui\n+++ b/svx/uiconfig/ui/labelbox.ui\n@@ -31,6 +31,11 @@\n         <property name=\"hexpand\">True</property>\n         <property name=\"vexpand\">True</property>\n         <property name=\"xalign\">0</property>\n+        <child internal-child=\"accessible\">\n+          <object class=\"AtkObject\" id=\"label-atkobject\">\n+            <property name=\"AtkObject::accessible-role\">notification</property>\n+          </object>\n+        </child>\n       </object>\n       <packing>\n         <property name=\"expand\">False</property>\n```\n)", "timestamp": "2023-09-16 08:39:35.000000000"}, {"message": "Screen reader announcement in search bar works with PS10.", "timestamp": "2023-10-27 08:18:40.000000000"}]}
{"thread_id": "30f9e75a_79bab73b", "url": "https://gerrit.libreoffice.org/#/c/core/+/156943/1/svx/source/dialog/srchdlg.cxx@582", "comments": [{"message": "Caolan, showing the box does not update the dialog height on kf5/gen (but the label did). What do you suggest?", "timestamp": "2023-09-15 12:27:16.000000000"}, {"message": "I haven't really looked at this patchset in total, but if it is the case that you have a dialog visible and are interacting with it and want it to resize because the contents have grown. Then we have resize_to_request for that. We use that in the spell dialog where we make it grow by adding a checkbox to it sometimes after it was already displayed.\n\nThe other option is to make the dialog always have enough size for the optional widget which might be shown later. The way to do that is to have the widget visible in the .ui, then in the ctor get the preferred size of the dialog, and set that with set_size_request, then hide the optional widget. That way the dialog starts off large enough to shown the optional widget even if it is initially hidden.", "timestamp": "2023-09-15 13:40:25.000000000"}, {"message": "Many thanks, this does the trick. Although growing/shrinking the dialog is not really nice (was the same before and is a bit more obtrusive now).", "timestamp": "2023-09-15 15:33:44.000000000"}]}
{"thread_id": "febb4597_8450e9a5", "url": "https://gerrit.libreoffice.org/#/c/core/+/156943/7/svx/source/dialog/srchdlg.cxx@2365", "comments": [{"message": "maybe drop completely if no more used?", "timestamp": "2023-09-25 15:20:43.000000000"}, {"message": "Done", "timestamp": "2023-10-24 10:00:42.000000000"}]}
{"thread_id": "94346ce8_16531d8c", "url": "https://gerrit.libreoffice.org/#/c/core/+/156943/7/svx/source/form/labelitemwindow.cxx@50", "comments": [{"message": "Announcement of the label by screen readers depends on the widget changing status from hidden to visible. As is, Orca wouldn't announce the notification in the search bar. Adding this to the end of the method would make that work:\n\n    m_xLabel->set_visible(!rLabel.isEmpty());\n    \nWhat's not completely clear to me is what should happen for `LabelItemWindowType::Text` since that's not explicitly handled here. What color and image should be used then? Don't know whether that's a use case in practice, but IIUC, currently whatever the last state was using would be used, i.e. the result of\n\n    set_label(\"something\", `LabelItemWindowType::Text`);\n    \nwould use no image and COL_AUTO if no text was set previously; but image and same color as InfobarType::INFO when that was used before.", "timestamp": "2023-09-25 15:20:43.000000000"}, {"message": "Added m_xLabel->set_visible(!rLabel.isEmpty()); but wonder if this makes any sense since the label is never hidden.\n\nLabelItemWindowType::Text is the default (see labelitemwindow.hxx) and in this case just the label is set. Added it to the isEmpty() part", "timestamp": "2023-10-24 10:00:42.000000000"}, {"message": "> Added m_xLabel->set_visible(!rLabel.isEmpty()); but wonder if this makes any sense since the label is never hidden.\n\nIndeed, the label is not hidden and the \"Search key not found\" is still shown even when typing in the search box after doing a search without any matches. IMHO, it would make sense to hide the label again once the user starts typing sth else, just like the the red background color disappears in master.", "timestamp": "2023-10-26 11:22:41.000000000"}, {"message": "done (back to the off/on thing)", "timestamp": "2023-10-27 07:26:41.000000000"}, {"message": "Thanks, works well with Orca and NVDA now.", "timestamp": "2023-10-27 08:18:40.000000000"}]}
{"thread_id": "4df6dbc8_c9b301e7", "url": "https://gerrit.libreoffice.org/#/c/core/+/153351/16/emfio/source/reader/wmfreader.cxx@1378", "comments": [{"message": "If the unknown record found, we should set: \n   bRecordOk = false;", "timestamp": "2023-10-25 09:41:32.000000000"}, {"message": "Done", "timestamp": "2023-10-27 11:15:11.000000000"}]}
{"thread_id": "82db6518_255bd633", "url": "https://gerrit.libreoffice.org/#/c/core/+/156831/11/sc/source/ui/condformat/condformateasydlg.cxx@162", "comments": [{"message": "Is this condition ever not true? I guess pFormat->AddEntry(...) above would crash before you would ever come to this position.", "timestamp": "2023-10-11 02:53:45.000000000"}, {"message": "Done", "timestamp": "2023-10-11 11:45:08.000000000"}]}
{"thread_id": "821b661e_2cb542d4", "url": "https://gerrit.libreoffice.org/#/c/core/+/156831/11/sc/source/ui/condformat/condformateasydlg.cxx@166", "comments": [{"message": "this would logically better fit into the above \"if\" body ... as this is the only place in \"else\" where you forcefully reset pFormat", "timestamp": "2023-10-11 02:53:45.000000000"}, {"message": "Done", "timestamp": "2023-10-11 11:45:08.000000000"}]}
{"thread_id": "2e639985_923222ab", "url": "https://gerrit.libreoffice.org/#/c/core/+/156831/11/sc/source/ui/view/cellsh3.cxx@463", "comments": [{"message": "Would be great to find a better way how to transport additional parameters into the dialog class. Oh well...", "timestamp": "2023-10-11 02:53:45.000000000"}, {"message": "Agreed, this is very ugly.", "timestamp": "2023-10-11 11:45:08.000000000"}]}
{"thread_id": "40ec67dc_b7ba166d", "url": "https://gerrit.libreoffice.org/#/c/core/+/158560/1/sc/source/ui/docshell/docsh4.cxx@2558", "comments": [{"message": "we use the c_str() below for the payload; any need to duplicate ? =)", "timestamp": "2023-10-27 13:44:17.000000000"}, {"message": "Done", "timestamp": "2023-10-27 15:47:28.000000000"}]}
{"thread_id": "562d10e8_6b3dcfce", "url": "https://gerrit.libreoffice.org/#/c/core/+/158509/1/oox/source/helper/graphichelper.cxx@293", "comments": [{"message": "this seems dodgy for two reason\n(1) we are now overloading the meaning of pExtHeader to both pass extra data indicate if we want lazy loading or not\n(2) lazy loading is now going to be turned off for other things, not just TIFF\n\nRather just pass a boolean indicating if lazy loading should be true or false into importGraphic?", "timestamp": "2023-10-26 17:13:37.000000000"}, {"message": "Done", "timestamp": "2023-10-27 06:50:40.000000000"}]}
{"thread_id": "2213d760_1cfd80fc", "url": "https://gerrit.libreoffice.org/#/c/core/+/158396/1/sw/source/core/doc/number.cxx@652", "comments": [{"message": "If the numbering type is ABC or 1st 2nd 3rd, or One, Two, Three, then those need to be accepted. (Sorry)", "timestamp": "2023-10-25 01:17:14.000000000"}, {"message": "This already should be the case, see my above comment", "timestamp": "2023-10-25 09:22:40.000000000"}]}
{"thread_id": "c80c97a4_a8ecb25b", "url": "https://gerrit.libreoffice.org/#/c/core/+/158391/2/sw/source/uibase/shells/textfld.cxx@693", "comments": [{"message": "Merge the two functions and just go with \"nInsertSubType = FN_INSERT_FLD_DATE ? 0 : 1;\" (same for time)?", "timestamp": "2023-10-25 08:06:47.000000000"}, {"message": "yep, good point. done", "timestamp": "2023-10-25 08:57:34.000000000"}, {"message": "Done", "timestamp": "2023-10-25 09:04:28.000000000"}]}
{"thread_id": "80bd95be_5c615422", "url": "https://gerrit.libreoffice.org/#/c/core/+/156015/6/sc/source/ui/view/select.cxx@80", "comments": [{"message": "With the change of `SELENG_AUTOREPEAT_INTERVAL_MAX` to `constexpr sal_uInt64` you can drop the `static_cast`.", "timestamp": "2023-10-24 08:48:37.000000000"}, {"message": "Done", "timestamp": "2023-10-24 15:58:34.000000000"}]}
{"thread_id": "f5a21247_841e2165", "url": "https://gerrit.libreoffice.org/#/c/core/+/156015/6/sc/source/ui/view/select.cxx@107", "comments": [{"message": "Also here.", "timestamp": "2023-10-24 08:48:37.000000000"}, {"message": "Done", "timestamp": "2023-10-24 15:58:34.000000000"}]}
{"thread_id": "9d93535a_b6ae54fa", "url": "https://gerrit.libreoffice.org/#/c/core/+/156015/6/sc/source/ui/view/select.cxx@121", "comments": [{"message": "And here.", "timestamp": "2023-10-24 08:48:37.000000000"}, {"message": "Done", "timestamp": "2023-10-24 15:58:34.000000000"}]}
{"thread_id": "96f0fd36_1cb94bc2", "url": "https://gerrit.libreoffice.org/#/c/core/+/158379/1/sw/source/core/layout/tabfrm.cxx@2612", "comments": [{"message": "Does it make sense to only do this work if bTryToSplit is initially true?", "timestamp": "2023-10-24 14:41:32.000000000"}, {"message": "Yes, that makes sense. Done in https://gerrit.libreoffice.org/c/core/+/158414", "timestamp": "2023-10-25 07:45:23.000000000"}]}
{"thread_id": "bb02426c_333e746d", "url": "https://gerrit.libreoffice.org/#/c/core/+/157740/2/sw/source/core/doc/docredln.cxx@765", "comments": [{"message": "this was relocated(+improved) from\nsw/source/core/doc/DocumentRedlineManager.cxx\nand use SwRangeRedline* parameters instead of SwPosition*", "timestamp": "2023-10-17 15:56:06.000000000"}]}
{"thread_id": "2d951df7_b12dd5dd", "url": "https://gerrit.libreoffice.org/#/c/core/+/157740/2/sw/source/core/doc/docredln.cxx@796", "comments": [{"message": "this was relocated(+improved) from\nsw/source/core/doc/DocumentRedlineManager.cxx\nDocumentRedlineManager::FindRangeToAcceptReject\n\nBecause it is used from more places now.\n\nand use 'size_type' position parameters instead of 'SwPosition**'", "timestamp": "2023-10-17 15:56:06.000000000"}]}
{"thread_id": "1c1dcff0_d238e6e3", "url": "https://gerrit.libreoffice.org/#/c/core/+/157740/3/sw/source/core/doc/docredln.cxx@898", "comments": [{"message": "OUStrings are \"\" by default already.", "timestamp": "2023-10-18 10:15:28.000000000"}, {"message": "Thx, good to know!", "timestamp": "2023-10-19 06:33:22.000000000"}]}
{"thread_id": "cc3c30c7_c5988a9d", "url": "https://gerrit.libreoffice.org/#/c/core/+/157740/3/sw/source/core/doc/docredln.cxx@909", "comments": [{"message": "upstream has a clang plugin with complains about \"loplugin:stringconstant\" here suggesting to use sTrimmed.isEmpty() instead", "timestamp": "2023-10-18 10:15:28.000000000"}, {"message": "Thx.", "timestamp": "2023-10-19 06:33:22.000000000"}]}
{"thread_id": "96a2a814_635eff5a", "url": "https://gerrit.libreoffice.org/#/c/core/+/157740/3/sw/source/core/doc/docredln.cxx@930", "comments": [{"message": "upstream has a clang plugin which complains about \"loplugin:unnecessaryparen\" here with the extra outer () around the inner () here", "timestamp": "2023-10-18 10:15:28.000000000"}, {"message": "Thx. I deleted something from here, and forgot about the extra '()'", "timestamp": "2023-10-19 06:33:22.000000000"}]}
{"thread_id": "1034eff5_e8dbe841", "url": "https://gerrit.libreoffice.org/#/c/core/+/157740/3/sw/source/filter/xml/XMLRedlineImportHelper.cxx@803", "comments": [{"message": "might as well combine these two lines together and assign once", "timestamp": "2023-10-18 10:15:28.000000000"}, {"message": "Thx, you are right.. sorry that i did not spot this.", "timestamp": "2023-10-19 06:33:22.000000000"}]}
{"thread_id": "41bbcee9_0d2933ec", "url": "https://gerrit.libreoffice.org/#/c/core/+/157740/2/writerfilter/source/dmapper/DomainMapper_Impl.cxx@3588", "comments": [{"message": "this is an ugly hack to save us from a regression:\n\nWriter export a wrong type of docx\nin a case, \"moveFromRange\" closed too early .. this contains the uniq ID to the movement we are in.\nIn that spec case it was after a the good move redline, \nAfter that, a move redline (contains only an EOP) is still generated, normally it would be merged into the previous redline\nBut without the actual move ID this EOP redline will be not mergeable with the previous.. withc already got its good moveID.\n\nSo, i tried to fix it by remembering the last move ID used.. and use that if we dont have 1, in a move redline..\n\nI think in a good docx we should always be in a moveFromRange... where we could get the right moveID... but of course, i dont know it for sure.. as i dont know what special cases do docx can have.. :)", "timestamp": "2023-10-17 15:56:06.000000000"}, {"message": "One thing that Justin does sometimes is to use the crashtesting thing to find if there any examples of a weird feature in our (very large) set of crashtesting test documents. Do you already have examples that need this or would it be worth finding some in crashtesting by adding an assert to force a fail to find some?", "timestamp": "2023-10-18 10:20:49.000000000"}, {"message": "I already have example file for it. \nfortunatelly it did not crashed, but after import there was +2 redlines that contains only an EOP, and they not merged into the redline before them.. because of the missing ID.\n\nIn the unittests there is a tdf123460.docx. that is still ok, but at export, it export to a faulty docx file.. (so peoples surely have files like that)\nThis file still can be opened.. but we lose some move informations... \nbecause it close moveToRangeEnd a bit early.\nBefore my patch those info was not loaded anyway .. \n\nWith this hack i save info from the previous move redline.. and it helps in this case. i hope i dont generate other regression with it.. :)", "timestamp": "2023-10-19 06:33:22.000000000"}]}
{"thread_id": "da1f3824_2a3e7ca6", "url": "https://gerrit.libreoffice.org/#/c/core/+/157740/3/xmloff/source/text/XMLRedlineExport.cxx@459", "comments": [{"message": "There are (unlikely) circumstances where >>= can fail and leave nTmp in its original uninitialized state. Safest to make the above line sal_uInt32 nTmp(0);", "timestamp": "2023-10-18 10:15:28.000000000"}, {"message": "Thx", "timestamp": "2023-10-19 06:33:22.000000000"}]}
{"thread_id": "92e5c763_f226617b", "url": "https://gerrit.libreoffice.org/#/c/core/+/157740/7/xmloff/source/text/XMLRedlineExport.cxx@462", "comments": [{"message": "I think this means the tag is saved as \"dc:moved-id\" in the odf file format. I don't think we are \"allowed\" put new attributes into the dc aka \"Dublin Core\" namespace?\n\nWe probably need to follow https://wiki.documentfoundation.org/Documentation/ODF_Markup and https://wiki.documentfoundation.org/Development/ODF_Implementer_Notes/List_of_LibreOffice_ODF_Extensions\n\nWhich I believe is to use \"loext\" and then add the new property to that wiki page so it is documented as existing and can be picked up for inclusion in next version of standard. An example might be d17bff6e0324dfa013681efd7e0107d3cd5ad2be which used loext for initial new properties, and then 6+ months later with new ODF there was a7bf6488ebb544e1efaed0a1e53073df9cc2064d to adapt to the new namespace when adopted by ODF standard.\n\nMaybe it should be \"move-id\" instead of \"moved-id\"? I see at https://docs.oasis-open.org/office/OpenDocument/v1.3/OpenDocument-v1.3-part3-schema.pdf that there is \"change-id\" and not \"changed-id\" so maybe that fits in a little better.", "timestamp": "2023-10-19 13:40:26.000000000"}, {"message": "I think the schema/libreoffice/OpenDocument-v1.3+libreoffice-schema.rng references the parent of schema/odf1.3/OpenDocument-v1.3-schema.rng and in that one we have office:change-info with dc-creator and dc-date inside \"office-change-info\" so my guess is that for this new change we need something like:\n\n <rng:define name=\"office-change-info\" combine=\"interleave\">\n    <rng:optional>\n      <rng:attribute name=\"loext:move-id\">\n        <rng:ref name=\"integer\"/>\n      </rng:attribute>\n    </rng:optional>\n  </rng:define>", "timestamp": "2023-10-20 09:22:30.000000000"}, {"message": "Done", "timestamp": "2023-10-25 07:42:26.000000000"}]}
{"thread_id": "5112a1a3_96b7f160", "url": "https://gerrit.libreoffice.org/#/c/core/+/156452/4/idl/source/prj/svidl.cxx@98", "comments": [{"message": "These are again not part of any debug block, but seem aimed at end users. So it's not a good idea to replace these.\n\nPlease note what Michael says in the description: \"To a first approximation, a good heuristic is that a printf should be replaced if it's inside a #ifdef OSL_DEBUG_LEVEL or #ifdef DBGUTIL or similar.\"", "timestamp": "2023-09-04 06:36:36.000000000"}, {"message": "done. \nin the description, he also mentions not to touch */test code. all the basegfx *printfs are in basegfx/test/(files)*. If it is also to be included or not, please clarify.", "timestamp": "2023-09-04 12:21:00.000000000"}]}
{"thread_id": "fcec3b32_d7d7f94a", "url": "https://gerrit.libreoffice.org/#/c/core/+/156452/7/pyuno/source/module/pyuno_runtime.cxx@946", "comments": [{"message": "Please use `pyuno.runtime` here, instead of `pyuno.module`.", "timestamp": "2023-09-11 23:48:23.000000000"}, {"message": "Done", "timestamp": "2023-09-12 12:57:06.000000000"}]}
{"thread_id": "2e559fa7_bd719729", "url": "https://gerrit.libreoffice.org/#/c/core/+/156452/5/tools/source/stream/strmunx.cxx@403", "comments": [{"message": "Looks like this could be SAL_INFO", "timestamp": "2023-09-04 12:32:54.000000000"}, {"message": "The comment https://bugs.documentfoundation.org/show_bug.cgi?id=130924#c13 asked for >0 --> sal_warn. What do you say? This does look like an information more than a warning.", "timestamp": "2023-09-04 12:39:46.000000000"}, {"message": "Yes, it does not happen upon any unexpected event, so INFO would be better", "timestamp": "2023-09-04 13:02:04.000000000"}, {"message": "Done.", "timestamp": "2023-09-04 13:13:43.000000000"}, {"message": "Done", "timestamp": "2023-09-11 23:48:23.000000000"}, {"message": "Considering that I am new to advanced git, what should I do now\n\n--> create another commit or there is a download option when patch 7 is selected (do something from there)", "timestamp": "2023-09-12 13:04:48.000000000"}, {"message": "So after trying cherry-picking in test branches, I got to know that you can create a fresh commit just with changes from that commit changes (patch changes in this case). using this I cherry-picked patch 7. then checked out the files that were not required in this change. test -> commit -> submit master.", "timestamp": "2023-09-12 22:24:10.000000000"}]}
{"thread_id": "faf8c366_c3f558c5", "url": "https://gerrit.libreoffice.org/#/c/core/+/158041/4/sw/qa/uibase/shells/shells.cxx@1078", "comments": [{"message": "We should change the this test eventually and insert a variable time field so the additional second makes sense.", "timestamp": "2023-10-17 13:44:17.000000000"}, {"message": "In sd you can find .uno:InsertTimeFieldVar and .uno:InsertTimeFieldFix, maybe adding them to sw can help here, so the test uses .uno:InsertTimeFieldVar", "timestamp": "2023-10-20 08:27:54.000000000"}, {"message": "Interesting! But the code is handled in sd/ so it requires some work.", "timestamp": "2023-10-20 09:11:46.000000000"}]}
{"thread_id": "b6b53bd4_c3f2750e", "url": "https://gerrit.libreoffice.org/#/c/core/+/156867/11/writerfilter/source/dmapper/SdtHelper.cxx@380", "comments": [{"message": "Nit: is there still a case where this grab-bag is stored in the model? If not, it would be nice to get rid of it in a follow-up change and populate the content control properties directly as the tokens arrive in the domain mapper, without this extra layer. (I think that's what happens for inline SDT already.)", "timestamp": "2023-10-11 09:34:02.000000000"}, {"message": "The tokens might arrive in the domain mapper before we know if the block SDT will become a content control or something else (like a date sdt) so the grab bag needs to be populated.", "timestamp": "2023-10-11 09:44:36.000000000"}]}
{"thread_id": "95927aeb_889c2d4a", "url": "https://gerrit.libreoffice.org/#/c/core/+/157362/2/vcl/source/gdi/textlayout.cxx@73", "comments": [{"message": "what a snake of a function...", "timestamp": "2023-10-12 02:42:21.000000000"}, {"message": "I'm not following... what is a snake function?", "timestamp": "2023-10-12 04:23:30.000000000"}, {"message": "a very loonoong function that can probably be split up into smaller pieces... don't worry about it - it's just a comment", "timestamp": "2023-10-12 07:52:39.000000000"}, {"message": "Oh... ages ago I actually split up this function. I submitted it, but it never got reviewed so it got abandoned. I'll see if I can dig it up and resubmit.", "timestamp": "2023-10-13 07:08:14.000000000"}, {"message": "Done", "timestamp": "2023-10-14 04:14:42.000000000"}]}
{"thread_id": "497d0378_14280621", "url": "https://gerrit.libreoffice.org/#/c/core/+/157780/1/sfx2/source/view/viewsh.cxx@861", "comments": [{"message": "I wonder if this should have m_nListPrefixLength as an argument before \"false\" like the other aboutParagraph now has? Or if there should be an explicit 0 for the new nlistPrefixLength argument ?", "timestamp": "2023-10-16 16:19:38.000000000"}, {"message": "Good catch! Fortunately it is only for logging. I'd say m_nListPrefixLength. I'll fix it in my next patch. Thanks for pointing that out.", "timestamp": "2023-10-16 17:00:27.000000000"}]}
{"thread_id": "d3c9c7ab_f65b50e6", "url": "https://gerrit.libreoffice.org/#/c/core/+/158233/2/sw/source/core/fields/reffld.cxx@432", "comments": [{"message": "Surrounding code puts the opening { to the start of the next line.", "timestamp": "2023-10-20 11:18:34.000000000"}, {"message": "Done", "timestamp": "2023-10-20 14:44:11.000000000"}]}
{"thread_id": "c7ddec09_40474b7d", "url": "https://gerrit.libreoffice.org/#/c/core/+/158233/2/sw/source/core/fields/reffld.cxx@434", "comments": [{"message": "Nit: opening brace at the end of the line. Also perhaps return early so the rest of the function can have less indentation?", "timestamp": "2023-10-20 11:18:34.000000000"}, {"message": "Done the early return, brace no longer exists", "timestamp": "2023-10-20 14:44:11.000000000"}]}
{"thread_id": "b85e0967_c33c77e8", "url": "https://gerrit.libreoffice.org/#/c/core/+/102490/2/sd/qa/unit/import-tests-smartart.cxx@1592", "comments": [{"message": "At <https://github.com/flathub/org.libreoffice.LibreOffice/pull/264#issuecomment-1772670060> \"Update runtime to 23.08\" -> <https://buildbot.flathub.org/#/builders/6/builds/75132> I see this fail with\n\n  import-tests-smartart.cxx:1544:Assertion\n  Test name: testAutofitSync::TestBody\n  equality assertion failed\n  - Expected: 43.3333333333333\n  - Actual  : 50\n\nand I notice that `sd/qa/unit/data/pptx/smartart-autofit-sync.pptx` contains references to font Calibri, which is presumably replaced with whatever best approximation on a given system.\n\nAny easy way to make this more robust?", "timestamp": "2023-10-20 12:54:02.000000000"}, {"message": "Can you please check if https://gerrit.libreoffice.org/c/core/+/158263 helps?\n\nIf so, you can fix similar tests yourself if you want. You need to configure vim/emacs to recognize that pptx/docx/etc is a zip file so you can edit the zipped xml in place, then zipgrep can find what XML to edit and the gbuild snippet from the commit message can point out which font has some system-dependent fallback.", "timestamp": "2023-10-20 13:49:25.000000000"}]}
{"thread_id": "5772aee5_282e857d", "url": "https://gerrit.libreoffice.org/#/c/core/+/157109/4/svtools/source/control/valueset.cxx@b1079", "comments": [{"message": "Please use `size_t` for both `nFirstItem` and `nLastItem`. If you look into the `tools::Long` definition, you will see that in some cases it is 64 bit:\n\ninclude/tools/long.hxx\n\n namespace tools\n {\n #if defined _WIN64\n typedef sal_Int64 Long;\n typedef sal_uInt64 ULong;\n #else\n typedef long Long;\n typedef unsigned long ULong;\n #endif\n }", "timestamp": "2023-10-06 11:12:05.000000000"}, {"message": "Done. Thanks!", "timestamp": "2023-10-07 20:05:39.000000000"}]}
{"thread_id": "aa4df688_d44a028c", "url": "https://gerrit.libreoffice.org/#/c/core/+/157763/2/sd/qa/unit/PNGExportTests.cxx@296", "comments": [{"message": "for my macOS build, this fails with\n\n  sd/qa/unit/PNGExportTests.cxx:296:testTdf156808::TestBody\n  equality assertion failed\n  - Expected: rgba[000000ff]\n  - Actual  : rgba[040404ff]", "timestamp": "2023-10-18 15:12:58.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/158181/1", "timestamp": "2023-10-19 15:05:17.000000000"}]}
{"thread_id": "5bae4902_53f46d51", "url": "https://gerrit.libreoffice.org/#/c/core/+/157718/6/sc/source/ui/view/cellsh3.cxx@464", "comments": [{"message": "yes, we need to deglobalize that", "timestamp": "2023-10-16 11:49:30.000000000"}, {"message": "Done", "timestamp": "2023-10-18 15:13:03.000000000"}]}
{"thread_id": "8b20ef7d_e9a5d950", "url": "https://gerrit.libreoffice.org/#/c/core/+/157718/7/sc/source/ui/view/cellsh3.cxx@463", "comments": [{"message": "What about multiple users at the same time using the dialog?\nThis is saved in document class which is shared across all the sessions, right?\nShouldn't that be then saved somewhere in the ViewShell?", "timestamp": "2023-10-18 18:12:12.000000000"}, {"message": "*using* the dialog is fine, this is only lived from when this line runs to the dialog constructor. This could hypothetically happened if in the milliseconds between this and the constructor another user opens the dialog, and the first person gets a dialog with an option they didn't expect. That is if actions such as opening dialogs are handled concurrently in the kit.", "timestamp": "2023-10-18 18:41:16.000000000"}]}
{"thread_id": "e5d9f132_22048437", "url": "https://gerrit.libreoffice.org/#/c/core/+/157993/1/unoxml/source/xpath/xpathapi.cxx@379", "comments": [{"message": "\"xExtension\"", "timestamp": "2023-10-16 07:04:36.000000000"}, {"message": "done", "timestamp": "2023-10-16 07:14:00.000000000"}, {"message": "Thank you!", "timestamp": "2023-10-16 08:11:23.000000000"}]}
{"thread_id": "cd38b38b_0fe7b4d3", "url": "https://gerrit.libreoffice.org/#/c/core/+/157993/2/unoxml/source/xpath/xpathapi.cxx@113", "comments": [{"message": "This method tries to collect name spaces from the given `xNamespaceNode`, and if dynamic cast from its interface pointer to `DOM::CNode*` fails, it means that using the node to collect the namespaces declarations was not possible.\nYou can say:\n Could not use the namespace node in order to collect namespace declarations.", "timestamp": "2023-10-16 10:48:42.000000000"}, {"message": "Done", "timestamp": "2023-10-18 09:03:42.000000000"}]}
{"thread_id": "a021333b_05d7faaa", "url": "https://gerrit.libreoffice.org/#/c/core/+/157993/2/unoxml/source/xpath/xpathapi.cxx@277", "comments": [{"message": "You can say:\n xContextNode does not exist!", "timestamp": "2023-10-16 10:48:42.000000000"}, {"message": "Done", "timestamp": "2023-10-18 09:03:42.000000000"}]}
{"thread_id": "41606118_15681f23", "url": "https://gerrit.libreoffice.org/#/c/core/+/157993/2/unoxml/source/xpath/xpathapi.cxx@291", "comments": [{"message": "Either :\"No node and document found\" or \"No node and document are found\".", "timestamp": "2023-10-16 08:11:23.000000000"}, {"message": "Why node? It is true that the code gets node and the document, but here it only works on `pCDoc`, which is the document.\nYou can say:\n Interface pointer for the owner document of the xContextNode does not exist.", "timestamp": "2023-10-16 10:48:42.000000000"}, {"message": "Done", "timestamp": "2023-10-18 09:03:42.000000000"}]}
{"thread_id": "7e8828fd_936d0ad4", "url": "https://gerrit.libreoffice.org/#/c/core/+/157993/2/unoxml/source/xpath/xpathapi.cxx@294", "comments": [{"message": "You can say:\n xContextNode interface pointer does not exist.", "timestamp": "2023-10-16 10:48:42.000000000"}, {"message": "Done", "timestamp": "2023-10-18 09:03:42.000000000"}]}
{"thread_id": "67d787fc_6d300d8e", "url": "https://gerrit.libreoffice.org/#/c/core/+/157993/2/unoxml/source/xpath/xpathapi.cxx@299", "comments": [{"message": "\"point\" (since there's \"doesn't\" before)", "timestamp": "2023-10-16 08:11:23.000000000"}, {"message": "done", "timestamp": "2023-10-16 09:51:45.000000000"}, {"message": "Done", "timestamp": "2023-10-18 09:03:42.000000000"}]}
{"thread_id": "65ca5ca0_49849121", "url": "https://gerrit.libreoffice.org/#/c/core/+/157993/2/unoxml/source/xpath/xpathapi.cxx@379", "comments": [{"message": "You can use this message:\n Extension instance xExtension to be used by XPath does not exist.", "timestamp": "2023-10-16 10:48:42.000000000"}, {"message": "Done", "timestamp": "2023-10-18 09:03:42.000000000"}]}
{"thread_id": "82ca8a50_68495041", "url": "https://gerrit.libreoffice.org/#/c/core/+/158123/2/sc/source/ui/app/inputhdl.cxx@3084", "comments": [{"message": "ImplCreateEditEngine only does something if mpEditEngine doesn't exist, so presumably mpEditEngine will remain null in the case that was crashing and the following GetEditText \n\nis\n\nstatic OUString GetEditText(const EditEngine* pEng)\n{   \n    return ScEditUtil::GetMultilineString(*pEng);\n}\n\nso I imagine we end up dereffing a null later if we stop dereffing the current one\n\nmaybe we should return early here if we have no mpEditEngine?", "timestamp": "2023-10-18 19:04:49.000000000"}, {"message": "> \n> maybe we should return early here if we have no mpEditEngine?\n\nProbably we should just return early right at the top if there is no pActiveViewSh", "timestamp": "2023-10-19 06:38:34.000000000"}]}
{"thread_id": "63d9218a_ddf8ef17", "url": "https://gerrit.libreoffice.org/#/c/core/+/157911/18/sw/qa/core/fields/fields.cxx@239", "comments": [{"message": "It's nice when you can build the doc model with C++ calls, thanks for not always just loading form a file.\n\nNit: it's useful to split the test to 3 parts in this case:\n\n- \"given\" part: build the doc model\n\n- \"when\" part: perform an interesting action\n\n- \"then\" part: do your asserts\n\nIn this test, it's a bit unclear where is the boundary between the 3 parts.", "timestamp": "2023-10-19 06:18:12.000000000"}]}
{"thread_id": "a0c98f97_55f7f04b", "url": "https://gerrit.libreoffice.org/#/c/core/+/157911/18/sw/source/core/fields/reffld.cxx@1339", "comments": [{"message": "The old 2 lines were the code style of the surrounding code, the new one is foreign here. :-)", "timestamp": "2023-10-19 06:18:12.000000000"}]}
{"thread_id": "2b95d1dc_82b05d0e", "url": "https://gerrit.libreoffice.org/#/c/core/+/158107/2/dbaccess/source/core/dataaccess/datasource.cxx@1173", "comments": [{"message": "The comment gets obsoleted by the change. Also, now it's possible to assign the result of 'new' directly to m_pImpl->m_xSharedConnectionManager, without the intermediate variable, which was used only to keep the type information, while being exception-safe (using the smart pointer). So it would basically one line now.", "timestamp": "2023-10-18 17:08:11.000000000"}, {"message": "Oups, I was too focused on the code :-)\n\nI removed the anonymous namespace since it triggers some pb on Jenkins Linux.\nI hadn't this pb locally.", "timestamp": "2023-10-18 19:05:46.000000000"}]}
{"thread_id": "1b6f1340_a110a7f2", "url": "https://gerrit.libreoffice.org/#/c/core/+/158107/3/dbaccess/source/core/dataaccess/datasource.cxx@1173", "comments": [{"message": "Please do not keep the intermediate reference. The creation of the reference, then destruction, with interlocked refcount management, is not needed.\n\n            m_pImpl->m_xSharedConnectionManager = new OSharedConnectionManager( m_pImpl->m_aContext );", "timestamp": "2023-10-18 20:05:12.000000000"}, {"message": "Indeed!\nDone now", "timestamp": "2023-10-18 20:11:03.000000000"}]}
{"thread_id": "2296c6d6_95eefa92", "url": "https://gerrit.libreoffice.org/#/c/core/+/157906/6/sc/source/ui/view/output2.cxx@2208", "comments": [{"message": "Two turning off undos? was there something else useful to disable ? =)", "timestamp": "2023-10-18 14:43:57.000000000"}, {"message": "Haha! Good spotting. Bad rebase there.", "timestamp": "2023-10-18 15:37:46.000000000"}]}
{"thread_id": "d1bc7a7d_3da8fac2", "url": "https://gerrit.libreoffice.org/#/c/core/+/158023/1/lingucomponent/source/spellcheck/languagetool/languagetoolimp.cxx@234", "comments": [{"message": "I suppose that it would be more performant if you move the call to encodeTextForLanguageTool into the 'else' branch: keep only the variable declaration here. This way, in Duden case, it won't spend time on useless encoding.", "timestamp": "2023-10-16 13:10:11.000000000"}, {"message": "Thanks for checking :) I updated it.", "timestamp": "2023-10-16 14:21:48.000000000"}, {"message": "Done", "timestamp": "2023-10-16 14:22:06.000000000"}]}
{"thread_id": "ef337093_5c2f7ca9", "url": "https://gerrit.libreoffice.org/#/c/core/+/157527/2/writerfilter/source/dmapper/DomainMapper_Impl.cxx@1881", "comments": [{"message": "Alternatively, could set the default to TEXT (as per documentation)\nand then set to margin if nY or nVertOrient. Same end result.\n\nHowever, I think this way is \"best\" since Word saves NOTHING for value \"margin\".", "timestamp": "2023-10-17 11:45:46.000000000"}]}
{"thread_id": "9d1cb190_a75a5191", "url": "https://gerrit.libreoffice.org/#/c/core/+/138652/6/oox/source/drawingml/shape.cxx@838", "comments": [{"message": "greater than", "timestamp": "2022-08-30 13:28:52.000000000"}]}
{"thread_id": "8e3a7dfd_0dad7e04", "url": "https://gerrit.libreoffice.org/#/c/core/+/138652/6/oox/source/drawingml/shape.cxx@1266", "comments": [{"message": "actual table height is known.", "timestamp": "2022-08-30 13:28:52.000000000"}, {"message": "Ack", "timestamp": "2022-08-31 08:45:04.000000000"}]}
{"thread_id": "85e79d34_860ab7a5", "url": "https://gerrit.libreoffice.org/#/c/core/+/138652/6/oox/source/drawingml/shape.cxx@1504", "comments": [{"message": "Powerpoint has given us a minimum table height. Determine the final height now.", "timestamp": "2022-08-30 13:28:52.000000000"}, {"message": "I agree, I think explaining the whole problem in this way makes more sense (i.e. Powerpoint gave us minimum (or desired?) row heights & table height, so now we need to expand it to fit the content)", "timestamp": "2022-08-31 08:45:04.000000000"}]}
{"thread_id": "16fdbaa0_d5a5e61e", "url": "https://gerrit.libreoffice.org/#/c/core/+/138652/4/sd/qa/unit/export-tests-ooxml2.cxx@445", "comments": [{"message": "I assume this is just noise, did you consider adding an actual test for this code change? Thanks.", "timestamp": "2022-08-30 06:45:21.000000000"}, {"message": "Added the test now.", "timestamp": "2022-08-30 08:16:56.000000000"}]}
{"thread_id": "bb5fc1a4_75e060c9", "url": "https://gerrit.libreoffice.org/#/c/core/+/138652/7/sd/qa/unit/import-tests2.cxx@2108", "comments": [{"message": "At <https://github.com/flathub/org.libreoffice.LibreOffice/pull/260#issuecomment-1761492069> \"Update runtime to 23.08\" -> <https://buildbot.flathub.org/#/builders/5/builds/9064> I see this fail with\n\n  Test name: testTdf144092TableHeight::TestBody\n  equality assertion failed\n  - Expected: 7208\n  - Actual  : 7957\n\nand I notice that sd/qa/unit/data/pptx/tdf144092-tableHeight.pptx contains references to font Calibri, which is presumably replaced with whatever best approximation on a given system.\n\nAny easy way to make this more robust?", "timestamp": "2023-10-13 13:53:20.000000000"}, {"message": "Ah, changing the font in sd/qa/unit/data/pptx/tdf144092-tableHeight.pptx to a font that is bundled with LibreOffice should help then right (if flatpak builds with those fonts)? Let me do that.", "timestamp": "2023-10-16 07:31:28.000000000"}]}
{"thread_id": "0e950a19_6da77242", "url": "https://gerrit.libreoffice.org/#/c/core/+/157973/2/sw/inc/calbck.hxx@430", "comments": [{"message": "Remove two empty lines from here, so only one empty line remains.", "timestamp": "2023-10-14 17:48:59.000000000"}, {"message": "Done", "timestamp": "2023-10-14 20:03:31.000000000"}, {"message": "Done", "timestamp": "2023-10-15 10:08:07.000000000"}]}
{"thread_id": "d049a791_a9f9990c", "url": "https://gerrit.libreoffice.org/#/c/core/+/154761/11/sw/source/core/edit/eddel.cxx@375", "comments": [{"message": "There is no need to have redundant comments for the code that speaks for itself.", "timestamp": "2023-10-13 16:11:53.000000000"}, {"message": "Ack", "timestamp": "2023-10-14 18:28:43.000000000"}]}
{"thread_id": "f00b4db4_efaa3a0b", "url": "https://gerrit.libreoffice.org/#/c/core/+/154761/11/sw/source/core/edit/eddel.cxx@381", "comments": [{"message": "This \"number\" is taken from the comment in ChgTextToNum. There, it was about number; here, it's about some arbitrary text.", "timestamp": "2023-10-13 16:11:53.000000000"}, {"message": "Ack", "timestamp": "2023-10-14 18:28:43.000000000"}]}
{"thread_id": "670dcc88_5baebaf9", "url": "https://gerrit.libreoffice.org/#/c/core/+/154761/11/sw/source/core/edit/eddel.cxx@382", "comments": [{"message": "GetText is expensive in SwPaM. You call it repeatedly here - please use a local variable, and only call it once per iteration.", "timestamp": "2023-10-13 16:11:53.000000000"}, {"message": "Ack", "timestamp": "2023-10-14 18:28:43.000000000"}]}
{"thread_id": "fcf8483e_ecc3a7d2", "url": "https://gerrit.libreoffice.org/#/c/core/+/154761/11/sw/source/core/edit/eddel.cxx@382", "comments": [{"message": "It is unneeded to construct OUStringChar from the character - you may use the character directly.\n\nAdditionally, it is unnecessary to pass the string length as the position to start - it is the default.\n\nThe call should be simple\n\n        sal_Int32 nCommentPos(pCursor->GetText().lastIndexOf(CH_TXTATR_INWORD));", "timestamp": "2023-10-13 17:11:14.000000000"}, {"message": "Ack", "timestamp": "2023-10-14 18:28:43.000000000"}]}
{"thread_id": "ecadbc42_a55d1c3f", "url": "https://gerrit.libreoffice.org/#/c/core/+/154761/11/sw/source/core/edit/eddel.cxx@386", "comments": [{"message": "I believe that it might be not a word, but, again, some arbitrary text including spaces - it might be called in grammar correction, for whole sentences", "timestamp": "2023-10-13 16:11:53.000000000"}, {"message": "Ack", "timestamp": "2023-10-14 18:28:43.000000000"}]}
{"thread_id": "b9b715c7_7bfd84e7", "url": "https://gerrit.libreoffice.org/#/c/core/+/154761/11/sw/source/core/edit/eddel.cxx@392", "comments": [{"message": "Please no commented out code - it is either needed, or not. If really required, please have comments explaining why it is commented out here.", "timestamp": "2023-10-13 16:11:53.000000000"}, {"message": "Ack", "timestamp": "2023-10-14 18:28:43.000000000"}]}
{"thread_id": "ab4fdd6d_1364cef6", "url": "https://gerrit.libreoffice.org/#/c/core/+/154761/11/sw/source/core/edit/eddel.cxx@402", "comments": [{"message": "In sw/source/uibase/shells/textsh1.cxx, the last Replace happened also in case when GetCursor returned nullptr - is this change intentional? Why?", "timestamp": "2023-10-13 16:11:53.000000000"}, {"message": "Do you mean the Replace(rNewStr, false) call inside SwEditShell::ReplaceKeepComments (file: sw/source/core/edit/eddel.cxx) as shown on the right or this one in textsh1.cxx:\nhttps://opengrok.libreoffice.org/xref/core/sw/source/uibase/shells/textsh1.cxx?r=5bf7c2fa#2150 ?\nOn the right the Replace-call is inside \"if(pCursor != nullptr) { ... }\". However, it is outside \"if(pCursor->HasMark()) { ... }\". The SwEditShell::Replace() method looks like nothing serious will happen in case there is no selection. The original version in textsh1.cxx calls it always.\nAnyway, I moved this call inside \"if(pCursor->HasMark()) { ... }\", just to go sure.", "timestamp": "2023-10-14 18:28:43.000000000"}, {"message": "> Do you mean the Replace(rNewStr, false) call inside SwEditShell::ReplaceKeepComments (file: sw/source/core/edit/eddel.cxx) as shown on the right or this one in textsh1.cxx:\n> https://opengrok.libreoffice.org/xref/core/sw/source/uibase/shells/textsh1.cxx?r=5bf7c2fa#2150 ?\n\nSince I wrote \"In sw/source/uibase/shells/textsh1.cxx\", I likely meant the latter ;)\n\n> On the right the Replace-call is inside \"if(pCursor != nullptr) { ... }\". However, it is outside \"if(pCursor->HasMark()) { ... }\". The SwEditShell::Replace() method looks like nothing serious will happen in case there is no selection. The original version in textsh1.cxx calls it always.\n> Anyway, I moved this call inside \"if(pCursor->HasMark()) { ... }\", just to go sure.\n\nSure in what? This is my question - I didn't really looked inside the method yet, so to me, \"to be sure\" means \"behave more like the previous code behaved\". But indeed, if it would be a no-op for \"no mark\" case, it will be fine.", "timestamp": "2023-10-14 18:42:52.000000000"}, {"message": "Go sure, that the case \"no mark\" is caught and handled (here: handled as no operation). Before patch set 12 I indeed wanted it to behave more like the previous code behaved - this is why it was outside \"if(pCursor->HasMark()) { ... }\". I looked inside SwEditShell::Replace() and found it to be save, since it also checks for \"HasMark()\". But on the other side I didn't check every function call inside Replace(). This is why I now moved the Replace() call inside \"if(pCursor->HasMark()) { ... }\".", "timestamp": "2023-10-14 21:19:34.000000000"}, {"message": "Thanks - it makes sense.", "timestamp": "2023-10-15 05:42:05.000000000"}]}
{"thread_id": "7c0b23c0_f1b2502e", "url": "https://gerrit.libreoffice.org/#/c/core/+/154761/11/sw/source/core/edit/eddel.cxx@403", "comments": [{"message": "Another commented out code", "timestamp": "2023-10-13 16:11:53.000000000"}, {"message": "Ack", "timestamp": "2023-10-14 18:28:43.000000000"}]}
{"thread_id": "083c00f6_83468c63", "url": "https://gerrit.libreoffice.org/#/c/core/+/154761/3/sw/source/uibase/shells/textsh1.cxx@2069", "comments": [{"message": "This looks like a leftover from debugging?", "timestamp": "2023-07-22 19:26:06.000000000"}, {"message": "You're right. This is a debug comment I forgot to delete - sorry. I'll remove it when working on the issue above.", "timestamp": "2023-07-23 18:42:36.000000000"}, {"message": "Done", "timestamp": "2023-10-13 16:11:53.000000000"}]}
{"thread_id": "82ee6921_01f5a189", "url": "https://gerrit.libreoffice.org/#/c/core/+/157960/1/sw/source/uibase/utlui/navipi.cxx@741", "comments": [{"message": "we need to check the return for success, I'll get this in a later follow up", "timestamp": "2023-10-14 19:51:19.000000000"}]}
{"thread_id": "be11fe78_7ba8370b", "url": "https://gerrit.libreoffice.org/#/c/core/+/128506/14/starmath/source/view.cxx@767", "comments": [{"message": "I\u2019m trying to get non-ASCII input working on desktop, which seems to not work currently because this code is in the `else` branch and it never gets called for me. So I\u2019m wondering what is the reason it is in the `else` branch, and whether I should instead move it out of the `if` block at all and use `SmViewShell::IsInlineEditEnabled()` instead of `comphelper::LibreOfficeKit::isActive()`?", "timestamp": "2023-08-30 20:00:43.000000000"}, {"message": "I am very sorry for the late reply. Somehow my dashboard had \"items that need your attention\" hidden.\nIt was likely done this way, because I only tested one scenario. I am sure that you were right when you implemented your proposal in https://gerrit.libreoffice.org/c/core/+/156331 - thank you!", "timestamp": "2023-10-14 14:21:03.000000000"}]}
{"thread_id": "f1168a19_0ab75959", "url": "https://gerrit.libreoffice.org/#/c/core/+/157935/1/oox/qa/unit/shape.cxx@375", "comments": [{"message": "This and the following changes are not about color, please change them back", "timestamp": "2023-10-13 12:51:43.000000000"}, {"message": "Done", "timestamp": "2023-10-13 17:11:14.000000000"}]}
{"thread_id": "b4a01259_4feb29fa", "url": "https://gerrit.libreoffice.org/#/c/core/+/157935/4/oox/qa/unit/shape.cxx@375", "comments": [{"message": "Please fix typos", "timestamp": "2023-10-13 15:22:45.000000000"}, {"message": "Done", "timestamp": "2023-10-13 17:11:14.000000000"}]}
{"thread_id": "95e18a25_06b11c0b", "url": "https://gerrit.libreoffice.org/#/c/core/+/157935/6/oox/qa/unit/shape.cxx@384", "comments": [{"message": "You removed the empty line here and you undid the improvement to the commit message", "timestamp": "2023-10-13 15:58:03.000000000"}, {"message": "Done", "timestamp": "2023-10-13 17:11:14.000000000"}]}
{"thread_id": "013a819d_3f270256", "url": "https://gerrit.libreoffice.org/#/c/core/+/157201/1/i18npool/source/breakiterator/breakiterator_unicode.cxx@150", "comments": [{"message": "Something like:\n\n    throw uno::RuntimeException(\"Failed to set application data for OpenOffice: error \" + OUString::createFromAscii(u_errorName(status)));", "timestamp": "2023-09-29 14:01:10.000000000"}, {"message": "Or maybe even better - replace the \"Failed to set application data for OpenOffice\" with this shorter text:\n\n    \"udata_setAppData returned error \" + OUString::createFromAscii(u_errorName(status))", "timestamp": "2023-09-29 14:02:41.000000000"}, {"message": "Done", "timestamp": "2023-09-30 05:22:45.000000000"}]}
{"thread_id": "87193a35_2596e85a", "url": "https://gerrit.libreoffice.org/#/c/core/+/157201/5/i18npool/source/breakiterator/breakiterator_unicode.cxx@284", "comments": [{"message": "This one doesn't need the u_errorName(status), because the only place in the lop where it may be ser to an error, is already checked ay line 277 above. This is not about \"!U_SUCCESS(status)\", so please revert this line to a simple \"ICU BreakIterator is not properly initialized\".", "timestamp": "2023-09-30 06:12:37.000000000"}, {"message": "ok sir", "timestamp": "2023-09-30 06:26:43.000000000"}, {"message": "Done", "timestamp": "2023-10-13 14:05:37.000000000"}]}
{"thread_id": "8963ffba_93e3a9f5", "url": "https://gerrit.libreoffice.org/#/c/core/+/155746/1/xmlsecurity/source/dialogs/certificatechooser.cxx@222", "comments": [{"message": "Could be a const", "timestamp": "2023-08-22 12:11:42.000000000"}]}
{"thread_id": "8de99741_f5dc28ba", "url": "https://gerrit.libreoffice.org/#/c/core/+/154500/7/framework/source/services/autorecovery.cxx@b1649", "comments": [{"message": "This is needed so an API call can change the interval.\nSee framework/qa/complex/framework/autosave/AutoSave.java", "timestamp": "2023-07-19 19:41:33.000000000"}, {"message": "Note that every change in the listened org.openoffice.Office.Recovery, arriving here, no matter if handled here or not, results in a call to implts_updateTimer in line 1659 (1649 after the change). And the latter reads the AutoSave/TimeIntervall, whenever (m_eTimerType == AutoRecovery::E_NORMAL_AUTOSAVE_INTERVALL). So no, this code is not needed, but an API can change the interval nevertheless :)", "timestamp": "2023-07-19 20:27:55.000000000"}, {"message": "No, these aren't permanent changes - just temporary changes that are NOT to the actual config itself, but simply requests to autorecover to ignore the config settings and use the provided settings.\nThe key example is \"disable autosave\" while running powerpoint presentations. (Sure, that one doesn't change the time interval, but the same principle.)", "timestamp": "2023-07-19 20:45:02.000000000"}, {"message": "Sorry - could you please elaborate, how could any API call arrive here without actual change of the config itself? This is the listener's callback function, that is only called by the root access' change notification.", "timestamp": "2023-07-19 21:11:38.000000000"}, {"message": "Perhaps I am wrong. Unfortunately I didn't find a way to trigger the powerpoint call, so I only have what I could get from a code read (and basically I can't follow a code read that involves all these messages). I did not expect that Impress would be making an actual, permanent change to the config. (Imagine what would happen if Impress crashed during the presentation, and thus autosave is permanently turned off\").\n\n(The autosave call is in sd/source/ui/slideshow/slideshowimpl.cxx)\n\nIt looks to me like it is sending the message directly to autosave\nuno::Reference< frame::XDispatch > xAutoSave = frame::theAutoRecovery::get(xContext);\n        xAutoSave->dispatch(aURL, aArgs);", "timestamp": "2023-07-19 21:20:40.000000000"}, {"message": "Yes, that will arrive to AutoRecovery::dispatch. The same mechanism could be created for other cases; but the code that we were discussing was (and is) only about the permanent config changes.", "timestamp": "2023-07-19 21:29:29.000000000"}, {"message": "OK - I see it now. Thanks for your patience.", "timestamp": "2023-07-19 21:47:49.000000000"}]}
{"thread_id": "de65d3c2_afd89d95", "url": "https://gerrit.libreoffice.org/#/c/core/+/156179/1/sw/source/core/doc/DocumentRedlineManager.cxx@2903", "comments": [{"message": "Potential problems:\n\n\u2013 anonymized redlines have the same time (1970-01-01 00:00:00), so it's better to skip them using IsAnonymized();\n\n\u2013 acception of a single redline of a tracked columns will trigger the acception of the others in the column, too, breaking the cycle variable;\n\n\u2013 acception of redlines before the selected one can crash the Manage Changes dialog\n\nMaybe the best solution is to accept/reject only the neigbouring redlines (after the selected one, if the third problem can occur). (neighbouring = adjacent)", "timestamp": "2023-08-29 13:25:24.000000000"}]}
{"thread_id": "cb9d8926_fe9d4a35", "url": "https://gerrit.libreoffice.org/#/c/core/+/156179/11/sw/source/core/doc/DocumentRedlineManager.cxx@2849", "comments": [{"message": "my clang build warns on this line of...\n\nsw/source/core/doc/DocumentRedlineManager.cxx error: '&&' within '||' [-Werror,-Wlogical-op-parentheses]\ntRedlineData(0).CanCombineForAcceptReject(pOther->GetRedlineData(1)))\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsw/source/core/doc/DocumentRedlineManager.cxx note: place parentheses around the '&&' expression to silence this warning\n                   && pTmp->GetRedlineData(0).CanCombineForAcceptReject(pOther->GetRedlineData(1)))\n                   \nIn any case, the massive if set of conditions is hard to read. What is maybe better, is to add another little local function which takes pOther, pTmp, pPamStart, pPamEnd as arguments and that can return false early on each failed condition with\n\n...\n if (!pOther->IsVisible())\n     false;\n...\netc, to give a simpler if statement here and it would be easier to read in that local function a list of 'if this single condition doesn't hold \"return false\"' rather than a 'if this big list of conditions hold \"return true\"'. Writer is terrible in it's habit of the complicated mega-lists of conditions in ifs :-(", "timestamp": "2023-10-10 09:30:02.000000000"}, {"message": "Done\nThx for the report. I was able to make 1 general function for both case... but i had to make some more parameters .. \nBut in then next PR (movement) i refactored it a bit (changed PaM's to redline indexes, and moved to a more general place, so move can use it too).. so i have to change it there too.. and the final version will be there.", "timestamp": "2023-10-12 21:42:46.000000000"}]}
{"thread_id": "2cba557e_631d8be9", "url": "https://gerrit.libreoffice.org/#/c/core/+/156179/11/sw/source/core/doc/DocumentRedlineManager.cxx@2861", "comments": [{"message": "and same warning here", "timestamp": "2023-10-10 09:30:02.000000000"}, {"message": "Done", "timestamp": "2023-10-12 21:42:46.000000000"}]}
{"thread_id": "454950b9_e4670f3c", "url": "https://gerrit.libreoffice.org/#/c/core/+/156179/12/sw/source/core/doc/DocumentRedlineManager.cxx@2835", "comments": [{"message": "can put this in an anonymous namespace, or just stick static in front of it", "timestamp": "2023-10-12 19:10:56.000000000"}, {"message": "Thx!\nI was not aware that it is needed.. \nbut now i realized we try to save ourself from random name collision with it!", "timestamp": "2023-10-13 06:33:58.000000000"}]}
{"thread_id": "8a180155_0c409416", "url": "https://gerrit.libreoffice.org/#/c/core/+/156179/12/sw/source/core/doc/DocumentRedlineManager.cxx@2851", "comments": [{"message": "needs to be return false here", "timestamp": "2023-10-12 19:10:56.000000000"}, {"message": "Thx for the catch!\nWithout the return it was meaningless.. :)", "timestamp": "2023-10-13 06:33:58.000000000"}]}
{"thread_id": "80b5ecb2_f90dafe4", "url": "https://gerrit.libreoffice.org/#/c/core/+/156179/12/sw/source/core/doc/DocumentRedlineManager.cxx@2979", "comments": [{"message": "I just forgot the return value here... that is needed to decide if compress is needed.", "timestamp": "2023-10-13 06:33:58.000000000"}]}
{"thread_id": "9b01ae58_dd1d595e", "url": "https://gerrit.libreoffice.org/#/c/core/+/156179/12/sw/source/core/doc/DocumentRedlineManager.cxx@3198", "comments": [{"message": "might as well ditch this line I guess", "timestamp": "2023-10-12 19:10:56.000000000"}, {"message": "Thx for the catch!\nit was needed before i refactored it... and forgot to delete.", "timestamp": "2023-10-13 06:33:58.000000000"}]}
{"thread_id": "a4cd8a79_e201b301", "url": "https://gerrit.libreoffice.org/#/c/core/+/156179/12/sw/source/core/doc/DocumentRedlineManager.cxx@3226", "comments": [{"message": "And forgot the return value here too...", "timestamp": "2023-10-13 06:33:58.000000000"}]}
{"thread_id": "576e6bff_1dd6807e", "url": "https://gerrit.libreoffice.org/#/c/core/+/157831/2/sc/source/ui/view/output2.cxx@1493", "comments": [{"message": "yeah, like that. The only thing I worry about is that mpDev can be set in ScOutputData::SetContentDevice and I see that used in a fairly complicated place in sc/source/ui/view/gridwin4.cxx on some \"pTargetPaintWindow\" so I worry that we might be changing the LayoutMode of some OutputDevice we don't really own. I think its safer to restore the original LayoutMode when we leave this method, we could reuse the ScopeGuard above to do this.", "timestamp": "2023-10-12 20:12:54.000000000"}, {"message": "Ok, I will add the scope guard to restore and do not worry with other cases =)", "timestamp": "2023-10-12 20:19:55.000000000"}]}
{"thread_id": "2aa6591d_d3146499", "url": "https://gerrit.libreoffice.org/#/c/core/+/156912/37/sw/source/core/fields/reffld.cxx@361", "comments": [{"message": "Would it be possible to not reformat surrounding code? This change is rather large, it's good to not do more changes than necessary.", "timestamp": "2023-10-12 07:11:07.000000000"}, {"message": "Done", "timestamp": "2023-10-12 15:18:56.000000000"}]}
{"thread_id": "1e60552e_f7a0aaf4", "url": "https://gerrit.libreoffice.org/#/c/core/+/156912/37/sw/source/core/fields/reffld.cxx@1207", "comments": [{"message": "I assume this picks the first matching text node from a stack or queue, would be good to add a one-liner doxygen comment for the function. Also, should this go to an anonymous namespace or be static?", "timestamp": "2023-10-12 07:11:07.000000000"}, {"message": "Done the documentation comment, good call on the anonymous namespace- I've done that too", "timestamp": "2023-10-12 15:18:56.000000000"}]}
{"thread_id": "39e71b15_96a3e4c0", "url": "https://gerrit.libreoffice.org/#/c/core/+/156912/37/sw/source/core/fields/reffld.cxx@1370", "comments": [{"message": "If the doc has lots of footnotes, and lots of styleref fields, then this will be quadratic. One optimization you could use here is a fast way to see if pSelf is in the footnote (low level) section or not. See sw/README.md:64 on these sections. And then you could have an \"is in footnote\" check just by checking if the node is > rDoc.GetNodes().GetEndOfPostIts() and is < rDoc.GetNodes().GetEndOfInserts().", "timestamp": "2023-10-12 07:11:07.000000000"}, {"message": "Re-reading this code, you do need the loop in case you're in a footnote, since you want to set pReference based on it. But you can still avoid entering that loop in case you're not in a footnote (and you can detect this case with a cheap check based on the SwNodes section, as mentioned above).\n\nBut this is OK to do in a follow-up change, I would say.", "timestamp": "2023-10-13 07:14:51.000000000"}]}
{"thread_id": "30c483dc_e4706aa0", "url": "https://gerrit.libreoffice.org/#/c/core/+/156912/37/sw/source/core/fields/reffld.cxx@1416", "comments": [{"message": "Please use SAL_WARN() in new code.", "timestamp": "2023-10-12 07:11:07.000000000"}, {"message": "Done", "timestamp": "2023-10-12 15:18:56.000000000"}]}
{"thread_id": "a30756f6_e7e09d18", "url": "https://gerrit.libreoffice.org/#/c/core/+/156912/37/sw/source/core/fields/reffld.cxx@1430", "comments": [{"message": "Rather have an if (pPageStartFrame) block outside and have the current else if / else inside it.", "timestamp": "2023-10-12 07:11:07.000000000"}, {"message": "Done", "timestamp": "2023-10-12 15:18:56.000000000"}]}
{"thread_id": "f000a8bc_685ef354", "url": "https://gerrit.libreoffice.org/#/c/core/+/156912/37/sw/source/core/fields/reffld.cxx@1442", "comments": [{"message": "Same here.", "timestamp": "2023-10-12 07:11:07.000000000"}, {"message": "Done", "timestamp": "2023-10-12 15:18:56.000000000"}]}
{"thread_id": "c0f35d47_bef86b52", "url": "https://gerrit.libreoffice.org/#/c/core/+/156912/37/sw/source/core/fields/reffld.cxx@1460", "comments": [{"message": "I wonder if it would be simpler to also go with a queue here. And then you could avoid all the std::visit template magic above.", "timestamp": "2023-10-12 07:11:07.000000000"}, {"message": "Done", "timestamp": "2023-10-12 15:18:56.000000000"}]}
{"thread_id": "08d16866_79b4bb6c", "url": "https://gerrit.libreoffice.org/#/c/core/+/156912/41/sw/source/core/fields/reffld.cxx@1460", "comments": [{"message": "Did you consider not scanning the entire nodes array? I would expect it's possible to optimize this a little, so you start from the text node containing the field, and then you would iterate towards the start or end of the nodes array. Something to consider in a follow-up change.", "timestamp": "2023-10-13 07:14:51.000000000"}]}
{"thread_id": "696a4e52_a8ee4460", "url": "https://gerrit.libreoffice.org/#/c/core/+/156912/41/sw/source/core/fields/reffld.cxx@1539", "comments": [{"message": "Same here.", "timestamp": "2023-10-13 07:14:51.000000000"}]}
{"thread_id": "605b87ba_c26c99da", "url": "https://gerrit.libreoffice.org/#/c/core/+/156912/37/sw/source/core/unocore/unofield.cxx@1528", "comments": [{"message": "Could you please avoid the unnecessary reformat of existing content?", "timestamp": "2023-10-12 07:11:07.000000000"}, {"message": "Done", "timestamp": "2023-10-12 15:18:56.000000000"}]}
{"thread_id": "28843d91_0be9b43a", "url": "https://gerrit.libreoffice.org/#/c/core/+/156912/37/sw/source/filter/ww8/ww8par5.cxx@2159", "comments": [{"message": "Unnecessary reformat. Please keep existing code unformatted if possible.", "timestamp": "2023-10-12 07:11:07.000000000"}, {"message": "Done", "timestamp": "2023-10-12 15:18:56.000000000"}]}
{"thread_id": "b7ed4d84_fe9eb836", "url": "https://gerrit.libreoffice.org/#/c/core/+/156912/37/sw/source/ui/fldui/fldref.cxx@1131", "comments": [{"message": "Please use SAL_WARN() in new code.", "timestamp": "2023-10-12 07:11:07.000000000"}, {"message": "Done", "timestamp": "2023-10-12 15:18:56.000000000"}]}
{"thread_id": "0dc47f0a_8232d819", "url": "https://gerrit.libreoffice.org/#/c/core/+/157849/3/dbaccess/source/ui/dlg/directsql.cxx@342", "comments": [{"message": "Just wonder we could remove the \"else\" part in \"BIT case\" and put the \"break\"  in the \"if\" part so we wouldn't have this line twice:\nout.append(xRow->getString(i) + \",\");\n\nThe diff would be:\ndiff --git a/dbaccess/source/ui/dlg/directsql.cxx b/dbaccess/source/ui/dlg/directsql.cxx\nindex eab893e4e4b1..3e4b16fc8457 100644\n--- a/dbaccess/source/ui/dlg/directsql.cxx\n+++ b/dbaccess/source/ui/dlg/directsql.cxx\n@@ -336,16 +336,15 @@ namespace dbaui\n                             if ((seq.getLength() == 1) && (seq[0] >= 0) && (seq[0] <= 1))\n                             {\n                                 out.append(OUString::number(static_cast<int>(seq[0])) + \",\");\n+                                break;\n                             }\n-                            else\n-                            {\n-                                out.append(xRow->getString(i) + \",\");\n-                            }\n-                            break;\n+                            // FALLTHROUGH intended since we should use getString from now\n+                            [[fallthrough]];\n                         }\n                         // for the rest, be dumb, treat everything as a string\n                         default:\n                             out.append(xRow->getString(i) + \",\");\n+                            break;\n                     }\n                 }\n             }\n\n\nbut does it worth ?", "timestamp": "2023-10-12 14:23:05.000000000"}, {"message": "No hurry.", "timestamp": "2023-10-13 06:35:49.000000000"}]}
{"thread_id": "b8ae030c_bd7bf7be", "url": "https://gerrit.libreoffice.org/#/c/core/+/157721/1/sc/source/core/data/attarray.cxx@213", "comments": [{"message": "Looks good - but to help other users =) should we not check that nLo is now between 0 and nHi ? =)", "timestamp": "2023-10-10 11:47:02.000000000"}, {"message": "Done, added assert.", "timestamp": "2023-10-11 05:28:58.000000000"}]}
{"thread_id": "ea06a8b5_f77b0d2d", "url": "https://gerrit.libreoffice.org/#/c/core/+/157819/4/sc/source/core/data/broadcast.cxx@50", "comments": [{"message": "I believe that this index-based approach could be fragile, basically the numbers becoming magic constants depending on the order of declaration elsewhere.\n\nPossibly use of std::holds_alternative<ScFormulaCell*>(pData) could be more telling?", "timestamp": "2023-10-12 07:23:54.000000000"}, {"message": "Or\n\n        if (auto pFC = std::get_if<const ScFormulaCell*>(rLis.pData))", "timestamp": "2023-10-12 07:25:13.000000000"}]}
{"thread_id": "b41f4e0b_97c2dc1a", "url": "https://gerrit.libreoffice.org/#/c/core/+/155335/2/oox/source/ppt/pptshape.cxx@460", "comments": [{"message": "setText shouldn't be used here, otherwise the text is displayed in slideshow mode.\nSee https://bugs.documentfoundation.org/show_bug.cgi?id=157679", "timestamp": "2023-10-10 09:26:50.000000000"}]}
{"thread_id": "5ef1e770_722fa50a", "url": "https://gerrit.libreoffice.org/#/c/core/+/157689/2/sfx2/source/commandpopup/CommandPopup.cxx@54", "comments": [{"message": "Either make it a u16 string view instead of OUString; or use _ustr postfix to use compile-time constexpr OUString literals. In the current form, it makes unnecessary allocations here; and they are actually unneeded, because they will be used inside concatenation, which is just as efficient with simple string views.", "timestamp": "2023-10-09 06:49:24.000000000"}, {"message": "Done", "timestamp": "2023-10-09 15:47:30.000000000"}]}
{"thread_id": "5e131843_cce60ecc", "url": "https://gerrit.libreoffice.org/#/c/core/+/157689/3/sfx2/source/commandpopup/CommandPopup.cxx@89", "comments": [{"message": "Now let me nitpick on a pre-existing oddity: instead of the idiomatic\n\n    a += b;\n\nthe code uses\n\n    a = a + b;", "timestamp": "2023-10-09 07:04:04.000000000"}, {"message": "Ah - sorry, I was wrong, it's actually\n\n    a = b + c", "timestamp": "2023-10-09 07:05:31.000000000"}]}
{"thread_id": "a7390246_43eb9ba4", "url": "https://gerrit.libreoffice.org/#/c/core/+/136192/25/sw/inc/textboxhelper.hxx@183", "comments": [{"message": "formats", "timestamp": "2022-07-08 09:31:30.000000000"}, {"message": "Done", "timestamp": "2022-07-08 09:51:32.000000000"}]}
{"thread_id": "f6563e50_1a42b8a0", "url": "https://gerrit.libreoffice.org/#/c/core/+/136192/25/sw/inc/textboxhelper.hxx@183", "comments": [{"message": "typo", "timestamp": "2022-07-08 09:31:30.000000000"}, {"message": "is this the same with the formats? Sorry but i can see the other typo. :)\nUpdate i finally found it! sorry :) fist -> first unfortunately the whole line was marked, i think because of the previous comment. But fixed.", "timestamp": "2022-07-08 09:51:32.000000000"}]}
{"thread_id": "d4de1a35_ed19bb37", "url": "https://gerrit.libreoffice.org/#/c/core/+/136192/25/sw/source/core/doc/textboxhelper.cxx@1833", "comments": [{"message": "typo", "timestamp": "2022-07-08 09:31:30.000000000"}, {"message": "Done", "timestamp": "2022-07-08 09:51:32.000000000"}]}
{"thread_id": "2b57be66_39bec408", "url": "https://gerrit.libreoffice.org/#/c/core/+/136192/25/sw/source/core/doc/textboxhelper.cxx@1845", "comments": [{"message": "typo", "timestamp": "2022-07-08 09:31:30.000000000"}, {"message": "Done", "timestamp": "2022-07-08 09:51:32.000000000"}]}
{"thread_id": "3468a783_4ed08e49", "url": "https://gerrit.libreoffice.org/#/c/core/+/136192/25/sw/source/core/doc/textboxhelper.cxx@1848", "comments": [{"message": "has", "timestamp": "2022-07-08 09:31:30.000000000"}, {"message": "Done", "timestamp": "2022-07-08 09:51:32.000000000"}]}
{"thread_id": "32d9a9ae_d4d6b08f", "url": "https://gerrit.libreoffice.org/#/c/core/+/136192/30/sw/source/core/doc/textboxhelper.cxx@1806", "comments": [{"message": "What does this try to check?\n\nThis crashes (fails assertion) currently in this scenario:\n\n1. Get the testdoc 'sw/qa/uitest/data/ComplexGroupShapeTest.odt' from https://gerrit.libreoffice.org/c/core/+/126052\n2. Enter the first group in the document\n3. Add text box to the first subobject there\n4. Exit group, and ungroup\n\n(basically, simplified UITest from there, removed in https://gerrit.libreoffice.org/c/core/+/126990).\n\nThe shared pointer can't have just \"plus one\" refcount, simply because it is copy-created e.g. in SwDoc::UnGroupSelection (std::shared_ptr<SwTextBoxNode> pTextBoxNode), and then in the argument to lcl_CollectTextBoxesForSubGroupObj called from there.\n\nAnd trying to change that (e.g., using const references) there looks wrong - simply because the idea of counting references of shared pointers is internally wrong. Either you expect it to be shared, or you use a different class.\n\nI'm going to remove this assertion for now.", "timestamp": "2023-01-31 08:47:09.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/146327", "timestamp": "2023-01-31 09:10:48.000000000"}]}
{"thread_id": "3e0eae6b_b00bf932", "url": "https://gerrit.libreoffice.org/#/c/core/+/136192/25/sw/source/core/layout/atrfrm.cxx@2562", "comments": [{"message": "Delete all of them.", "timestamp": "2022-07-08 09:31:30.000000000"}, {"message": "Done", "timestamp": "2022-07-08 09:51:32.000000000"}]}
{"thread_id": "39f52734_5b82cfc4", "url": "https://gerrit.libreoffice.org/#/c/core/+/157691/1/sw/source/core/layout/sortedobjs.cxx@222", "comments": [{"message": "If we are going to sort, we should probably do so before we call Contains(), which requires that the list be sorted ?", "timestamp": "2023-10-09 06:52:19.000000000"}, {"message": "Makes sense, fixed.\n\nAnd sure, not sorting here would be nice, but if nobody has time to track down where do we change properties that change the sorting key without re-sorting for a year, and if such a missing sort results in a crash, then sorting here is better than nothing, I would say. :-)", "timestamp": "2023-10-09 07:02:17.000000000"}]}
{"thread_id": "ffc1d374_5a297ded", "url": "https://gerrit.libreoffice.org/#/c/core/+/157686/1/include/test/idletask.hxx@30", "comments": [{"message": "possibly this should be std::atomic<bool> ? Or do we assume that it is only ouched on the main thread?", "timestamp": "2023-10-08 14:43:38.000000000"}, {"message": "I don't think there is any thread shenanigans here.", "timestamp": "2023-10-08 17:12:42.000000000"}]}
{"thread_id": "0cf11dfc_a912901a", "url": "https://gerrit.libreoffice.org/#/c/core/+/157377/10/include/test/xmltesttools.hxx@83", "comments": [{"message": "Please rename to smth like assertXPathDoubleValue - it is telling, not relying on the user guessing which overload does what.", "timestamp": "2023-10-05 06:27:18.000000000"}, {"message": "and don't pass types like `double` and `int` by `const&`\n\nand if this function is intended to be used to compare double values with a delta, I wouldn't make the delta parameter defaulted\n\nand the underlying cppunit `assertDoubleEquals` takes a `double` delta, why use `int` here?", "timestamp": "2023-10-05 06:47:07.000000000"}, {"message": "Done", "timestamp": "2023-10-05 10:15:41.000000000"}]}
{"thread_id": "00c33cc6_e8409c2e", "url": "https://gerrit.libreoffice.org/#/c/core/+/157377/10/test/source/xmltesttools.cxx@181", "comments": [{"message": "OUString::toDouble would be enough. If you need to check for errors, use rtl_math_uStringToDouble, which has a status out argument.", "timestamp": "2023-10-05 06:27:18.000000000"}, {"message": "Done", "timestamp": "2023-10-05 10:15:41.000000000"}]}
{"thread_id": "d4290df8_0a0f3387", "url": "https://gerrit.libreoffice.org/#/c/core/+/157377/10/test/source/xmltesttools.cxx@181", "comments": [{"message": "double pathValue = aValue.toDouble() would be good enough for our needs, I think.", "timestamp": "2023-10-05 06:26:23.000000000"}, {"message": "Done", "timestamp": "2023-10-05 10:15:41.000000000"}, {"message": "Thanks, I'm happy with the change now.", "timestamp": "2023-10-05 12:31:33.000000000"}]}
{"thread_id": "732c7264_9ec9c41a", "url": "https://gerrit.libreoffice.org/#/c/core/+/157377/10/test/source/xmltesttools.cxx@186", "comments": [{"message": "any reason not to use the `CPPUNIT_ASSERT_DOUBLES_EQUAL_MESSAGE` instead?", "timestamp": "2023-10-05 06:47:07.000000000"}, {"message": "Done", "timestamp": "2023-10-05 10:15:41.000000000"}]}
{"thread_id": "6294fe8c_fda2a6e8", "url": "https://gerrit.libreoffice.org/#/c/core/+/157377/11/test/source/xmltesttools.cxx@174", "comments": [{"message": "a nitpick: the \"r\" is no more correct (it's not a reference); you may simply use 'expectedValue' without any prefixes in this simple case.", "timestamp": "2023-10-05 10:30:46.000000000"}, {"message": "Done", "timestamp": "2023-10-05 10:41:47.000000000"}]}
{"thread_id": "7a0a4c19_2b9a3687", "url": "https://gerrit.libreoffice.org/#/c/core/+/157630/1/svtools/source/misc/ehdl.cxx@288", "comments": [{"message": "Likely we would need to consider adding this info regardless of the code at some point?", "timestamp": "2023-10-06 07:14:37.000000000"}, {"message": "True", "timestamp": "2023-10-06 07:53:03.000000000"}]}
{"thread_id": "655ec096_c5d54bd5", "url": "https://gerrit.libreoffice.org/#/c/core/+/157529/3/sw/qa/extras/ooxmlexport/ooxmlexport5.cxx@1448", "comments": [{"message": "Originally tested with Word 2010, and also confirmed with Word 2019.", "timestamp": "2023-10-06 00:20:55.000000000"}]}
{"thread_id": "84d532f2_88d364fd", "url": "https://gerrit.libreoffice.org/#/c/core/+/157562/3/sw/qa/extras/tiledrendering/tiledrendering.cxx@2983", "comments": [{"message": "Don't you have to restore the old state when you leave this scope? Possibly that's why some other test in the suite breaks now.", "timestamp": "2023-10-05 14:50:34.000000000"}, {"message": "Probably. I thought it didn't matter because when I tried to set it BEFORE loadandsave it did nothing. But probably that was because there was no mxcomponent or something like that....", "timestamp": "2023-10-05 14:52:14.000000000"}, {"message": "Done", "timestamp": "2023-10-05 16:29:37.000000000"}]}
{"thread_id": "b5d2996b_1cdd1d33", "url": "https://gerrit.libreoffice.org/#/c/core/+/155721/2/sw/qa/extras/ooxmlexport/ooxmlexport3.cxx@175", "comments": [{"message": "this comment needs to be updated as well", "timestamp": "2023-08-21 12:21:07.000000000"}]}
{"thread_id": "cc3aa28b_7daffc9a", "url": "https://gerrit.libreoffice.org/#/c/core/+/157553/1/sw/qa/core/text/porrst.cxx@59", "comments": [{"message": "I bet this will be some font fallback problem; we currently don't abort on font fallback in this suite, possibly I'll enable that, at least on master.", "timestamp": "2023-10-04 07:46:12.000000000"}]}
{"thread_id": "cdd373ff_f51739ef", "url": "https://gerrit.libreoffice.org/#/c/core/+/157204/2/codemaker/source/cppumaker/cpputype.cxx@3021", "comments": [{"message": "Shouldn't we start using C++20 source_location unconditionally? It seems that only clang <= 15 needs 'experimental' at this time [1]\n\n[1] https://en.cppreference.com/w/cpp/compiler_support#C.2B.2B20_library_features", "timestamp": "2023-10-02 09:05:06.000000000"}, {"message": "Feel free to try that out!  (This change just semi-mechanically got rid of now-redundant checks, but didn't try to pursue any further opportunities for improvement.)", "timestamp": "2023-10-04 07:19:40.000000000"}, {"message": "...and now seen addressed with <https://gerrit.libreoffice.org/c/core/+/157515> \"use std::source_location instead of std::experimental::source_location\"", "timestamp": "2023-10-04 07:47:50.000000000"}]}
{"thread_id": "344b172d_9215a840", "url": "https://gerrit.libreoffice.org/#/c/core/+/156858/1/idl/source/objects/object.cxx@228", "comments": [{"message": "Please rename `rList` to `rClassList`.", "timestamp": "2023-09-13 08:38:56.000000000"}, {"message": "Done", "timestamp": "2023-09-14 01:30:06.000000000"}, {"message": "Please also do the rename for the declaration in the header file `idl/inc/object.hxx`.", "timestamp": "2023-09-14 09:53:26.000000000"}, {"message": "Done", "timestamp": "2023-09-14 14:03:40.000000000"}]}
{"thread_id": "3b06bf01_f83189f0", "url": "https://gerrit.libreoffice.org/#/c/core/+/156858/1/idl/source/objects/object.cxx@231", "comments": [{"message": "Also rename `r` to `rClass` here. Ilmari, thanks for the suggestion.", "timestamp": "2023-09-13 08:38:56.000000000"}, {"message": "Done", "timestamp": "2023-09-23 21:29:56.000000000"}]}
{"thread_id": "ec61b0ad_9497c71f", "url": "https://gerrit.libreoffice.org/#/c/core/+/156858/4/idl/source/objects/object.cxx@141", "comments": [{"message": "`SvMetaSlot *pAttr` could be used here.", "timestamp": "2023-09-14 19:36:13.000000000"}, {"message": "Done", "timestamp": "2023-09-17 18:24:35.000000000"}]}
{"thread_id": "59597394_8817f496", "url": "https://gerrit.libreoffice.org/#/c/core/+/156858/4/idl/source/objects/object.cxx@172", "comments": [{"message": "`std::find` is more suitable here.", "timestamp": "2023-09-14 19:36:13.000000000"}, {"message": "Done", "timestamp": "2023-09-17 18:24:35.000000000"}]}
{"thread_id": "c9b53035_9407080f", "url": "https://gerrit.libreoffice.org/#/c/core/+/156858/4/idl/source/objects/object.cxx@179", "comments": [{"message": "`SvMetaAttribute * pAttr` could be used here.", "timestamp": "2023-09-14 19:36:13.000000000"}, {"message": "Done", "timestamp": "2023-09-17 18:24:35.000000000"}]}
{"thread_id": "46282210_4f1890bd", "url": "https://gerrit.libreoffice.org/#/c/core/+/156858/4/idl/source/objects/object.cxx@206", "comments": [{"message": "`SvClassElement& rElement` could be used here.", "timestamp": "2023-09-14 19:36:13.000000000"}, {"message": "Done", "timestamp": "2023-09-17 18:24:35.000000000"}]}
{"thread_id": "aa6b789c_fad1b7a0", "url": "https://gerrit.libreoffice.org/#/c/core/+/156858/4/idl/source/objects/object.cxx@231", "comments": [{"message": "`std::find` is more suitable here.", "timestamp": "2023-09-14 19:36:13.000000000"}, {"message": "Done", "timestamp": "2023-09-17 18:24:35.000000000"}]}
{"thread_id": "eeddba80_008b0240", "url": "https://gerrit.libreoffice.org/#/c/core/+/156858/4/idl/source/objects/object.cxx@238", "comments": [{"message": "`SvClassElement& rElement` could be used here.", "timestamp": "2023-09-14 19:36:13.000000000"}, {"message": "Done", "timestamp": "2023-09-17 18:24:35.000000000"}]}
{"thread_id": "1544f061_71a7df02", "url": "https://gerrit.libreoffice.org/#/c/core/+/156858/4/idl/source/objects/object.cxx@257", "comments": [{"message": "`SvMetaSlot *pAttr` could be used here.", "timestamp": "2023-09-14 19:36:13.000000000"}, {"message": "Done", "timestamp": "2023-09-17 18:24:35.000000000"}]}
{"thread_id": "d841ae6a_56e9916c", "url": "https://gerrit.libreoffice.org/#/c/core/+/156858/4/idl/source/objects/object.cxx@336", "comments": [{"message": "`SvMetaSlot* pAttr` could be used here.", "timestamp": "2023-09-14 19:36:13.000000000"}, {"message": "Done", "timestamp": "2023-09-16 21:00:24.000000000"}]}
{"thread_id": "f6dd4d95_396da4de", "url": "https://gerrit.libreoffice.org/#/c/core/+/157492/2/filter/source/config/cache/filtercache.cxx@1871", "comments": [{"message": "Please add spaces around the '==', and between ) and {.", "timestamp": "2023-10-02 19:02:58.000000000"}]}
{"thread_id": "9135ffe5_129faddf", "url": "https://gerrit.libreoffice.org/#/c/core/+/157136/4/accessibility/source/helper/characterattributeshelper.cxx@b37", "comments": [{"message": "Not really important, but may I ask you, together with the restoration of the empty line above, to make another small change. Here you see, that e.g. on this line, there was a comma, then one space character, and then \"Any(...\". After the change, these appeared two more space characters between the comma and the following text.\n\nI want to as you to make this line have a single space between the comma and the following text again, and all other lines to align with this (it would automatically also restore space count on the other lines). This might be not very important, and is very nerdy of me, but I hope that this change would make the diff be prettier (I might actually be wrong here).\n\nThank you, and sorry for the nitpicking!", "timestamp": "2023-10-02 07:01:53.000000000"}, {"message": "You can ask \ud83d\ude01 I will do it and also change the commit message", "timestamp": "2023-10-02 18:03:31.000000000"}, {"message": "Ack", "timestamp": "2023-10-02 18:05:30.000000000"}, {"message": "Done", "timestamp": "2023-10-03 11:20:36.000000000"}]}
{"thread_id": "1e403aed_3d1099d9", "url": "https://gerrit.libreoffice.org/#/c/core/+/157416/1/vcl/source/bitmap/BitmapEmbossGreyFilter.cxx@104", "comments": [{"message": "That means sqrt(nNx*nNx + nNy*nNy + nZ2*nZ2). That is different from the original. You need to use a different third parameter. Look how nZ2 is currently defined to create a good solution.", "timestamp": "2023-09-30 16:11:28.000000000"}, {"message": "can i write like (std::hypot(nNx, nNy)+nZ2) ?", "timestamp": "2023-09-30 16:50:16.000000000"}, {"message": "No, that would be different too, which you can easily see with a little bit mathematics. nZ2 is defined as squared value in line 53. For std::hypot you need the not-squared value.", "timestamp": "2023-09-30 17:32:06.000000000"}, {"message": "is it ok now?", "timestamp": "2023-09-30 17:48:29.000000000"}, {"message": "Yes, that does mathematically the same as the original.", "timestamp": "2023-09-30 18:43:45.000000000"}]}
{"thread_id": "d7597721_d320f1b2", "url": "https://gerrit.libreoffice.org/#/c/core/+/157416/4/vcl/source/bitmap/BitmapEmbossGreyFilter.cxx@b53", "comments": [{"message": "This needed a rename. The \"nZ2\" stood for \"nZ squared\"; now it's just \"nZ\".", "timestamp": "2023-10-03 07:11:42.000000000"}, {"message": "... or better nNz (because it would be consistent with respective nNx / nNy; and also with the nNzLz).", "timestamp": "2023-10-03 07:22:19.000000000"}, {"message": "Ankit: you can create a new patch for the rename.", "timestamp": "2023-10-03 07:32:08.000000000"}, {"message": "Hmm, sorry for the inconvenience, but I made the change myself in https://gerrit.libreoffice.org/c/core/+/157510. That change might fail, because it's a larger and a bit risky change (it is expected to change results a bit); so possibly it will be abandoned in the end. Then the separate rename would be wanted.\n\nSorry.", "timestamp": "2023-10-03 07:50:34.000000000"}, {"message": "Merged that now.", "timestamp": "2023-10-03 08:59:50.000000000"}, {"message": "Ok sir, I will create a new patch for the rename.", "timestamp": "2023-10-03 09:08:10.000000000"}, {"message": "sir do i need to rename or it is renamed by Mike sir?", "timestamp": "2023-10-03 09:10:35.000000000"}, {"message": "No need to rename, sorry for me being unclear. Thank you for your change!", "timestamp": "2023-10-03 09:11:24.000000000"}, {"message": "ok sir, no problem :)", "timestamp": "2023-10-03 09:12:18.000000000"}]}
{"thread_id": "d998b235_1f95f3aa", "url": "https://gerrit.libreoffice.org/#/c/core/+/157196/11/sw/qa/extras/unowriter/unowriter.cxx@968", "comments": [{"message": "Instead of 0x00FF0000 you could say COL_LIGHTRED", "timestamp": "2023-09-27 05:23:28.000000000"}, {"message": "Done", "timestamp": "2023-10-03 06:43:53.000000000"}]}
{"thread_id": "0b246819_4e6e778c", "url": "https://gerrit.libreoffice.org/#/c/core/+/157196/11/sw/qa/extras/unowriter/unowriter.cxx@1192", "comments": [{"message": "Instead of 0x00FF0000 you could say COL_LIGHTRED", "timestamp": "2023-09-27 05:23:28.000000000"}, {"message": "Done", "timestamp": "2023-10-03 06:43:53.000000000"}]}
{"thread_id": "63a762d0_43b552a5", "url": "https://gerrit.libreoffice.org/#/c/core/+/157196/11/sw/qa/extras/unowriter/unowriter.cxx@1198", "comments": [{"message": "Instead of 0x0000FF00 you could say COL_LIGHTGREEN", "timestamp": "2023-09-27 05:23:28.000000000"}, {"message": "Done", "timestamp": "2023-10-03 06:43:53.000000000"}]}
{"thread_id": "53aefc32_e6740773", "url": "https://gerrit.libreoffice.org/#/c/core/+/157200/1/sw/source/core/access/AccessibilityIssue.cxx@95", "comments": [{"message": "the way this is indented and missing a { makes it hard to read imho", "timestamp": "2023-09-28 10:45:05.000000000"}, {"message": "The git clang-format hook wanted it like this before it would allow the code to be committed. In patchset 2 I've added braces to hopefully make it easier to read.\n\nFor example:\n\n--- a/sw/source/core/access/AccessibilityIssue.cxx.index\n+++ b/sw/source/core/access/AccessibilityIssue.cxx.index.format\n@@ -138,7 +138,8 @@ void AccessibilityIssue::gotoIssue() const\n                 pWrtShell->GotoDrawingObject(TempIssueObject.m_sObjectID);\n \n                 // bring issue to attention\n-                if (SdrPage* pPage = pWrtShell->getIDocumentDrawModelAccess().GetDrawModel()->GetPage(0))\n+                if (SdrPage* pPage\n+                    = pWrtShell->getIDocumentDrawModelAccess().GetDrawModel()->GetPage(0))\n                 {\n                     if (SdrObject* pObj = pPage->GetObjByName(TempIssueObject.m_sObjectID))\n                     {\n\nThe above differences were found between the code to commit \nand the clang-format rules.\nYou can apply these changes with:\n\n/opt/lo/bin/clang-format -i sw/source/core/access/AccessibilityIssue.cxx", "timestamp": "2023-10-01 22:58:06.000000000"}]}
{"thread_id": "57d85743_09f089b9", "url": "https://gerrit.libreoffice.org/#/c/core/+/157200/1/sw/source/core/access/AccessibilityIssue.cxx@198", "comments": [{"message": "not sure why we need this? isnt the footnote anchor itself enough? note that the character following the footnote anchor could be on the next line, in which case the rectangle will look very odd", "timestamp": "2023-09-28 10:45:05.000000000"}, {"message": "Can the next content index be on the next line when the footnote anchor is at the end of a line? It seems there is always a content index with zero width before and after the anchor.", "timestamp": "2023-10-01 22:58:06.000000000"}]}
{"thread_id": "2d4dee98_e341b843", "url": "https://gerrit.libreoffice.org/#/c/core/+/157200/1/sw/source/core/access/AccessibilityIssue.cxx@377", "comments": [{"message": "do we really need to blink 4 times? maybe i'm not the typical user but i hate blinking things...", "timestamp": "2023-09-28 10:45:05.000000000"}, {"message": "The blink occurs twice. The reason for 4 here is that the timer handler adds the overlay on even blink counts and removes it on odd.", "timestamp": "2023-10-01 22:58:06.000000000"}]}
{"thread_id": "50ec9292_dbd1c20c", "url": "https://gerrit.libreoffice.org/#/c/core/+/157200/2/sw/source/core/access/AccessibilityIssue.cxx@105", "comments": [{"message": "Corrects not being able to goto an Avoid footnote/endnote issue when currently at a Anchor Frames/Text boxes \"As Character\" issue. Possibly this should be a separate patch.", "timestamp": "2023-10-01 23:21:17.000000000"}, {"message": "Ack", "timestamp": "2023-10-03 03:30:38.000000000"}]}
{"thread_id": "27fe4277_80c7be69", "url": "https://gerrit.libreoffice.org/#/c/core/+/157200/2/sw/source/uibase/wrtsh/wrtsh1.cxx@1999", "comments": [{"message": "Copy paste relic. Change to SwWrtShell if this patch is the correct approach.", "timestamp": "2023-10-01 23:21:17.000000000"}, {"message": "Ack", "timestamp": "2023-10-03 03:30:38.000000000"}]}
{"thread_id": "d1d5a868_8fef7048", "url": "https://gerrit.libreoffice.org/#/c/core/+/157200/2/sw/source/uibase/wrtsh/wrtsh1.cxx@2024", "comments": [{"message": "See above comment.", "timestamp": "2023-10-01 23:21:17.000000000"}, {"message": "Ack", "timestamp": "2023-10-03 03:30:38.000000000"}]}
{"thread_id": "ccefca74_ca312197", "url": "https://gerrit.libreoffice.org/#/c/core/+/157033/2/vcl/osx/salinst.cxx@978", "comments": [{"message": "Did you take my comment at <https://bugs.documentfoundation.org/show_bug.cgi?id=148071#c8> \"change about info Mac OS X to macOS\" into account?", "timestamp": "2023-09-28 14:06:29.000000000"}, {"message": "Sorry, I did not know about that. Feel free to revert my patch, if I mistakenly broke some stable API.", "timestamp": "2023-09-28 20:32:21.000000000"}, {"message": "quoting that comment at <https://bugs.documentfoundation.org/show_bug.cgi?id=148071#c8> \"change about info Mac OS X to macOS\":\n\n  Assuming Julien's analysis at <https://gerrit.libreoffice.org/c/core/+/131836/1#message-db00d721aa39cf3dc96ed56e2afa71504cd068ef> of all the places where the AquaSalInstance::getOSVersion() value can end up is still accurate, then the remaining open question would be as per <https://gerrit.libreoffice.org/c/core/+/131836/1#message-8f5a9cca1bc35af53067fba7fab8d29b794bdd67>:\n  \n  >> Step 4, branch 2:\n  >> extensions/source/update/feed/updatefeed.cxx:329:OUString UpdateInformationProvider::getUserAgent(bool bExtended)\n  >>\n  >> used by uno::Sequence< beans::StringPair > SAL_CALL UpdateInformationProvider::getUserRequestHeaders( const OUString &aURL, ucb::WebDAVHTTPMethod )\n  >> so in a public interface offapi/com/sun/star/ucb/XWebDAVCommandEnvironment.idl:48:    sequence<com::sun::star::beans::StringPair> getUserRequestHeaders\n  >>\n  >> It could be relevant to provide correct info in a public interface.\n  >\n  > maybe Cloph has an idea about this part", "timestamp": "2023-09-29 06:29:29.000000000"}]}
{"thread_id": "e4cd9f3e_883f3468", "url": "https://gerrit.libreoffice.org/#/c/core/+/157194/1/vcl/source/outdev/text.cxx@1644", "comments": [{"message": "this part of the change is not safe because we don't know if ImplDrawText is always called using \"this\" as rTargetDevice", "timestamp": "2023-09-26 11:41:46.000000000"}, {"message": "and\u2026 what does rTargetDevice do in the function?", "timestamp": "2023-09-27 14:41:56.000000000"}, {"message": "sorry, should be clearer. ImplGetEllpsisString never uses target device. the function uses DefaultTextLayout which is a proxy that forwards text calls to the OutputDevice it is instantiated with. \n\nImplDrawText passes an ITextLayout object to the ImplGetEllipsisString.\n\nthus, that OutputDevice parameter is never used.", "timestamp": "2023-09-27 14:55:26.000000000"}]}
{"thread_id": "c6074153_5c9c542a", "url": "https://gerrit.libreoffice.org/#/c/core/+/81911/3/sw/source/core/attr/swatrset.cxx@404", "comments": [{"message": "mst, do you remember why you did this odd \"call the base class Clone\" thing? \nThe obvious effect is that we get a SfxItemSet instead of a SwAttrSet, but why is that important here?", "timestamp": "2023-09-27 12:37:46.000000000"}, {"message": "not sure, perhaps because every other caller of SetStyleHandle put in a plain SfxItemSet?", "timestamp": "2023-09-28 09:00:53.000000000"}, {"message": "Interesting. \n\nSuperficially that appears to be the case, but in fact some places put in a SfxItemSet and some places put in a SwAttrSet, but hidden behind a shared_ptr<SfxItemSet>\n\nNot serious, was just curious, since I was trying to clean up some SwAttrSet stuff.", "timestamp": "2023-09-28 09:09:53.000000000"}]}
{"thread_id": "6f0cd0cd_854a931e", "url": "https://gerrit.libreoffice.org/#/c/core/+/156979/1/vcl/source/window/menu.cxx@2875", "comments": [{"message": "I'm not sure adding AlwaysShowDisabledEntries is the right thing, because that overrides the behaviour of a customisation option", "timestamp": "2023-09-17 15:29:01.000000000"}, {"message": "Ah, then it seems it may be better to just remove the code added by the patch that made disabled menu items never show.", "timestamp": "2023-09-17 20:38:00.000000000"}]}
{"thread_id": "4087f8b8_8ab9a1bc", "url": "https://gerrit.libreoffice.org/#/c/core/+/156273/7/codemaker/source/cppumaker/cpputype.cxx@1211", "comments": [{"message": "I would just unconditionally emit the below into the generated files.  (Or is there a good reason not to?)", "timestamp": "2023-09-19 06:47:19.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/157234 - Apparently it was redundant to emit this after template specialization of emscripten::internal::raw_destructor", "timestamp": "2023-09-25 06:56:12.000000000"}]}
{"thread_id": "8c928386_08d14b66", "url": "https://gerrit.libreoffice.org/#/c/core/+/157036/27/desktop/source/app/sofficemain.cxx@55", "comments": [{"message": "Leftover debug change?", "timestamp": "2023-09-21 07:18:45.000000000"}, {"message": "Done", "timestamp": "2023-09-21 10:25:24.000000000"}]}
{"thread_id": "9b91cb1a_96cc1b6d", "url": "https://gerrit.libreoffice.org/#/c/core/+/157036/27/desktop/source/app/sofficemain.cxx@96", "comments": [{"message": "Leftover debug change?", "timestamp": "2023-09-21 07:18:45.000000000"}, {"message": "Done", "timestamp": "2023-09-21 10:25:24.000000000"}]}
{"thread_id": "4ba6b75e_bd2276c0", "url": "https://gerrit.libreoffice.org/#/c/core/+/157036/27/framework/source/loadenv/loadenv.cxx@237", "comments": [{"message": "Leftover debug change?", "timestamp": "2023-09-21 07:18:45.000000000"}, {"message": "Done", "timestamp": "2023-09-21 10:25:24.000000000"}]}
{"thread_id": "2c34f1bd_c0e62200", "url": "https://gerrit.libreoffice.org/#/c/core/+/148368/1/connectivity/source/drivers/firebird/Connection.cxx@954", "comments": [{"message": "Have you tested that codepath where a SQLException is caught? Is a message shown to the user, or is the WrappedTargetRuntimeException silently ignored somewhere up?", "timestamp": "2023-03-07 03:20:36.000000000"}, {"message": "There are not any message, so the exception is ignored (silenty)", "timestamp": "2023-03-07 15:55:59.000000000"}]}
{"thread_id": "bb7c24bc_94033649", "url": "https://gerrit.libreoffice.org/#/c/core/+/156592/1/comphelper/source/misc/accessiblewrapper.cxx@588", "comments": [{"message": "and we probably want to run the same logic here whether we are called via disposing() or disposing(EventObject&)", "timestamp": "2023-09-06 09:26:57.000000000"}, {"message": "You're probably right. Does https://gerrit.libreoffice.org/c/core/+/156620 address that?", "timestamp": "2023-09-06 14:19:02.000000000"}, {"message": "Thanks for looking into that! Backport for that pending on top of this change here now (can squash both into one if preferred): https://gerrit.libreoffice.org/c/core/+/156602", "timestamp": "2023-09-07 05:17:02.000000000"}]}
{"thread_id": "4edf3c6f_073d6151", "url": "https://gerrit.libreoffice.org/#/c/core/+/156592/1/include/comphelper/accessiblewrapper.hxx@301", "comments": [{"message": "I think we want to continue using the OAccessibleContextWrapperHelper::disposing method here, so that dispose() calls into the wrapper clean up all the associated fields in the OAccessibleContextWrapperHelper class", "timestamp": "2023-09-06 09:26:57.000000000"}, {"message": "Note that what the `using` stands for has changed. It was for `disposing(const css::lang::EventObject&)` before (which is defined in `OAccessibleContextWrapperHelper`), but now that is explicitly overriden (s. below) and explicitly calls the base class implementation, `OAccessibleContextWrapperHelper::disposing`.\n\nThe \"new\" `using` is for `disposing()` instead, which isn't declared anywhere in the `OAccessibleContextWrapperHelper` base class hierarchy, just in the `WeakComponentImplHelper` one, and is no longer explicitly overriden with this change in place.", "timestamp": "2023-09-06 14:19:02.000000000"}, {"message": "In any case, the explicit override is back w/ the follow-up change in place anyway.", "timestamp": "2023-09-07 05:17:02.000000000"}]}
{"thread_id": "b3d34de7_29257ae7", "url": "https://gerrit.libreoffice.org/#/c/core/+/157020/1/sfx2/source/control/thumbnailview.cxx@421", "comments": [{"message": "ENABLE_WASM_STRIP_RECENT doesn't have the correct value somehow...", "timestamp": "2023-09-18 11:50:44.000000000"}]}
{"thread_id": "e5b37e6b_1a6cdb57", "url": "https://gerrit.libreoffice.org/#/c/core/+/156621/2/desktop/source/lib/init.cxx@5978", "comments": [{"message": "This is the third `aStream.str()`. Best to do that only once and have a local std::string that we can reuse.\n\nAlso, `strcpy` already copies the null termination.", "timestamp": "2023-09-12 00:26:21.000000000"}, {"message": "Indeed, next patches will address the issue, it is a code snippet used\nin several functions.", "timestamp": "2023-09-15 14:11:58.000000000"}]}
{"thread_id": "a5f56e6e_acb94217", "url": "https://gerrit.libreoffice.org/#/c/core/+/156937/1/writerfilter/source/dmapper/TableManager.cxx@479", "comments": [{"message": "Ah, this is inside #ifdef DBG_UTIL, but that's not intentional, let me fix.", "timestamp": "2023-09-15 11:40:16.000000000"}]}
{"thread_id": "203a4bd9_d7eba9d8", "url": "https://gerrit.libreoffice.org/#/c/core/+/156922/2/sw/source/core/unocore/unoframe.cxx@1889", "comments": [{"message": "In IllegalArgumentException, -1 means \"the argument position is not known\" - is the 0 here meant to tell that exactly the first argument is wrong?\n\nhttps://api.libreoffice.org/docs/idl/ref/exceptioncom_1_1sun_1_1star_1_1lang_1_1IllegalArgumentException.html#a0442ac6e2349df192c5a2d5e158a6904", "timestamp": "2023-09-15 08:36:52.000000000"}]}
{"thread_id": "4de99462_0c181cde", "url": "https://gerrit.libreoffice.org/#/c/core/+/154917/13/sc/source/ui/formdlg/dwfunctr.cxx@247", "comments": [{"message": "This is always false, has already been checked above.", "timestamp": "2023-09-01 20:47:55.000000000"}, {"message": "Done", "timestamp": "2023-09-12 14:19:29.000000000"}]}
{"thread_id": "dfeb2761_a773ae4d", "url": "https://gerrit.libreoffice.org/#/c/core/+/58676/1/sw/source/core/layout/frmtool.cxx@1195", "comments": [{"message": "maybe add an assert-not-full before the push_back?", "timestamp": "2018-08-07 10:03:09.000000000"}, {"message": "hmm right now it's obvious that it can't happen any more... i havent checked if the thing even has a \"isFull\" function...", "timestamp": "2018-08-07 10:05:19.000000000"}, {"message": "vFormatsToConnect.full()\naccording to\nhttps://www.boost.org/doc/libs/1_66_0/boost/circular_buffer/base.hpp", "timestamp": "2018-08-07 10:10:46.000000000"}]}
{"thread_id": "81e6fb8e_b8f92f46", "url": "https://gerrit.libreoffice.org/#/c/core/+/58676/3/sw/source/core/layout/frmtool.cxx@1196", "comments": [{"message": "This now causes my GCC build to complain (and rightly so, I think)\n\n  sw/source/core/layout/frmtool.cxx: In function \u2018void AppendAllObjs(const sw::FrameFormats<sw::SpzFrameFormat*>*, const SwFrame*)\u2019:\n  sw/source/core/layout/frmtool.cxx:1426:34: error: \u2018*vFormatsToConnect$16\u2019 may be used uninitialized [-Werror=maybe-uninitialized]\n   1426 |             if(pFirstRequeued == pFormat)\n        |                                  ^~~~~~~", "timestamp": "2023-09-04 13:54:55.000000000"}, {"message": "Probably what is necessary is that this line:\n\n     auto& pFormat = vFormatsToConnect.front();\n     \nshould read\n\n     auto pFormat = vFormatsToConnect.front();\n     \notherwise after the pop_front, pFormat is a reference to some random element of the buffer.", "timestamp": "2023-09-04 14:04:57.000000000"}, {"message": "seen addressed with <https://git.libreoffice.org/core/+/e2a0530a26b5c5b5f48d3e3c695b839d0e5c0164%5E!/> \"fix use of reference\" now", "timestamp": "2023-09-14 13:37:45.000000000"}]}
{"thread_id": "a5f9ae25_6b03443c", "url": "https://gerrit.libreoffice.org/#/c/core/+/146512/12/sc/qa/extras/vba-macro-test.cxx@839", "comments": [{"message": "Hi Balazs,\nShould you at least check the pdf has been created with the expected content ?", "timestamp": "2023-02-14 11:17:09.000000000"}, {"message": "I thought the executeMacro() will throw the error if the VBA macro did not run successfuly. Or am I wrong? :(", "timestamp": "2023-02-16 09:52:51.000000000"}, {"message": "Done", "timestamp": "2023-09-14 08:52:29.000000000"}]}
{"thread_id": "1d1a4959_74e750d8", "url": "https://gerrit.libreoffice.org/#/c/core/+/156842/3/binaryurp/source/bridge.cxx@924", "comments": [{"message": "I'm not convinced that a general rule of \"clear all references in dispose()\" is a good idea.  For example, in this class, access to connection_ and provider_ is not guarded against MT-races, on the basis that those two are never modified post construction.  That is broken now.  Also, e.g. Bridge::getDescription dereferences connection_, and benignly used to work fine even when called on a disposed instance.  Now, it causes UB.", "timestamp": "2023-09-13 08:53:20.000000000"}, {"message": "revert in progress.", "timestamp": "2023-09-13 09:01:38.000000000"}]}
{"thread_id": "2ec763e1_491deac9", "url": "https://gerrit.libreoffice.org/#/c/core/+/156748/1/sc/source/filter/oox/sheetdatacontext.cxx@282", "comments": [{"message": "typo: default", "timestamp": "2023-09-12 12:44:08.000000000"}, {"message": "Done", "timestamp": "2023-09-12 18:50:53.000000000"}]}
{"thread_id": "2c469c9c_f49a60d6", "url": "https://gerrit.libreoffice.org/#/c/core/+/156807/2/vcl/source/font/font.cxx@74", "comments": [{"message": "This condition must become\n\n    if (GetFamilyName() != rFamilyName\n        || GetAverageFontSize() != rSize)", "timestamp": "2023-09-11 16:06:26.000000000"}, {"message": "https://paste.simplylinux.ch/view/f964b80e\nhow about this. or the one you mentioned. As you say\nthe one you propose is more readible though, but then wouldn't we have\nto write a lot of functinos to replace all const_cast<const ImplType&>..", "timestamp": "2023-09-11 16:17:49.000000000"}, {"message": "https://paste.simplylinux.ch/view/cd163fca#L38 there are ma 28 const_casts<...>", "timestamp": "2023-09-11 16:22:03.000000000"}, {"message": "> https://paste.simplylinux.ch/view/f964b80e\n> how about this.\n\nThis is exactly what I asked to *not* do, because mpImplFontRef is the getter for mpImplFont specifically.\n\n> but then wouldn't we have to write a lot of functinos to replace all const_cast<const ImplType&>..\n\nNo problem: see Quikee's\n\n> (and add missing getters where needed)", "timestamp": "2023-09-11 17:52:24.000000000"}, {"message": "got it", "timestamp": "2023-09-11 17:54:06.000000000"}, {"message": "Done", "timestamp": "2023-09-12 17:36:39.000000000"}]}
{"thread_id": "ea466d95_8e2a0f19", "url": "https://gerrit.libreoffice.org/#/c/core/+/156845/1/sc/source/filter/oox/sheetdatacontext.cxx@282", "comments": [{"message": "spelling: default", "timestamp": "2023-09-12 12:53:53.000000000"}, {"message": "Done", "timestamp": "2023-09-12 18:50:26.000000000"}]}
{"thread_id": "4b137fbc_4e05ce64", "url": "https://gerrit.libreoffice.org/#/c/core/+/156826/1/vcl/osx/salinst.cxx@559", "comments": [{"message": "what you want here is\n\n    static bool inUnitTest = getenv(\"LO_TESTNAME\") != nullptr\n\nlike we do elsewhere", "timestamp": "2023-09-11 15:55:17.000000000"}, {"message": "Thanks for the tip about the LO_TESTNAME environment variable. Looks like SalInstance::IsRunningUnitTest() is a convenient static method to check that environment variable so I used that in patch set 2.", "timestamp": "2023-09-11 22:46:07.000000000"}]}
{"thread_id": "7d5b8a94_b4df8491", "url": "https://gerrit.libreoffice.org/#/c/core/+/155873/12/lotuswordpro/source/filter/bencont.cxx@74", "comments": [{"message": "wouldn't it be better to let this function return enum BenError?", "timestamp": "2023-09-12 06:35:49.000000000"}, {"message": "It should be. Back then I didn't know much about enums, therefore changed it to the smallest possible one. How should I change it now?\n\nSeperate commit or some git magic (would be better)\nas you say", "timestamp": "2023-09-12 09:34:26.000000000"}, {"message": "Has to be new patch as this is already merged.", "timestamp": "2023-09-12 10:06:07.000000000"}]}
{"thread_id": "640f87ce_8e1509cd", "url": "https://gerrit.libreoffice.org/#/c/core/+/154963/2/sw/source/core/text/porlay.cxx@1465", "comments": [{"message": "shouldnt this be nPos = nPrevPos in case there's a surrogate before?", "timestamp": "2023-07-28 08:30:13.000000000"}, {"message": "Yes indeed. I\u2019m fixing it here, and will create a fix for master (the similar cod in editeng needs to be fixed as well).", "timestamp": "2023-07-28 08:34:32.000000000"}, {"message": "https://gerrit.libreoffice.org/c/core/+/155036", "timestamp": "2023-07-30 07:48:32.000000000"}]}
{"thread_id": "b3a6aabd_5ae9417c", "url": "https://gerrit.libreoffice.org/#/c/core/+/156496/1/svx/source/dialog/SafeModeDialog.cxx@89", "comments": [{"message": "This needs to be something else, probably.", "timestamp": "2023-09-05 15:33:35.000000000"}, {"message": "Done", "timestamp": "2023-09-07 21:47:44.000000000"}]}
{"thread_id": "aa97c773_0dc2140a", "url": "https://gerrit.libreoffice.org/#/c/core/+/156642/1/cui/source/dialogs/QrCodeGenDialog.cxx@234", "comments": [{"message": "rFunc should be called in the lambda with result", "timestamp": "2023-09-07 07:37:11.000000000"}, {"message": "i have done some changes here. still runAsync is not getting override here.", "timestamp": "2023-09-08 06:13:17.000000000"}]}
{"thread_id": "415b2ac9_49bd79ac", "url": "https://gerrit.libreoffice.org/#/c/core/+/156255/2/filter/source/pdf/impdialog.cxx@128", "comments": [{"message": "Now fails to set `mrView` with : `empty uno::Reference` when inspecting with gdb", "timestamp": "2023-08-31 14:25:54.000000000"}]}
{"thread_id": "df15cb77_1ed3ff8d", "url": "https://gerrit.libreoffice.org/#/c/core/+/156406/1/xmloff/qa/unit/text.cxx@75", "comments": [{"message": "uno::Any(OUString(\"parent_comment_name\"))\n\nOtherwise baseline GCC7 won't build this.", "timestamp": "2023-09-01 13:59:02.000000000"}, {"message": "Done", "timestamp": "2023-09-04 07:56:40.000000000"}]}
{"thread_id": "cc5ae395_c197230c", "url": "https://gerrit.libreoffice.org/#/c/core/+/156406/1/xmloff/qa/unit/text.cxx@89", "comments": [{"message": "CPPUNIT_ASSERT_EQUAL(OUString(\"parent_comment_name\"), ...\n\nSame here, for baseline GCC.", "timestamp": "2023-09-01 13:59:02.000000000"}, {"message": "Done", "timestamp": "2023-09-04 07:56:40.000000000"}]}
{"thread_id": "edd478a0_8424ee88", "url": "https://gerrit.libreoffice.org/#/c/core/+/156391/1/sw/source/core/fields/docufld.cxx@1895", "comments": [{"message": "Maybe add a comment here on why 5 & 6 is skipped here (5 would be para id parent, 6 would be para id, I guess).", "timestamp": "2023-09-01 08:32:53.000000000"}, {"message": "Done", "timestamp": "2023-09-01 09:42:04.000000000"}]}
{"thread_id": "24228b44_a186f2e8", "url": "https://gerrit.libreoffice.org/#/c/core/+/156391/1/sw/source/uibase/docvw/PostItMgr.cxx@179", "comments": [{"message": "JSON seems to use camelCase key names, so this would be parentId?", "timestamp": "2023-09-01 08:32:53.000000000"}, {"message": "Done", "timestamp": "2023-09-01 09:42:04.000000000"}]}
{"thread_id": "14eae999_480b485c", "url": "https://gerrit.libreoffice.org/#/c/core/+/156391/1/sw/source/uibase/docvw/PostItMgr.cxx@1341", "comments": [{"message": "Leftover debug printf? Use can use SAL_DEBUG(\"...\") next time, then git commit will complain if you forget to remove them. :-)", "timestamp": "2023-09-01 08:32:53.000000000"}, {"message": "Done", "timestamp": "2023-09-01 09:42:04.000000000"}]}
{"thread_id": "7f66f254_5ddb76f8", "url": "https://gerrit.libreoffice.org/#/c/core/+/156391/1/sw/source/uibase/docvw/PostItMgr.cxx@1345", "comments": [{"message": "pChild, pChildField or pChildPostIt would be a better name to follow the style of the surrounding code.", "timestamp": "2023-09-01 08:32:53.000000000"}, {"message": "Done", "timestamp": "2023-09-01 09:42:04.000000000"}]}
{"thread_id": "cb0c039f_cd0ac37e", "url": "https://gerrit.libreoffice.org/#/c/core/+/156391/1/sw/source/uibase/docvw/PostItMgr.cxx@1351", "comments": [{"message": "Same here, pParent or something, drop the \"if\".", "timestamp": "2023-09-01 08:32:53.000000000"}, {"message": "Done", "timestamp": "2023-09-01 11:15:25.000000000"}]}
{"thread_id": "4b839190_8efce78a", "url": "https://gerrit.libreoffice.org/#/c/core/+/156330/2/xmloff/source/text/txtfldi.cxx@341", "comments": [{"message": "this is only for DocInfo text fields, and very incomplete, should probably be a separate commit if things need to be shown in fields", "timestamp": "2023-09-01 08:50:29.000000000"}, {"message": "cargo culted too hard there, thank you for noticing", "timestamp": "2023-09-01 09:19:13.000000000"}]}
{"thread_id": "045b74a1_ef60a277", "url": "https://gerrit.libreoffice.org/#/c/core/+/156312/1/cui/source/options/treeopt.cxx@823", "comments": [{"message": "Imho, you don't need that here since the reset will be done in the destructor.", "timestamp": "2023-08-31 11:03:12.000000000"}, {"message": "Done", "timestamp": "2023-09-01 16:32:07.000000000"}]}
{"thread_id": "0fc66df3_c2ba6187", "url": "https://gerrit.libreoffice.org/#/c/core/+/156465/2/vcl/qt5/QtFrame.cxx@367", "comments": [{"message": "I wonder if using isDark() makes more sense.", "timestamp": "2023-09-04 06:37:38.000000000"}, {"message": "Do you mean Color::IsDark() as defined in include/tools/color.hxx?\n\nSince this is about desktop/toolkit integration, I think it's more consistent to comply with Qt's/KDE's understanding of what a dark color scheme is here than using our own one.", "timestamp": "2023-09-04 07:09:15.000000000"}, {"message": "Ack", "timestamp": "2023-09-04 07:49:41.000000000"}]}
{"thread_id": "1501ccd6_3c754e6c", "url": "https://gerrit.libreoffice.org/#/c/core/+/155951/2/sfx2/source/dialog/StyleList.cxx@757", "comments": [{"message": "how about if you use set_text(rIter, rName, 0) ?", "timestamp": "2023-08-23 11:08:41.000000000"}, {"message": "Thanks, works great!", "timestamp": "2023-08-23 16:25:00.000000000"}]}
{"thread_id": "1153c027_93d5916c", "url": "https://gerrit.libreoffice.org/#/c/core/+/155951/2/sfx2/source/dialog/StyleList.cxx@1279", "comments": [{"message": "and here, and drop the salvtables change then", "timestamp": "2023-08-23 11:08:41.000000000"}]}
{"thread_id": "a4e0aae7_cec45149", "url": "https://gerrit.libreoffice.org/#/c/core/+/155951/2/vcl/source/app/salvtables.cxx@4057", "comments": [{"message": "caolan, any idea how I should modify the bulk_insert_for_each logic here? In this case, I need to be adding strings to the TreeView, else when I call set_text inside my lambda, I will trigger an assert", "timestamp": "2023-08-23 09:51:28.000000000"}]}
{"thread_id": "d3d683ac_1f42d03f", "url": "https://gerrit.libreoffice.org/#/c/core/+/156296/1/svx/source/form/ParseContext.cxx@153", "comments": [{"message": "These days the \"TranslateId\" (in include/unotools/resmgr.hxx) is a struct where the 2nd \"mpId\" member is the en-US string. So in theory one could omit some of this and just go from the mpId member as the already en-US version, but that is chumminess with the internals I guess.", "timestamp": "2023-08-31 16:11:20.000000000"}, {"message": "Thanks, I will simplify it when back-porting to master", "timestamp": "2023-09-01 12:57:33.000000000"}]}
{"thread_id": "b2b8df28_9c12f53d", "url": "https://gerrit.libreoffice.org/#/c/core/+/156295/1/connectivity/source/parse/sqlnode.cxx@2497", "comments": [{"message": "changing the default looks a bit worrying. On the other hand git log suggest that it became sal_Int32 nType = DataType::VARCHAR; in:\n\ncommit 10e1f197a88819a7fa0c6b28ed6bd0f1a4d2bda0\nAuthor: Jens-Heiner Rechtien <hr@openoffice.org>\nDate:   Tue Jun 20 01:09:05 2006 +0000\n\n    INTEGRATION: CWS warnings01 (1.37.30); FILE MERGED\n\nThe old commits are basically mangled that far back so its hard to tell what it looked like before that change, it seems plausible that it was not set to anything originally and that VARCHAR was picked somewhat arbitrarily to silence an uninitialized warning.", "timestamp": "2023-08-31 16:07:45.000000000"}, {"message": "Thanks, I was analyzing possible regressions and  all code paths show no much impact, anyway we will know if the data test shows something related", "timestamp": "2023-09-01 12:54:07.000000000"}]}
{"thread_id": "f651801a_d561003f", "url": "https://gerrit.libreoffice.org/#/c/core/+/155866/1/connectivity/source/commontools/dbtools2.cxx@156", "comments": [{"message": "The \"connectivity/source/commontools/dbtools2.cxx:156:13: error: simplify by merging with the preceding assign/append [loplugin:stringadd]\" warning is probably trying to get you to write:\n\naSql.append(OUString::Concat(\")\") + sTypeName.subView(nParenPos));\n\nhere, which is totally non-obvious, but *shrug*", "timestamp": "2023-08-21 11:21:50.000000000"}, {"message": "Let's consider this resolved since there's no more 2 calls in a row of the \"append\" method.\nPierre: if you encounter a similar case, rather follow Caol\u00e1n's advice by using OUString::Concat first instead of last as I wrongly advised you in the bugtracker (sorry for this).", "timestamp": "2023-08-21 13:49:17.000000000"}]}
{"thread_id": "45b7d1e3_03612e2b", "url": "https://gerrit.libreoffice.org/#/c/core/+/156283/3/basic/qa/cppunit/test_vba.cxx@172", "comments": [{"message": "SAL_INFO seems better suited for the changes in this file. Also, pReturn->GetOUString()); doesn't have to be on its own line as it doesn't make the line overly long.", "timestamp": "2023-08-31 07:28:12.000000000"}, {"message": "done.", "timestamp": "2023-08-31 13:45:54.000000000"}]}
{"thread_id": "486a531d_9a46edd9", "url": "https://gerrit.libreoffice.org/#/c/core/+/156304/4/sc/qa/unit/subsequent_filters_test3.cxx@445", "comments": [{"message": "Why is this test not in sc/qa/unit/ucalc_sparkline.cxx or at least in sc/qa/unit/SparklineImportExportTest.cxx", "timestamp": "2023-08-31 16:32:30.000000000"}]}
{"thread_id": "a2d7b06b_d68e2bb0", "url": "https://gerrit.libreoffice.org/#/c/core/+/155627/5/sw/qa/api/SwXAutoTextContainer.cxx@43", "comments": [{"message": "This is broken by design, as it modifies instset/:  testInsertNewByName will create a spurious instdir/share/autotext/en-US/crdbus50Insert.bau, and testRemoveByName will remove instdir/share/autotext/en-US/crdbus50.bau.", "timestamp": "2023-08-28 09:17:47.000000000"}, {"message": "Addressed this for now with <https://gerrit.libreoffice.org/c/core/+/156192> \"Fix CppunitTest_sw_apitests\" to get builds unstuck.  Please come up with a proper fix eventually.", "timestamp": "2023-08-28 11:29:15.000000000"}, {"message": "Will look into it.", "timestamp": "2023-08-31 13:01:44.000000000"}]}
{"thread_id": "d1b9e3e1_c2c00736", "url": "https://gerrit.libreoffice.org/#/c/core/+/155904/6/sw/source/core/layout/atrfrm.cxx@2623", "comments": [{"message": "hmm sberg is right, this doesn't work for text frames ... you'll need to find which node is used in the A11yCheck to identify the text frame as it probably isn't the first text node in the text frame, presumably it's the start node?", "timestamp": "2023-08-24 09:17:47.000000000"}, {"message": "Ok, i am going to check asap. Thanks for the notice. Until then, revert on at least 7-6?", "timestamp": "2023-08-24 09:23:24.000000000"}, {"message": "this should be not much effort to fix, there is a -7-6-1 branch so it will take a while until -7-6-2, no need to revert now...", "timestamp": "2023-08-24 09:29:55.000000000"}, {"message": "ok, thanks. :)", "timestamp": "2023-08-24 09:33:18.000000000"}, {"message": "Can you get this either fixed or reverted on master?  I'd like to get <https://ci.libreoffice.org/job/lo_ubsan/> unstuck.", "timestamp": "2023-08-29 06:39:18.000000000"}, {"message": "Just pushed here yesterday. Sorry for the late patch.\nhttps://gerrit.libreoffice.org/c/core/+/156200", "timestamp": "2023-08-30 06:22:20.000000000"}, {"message": "Done", "timestamp": "2023-08-30 10:13:41.000000000"}]}
{"thread_id": "926bd0f2_93dad967", "url": "https://gerrit.libreoffice.org/#/c/core/+/152519/23/cui/source/options/connpooloptions.cxx@167", "comments": [{"message": "const auto&", "timestamp": "2023-08-19 09:00:06.000000000"}, {"message": "Done", "timestamp": "2023-08-19 17:45:34.000000000"}]}
{"thread_id": "313f8e76_e93bf74c", "url": "https://gerrit.libreoffice.org/#/c/libvisio/+/161397/1/src/lib/VSDStyles.h@156", "comments": [{"message": "I think it would be better to set default value of `fgColour` to `(0x5b, 0x9b, 0xd5, 0)` here.", "timestamp": "2023-12-29 10:47:01.000000000"}, {"message": "I tried, but it did not work.", "timestamp": "2023-12-29 11:20:17.000000000"}, {"message": "Done", "timestamp": "2023-12-29 12:27:06.000000000"}]}
